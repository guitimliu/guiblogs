<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>因為 AI 的強大，我開始學習測試了！？近期體悟分享</title>
    <link href="/test-learn-start/"/>
    <url>/test-learn-start/</url>
    
    <content type="html"><![CDATA[<p>測試是一個工程師都知道要寫的東西，但常常跟文件一樣，<del>不知不覺就閃過去了</del> XDD 閃過去的念頭不外乎就是開發就夠忙了，哪有來的時間寫測試？尤其像是我在接案公司，趕 Deadline 都很勉強了還跟你測試？</p><p>但請不要忘記我們現在這個時代的黑科技登場：AI！</p><p><img src="https://img.guiblogs.com/test-learn-start/test-learn-start.jpg" alt="因為 AI 的強大，我開始學習測試了！？近期體悟分享"></p><a id="more"></a><h2 id="開始學習測試的契機"><a href="#開始學習測試的契機" class="headerlink" title="開始學習測試的契機"></a>開始學習測試的契機</h2><p>學習一項技能，要有契機、原因或是藍圖，那我的契機是什麼呢？</p><h3 id="第一階段：公司導入了-AI"><a href="#第一階段：公司導入了-AI" class="headerlink" title="第一階段：公司導入了 AI"></a>第一階段：公司導入了 AI</h3><p>最近公司導入了 Cursor 這個 AI，讓我感到對於開發有更多的想像性，開始想著有什麼東西可以提升效率？啊！我想就是 debug 這件事情！目前我們公司在 debug 都還是滿仰賴人力、肉眼除錯的，如果有機會直接讓 AI 幫我們去處理這塊，看起來好像滿讚的！</p><h3 id="第二階段：從想像到開始"><a href="#第二階段：從想像到開始" class="headerlink" title="第二階段：從想像到開始"></a>第二階段：從想像到開始</h3><p>但說真的身為一個測試小白，第一步總是困難的？要找資源、課程、書籍等等，而且也不知道該怎麼起手。</p><p>結果就剛好看到平常所待的 Discord 群組，開始招募了測試的線上讀書會，我就想說哇這也太剛好了吧，大概考慮了一下就加入了 XDD</p><p>覺得大家想學習一項新技能，也可以去像是技能交換網或 Facebook 社團等之類的平台～尋找是否有人在找讀書會或是自己辦一個，我覺得有大家一起讀、環境一起成長，會比較不容易半途而廢！</p><h2 id="我希望達成什麼藍圖？前端測試種類？"><a href="#我希望達成什麼藍圖？前端測試種類？" class="headerlink" title="我希望達成什麼藍圖？前端測試種類？"></a>我希望達成什麼藍圖？前端測試種類？</h2><p>其實我一開始的想像是，單純希望讓一些功能不會壞掉，就這樣 XD 畢竟我對測試的認知還沒到很深，所以不太了解測試能做什麼？</p><p>直到我開始讀了測試讀書會指定的書籍「前端測試指南：策略與實踐 - 唐心皓（Summer） 著」其中的前端測試種類，好像慢慢有了一點想像。</p><p>這裡簡略提到一點，這會是一篇技術筆記系列文，之後會再詳細提到他們分別是什麼：</p><ul><li>單元測試：對「對小單位的測試」，比方說有一段程式單純做「數字相差」，沒錯！就是驗證這麼小的東西。</li><li>整合測試：對於功能進行的全面測試，比方說要測試一個元件能夠「按了一個按鈕，出現一段文字」。</li><li>端對端測試：模擬使用者操作流程的測試。</li><li>視覺測試：利用工具自動檢測使用者介面變更的測試。</li></ul><p>說真的當讀完第一章之後我才發現原來有這麼多方便的測試工具！像是單元測試，可能會認為說這麼簡單幹嘛測試？不過像是 JavaScript 或是有人如果跟我一樣有寫過 PHP 的，因為弱型別語言的關係，就可能會出現型別錯誤。或是說數字計算時會出現小誤點誤差等等的情況，其實就很適合使用單元測試。</p><p>目前其實我有在整理公司的初始後端開發範本，就很適合針對一些基本專案一定會用到的功能做個測試，這樣之後專案複製出來也會是對的，減少的多少成本呀～</p><h2 id="沒想到居然對我的工作已經有些幫助？"><a href="#沒想到居然對我的工作已經有些幫助？" class="headerlink" title="沒想到居然對我的工作已經有些幫助？"></a>沒想到居然對我的工作已經有些幫助？</h2><p>在讀到視覺測試這塊，有對前端測試有新的認知，可以針對說畫面如果有變動、RWD、不同裝置的不同狀況去做監測，超讚！</p><p>不過我自己是剛好有遇到一個情況：一個老舊專案要去做改善，但因為該專案的資料不少，上傳上去後我需要肉眼去一個一個檢查，其實真的還滿麻煩的。</p><p>這時候我就突發奇想，去使用了視覺測試來幫助我判斷資料是否有更動 XD 於是我馬上請了 Cursor AI 與 Chat GPT 大神給了我怎麼去執行，說真的 code 我基本上也不太會寫 XDD 但就在跟 AI 一起協作的情況下，就能夠針對我改善 code 更新前與更新後去幫我比對差距是小的（會有點誤差範圍），後續上傳之後也確實就沒有問題。</p><p>當然我不確定這是不是個好辦法，但至少給了我一些解決的思路，我是覺得挺不錯的。大家也可以嘗試出自己不同的解決方法～</p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>覺得現在真的很方便能夠與 AI 進行協作～</p><p>但其實一開始我有想過一個念頭：既然 AI 這麼強大了，那我還要特別學習測試有意義嗎？還是就請 AI 幫我去處理就可以了～</p><p>但後來覺得說還是可以去嘗試學習看看，也因為我去知道了這些測試的東西，我有了新的認知，就能夠搭配過去的經驗產生出沒有想過的搭配與方法！畢竟 AI 是一個工具，但如果我們有更多的知識與創意，更能夠創造出更多提升產能的東西吧！</p><p>之後會有一系列的測試系列文，新手上路也可能會有些錯誤 XDD 會盡可能的將內容寫到正確～希望大家一起指教多多交流！</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li>前端測試指南：策略與實踐 - 唐心皓（Summer） 著</li><li>Cursor AI</li><li>Chat GPT</li><li>縮圖是 Chat GPT 產生出來的</li></ul>]]></content>
    
    
    <categories>
      
      <category>測試</category>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>測試</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>透過「家具店的菜雞銷售奇遇記」來學 PostgreSQL 資料庫指令啦！再次參加六角學院體驗營，這次是學習後端？</title>
    <link href="/hex-backend2024-homework-1/"/>
    <url>/hex-backend2024-homework-1/</url>
    
    <content type="html"><![CDATA[<p>距離上一次更新部落格竟然是兩年半前的事情了。說來慚愧，除了工作忙碌，其實就是很多理由 XD 一直有想回來更新的想法，但內心雜音、要做的事情太多，一直沒有成行。這一次再度參與六角學驗的體驗營，就趁好來趁這次的機會，更新一下學習筆記 XD</p><a id="more"></a><p>經歷了兩年前端工作的磨練，慢慢對於前端技能有了一些感覺。但其實我的初次工作經驗，也就是實習其實是寫 PHP 後端的，在後來的正職工作與接案上，其實也接觸了不少後端。這也讓我開始在思考說，是否可以往全端技能樹發展了？但其實資料庫是我的硬傷，尤其是在大學時，資料庫就是我最不拿手的科目沒有之一（誒），也是其中一個我為何後來想轉往前端的原因 XDD 但既然想往全端技能發展，勢必資料庫就是我不能逃避的技能了，剛好就趁這一次的體驗營，來好好重新梳理資料庫的內容吧！</p><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><h3 id="執行環境"><a href="#執行環境" class="headerlink" title="執行環境"></a>執行環境</h3><p>我們會使用 <a href="https://pg-sql.com/">PG SQL</a> 這個線上平台來執行 PostgreSQL 指令。</p><h3 id="初始語法"><a href="#初始語法" class="headerlink" title="初始語法"></a>初始語法</h3><p>首先，要先建立 poducts 資料表，先定義資料表的欄位類型後，透過 INSERT INTO 新增指令建立預設資料。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> products (<br>   name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>),         <span class="hljs-comment">-- 商品名稱</span><br>   price <span class="hljs-type">INTEGER</span>,            <span class="hljs-comment">-- 原價</span><br>   discount_price <span class="hljs-type">INTEGER</span>,    <span class="hljs-comment">-- 優惠價</span><br>   stock <span class="hljs-type">INTEGER</span>,            <span class="hljs-comment">-- 庫存數量</span><br>   category <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),      <span class="hljs-comment">-- 商品分類</span><br>   status <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)         <span class="hljs-comment">-- 商品狀態</span><br>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> products (name, price, discount_price, stock, category, status) <span class="hljs-keyword">VALUES</span><br>   (<span class="hljs-string">&#x27;北歐風雙人沙發&#x27;</span>, <span class="hljs-number">39900</span>, <span class="hljs-number">35900</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;沙發&#x27;</span>, <span class="hljs-string">&#x27;active&#x27;</span>),<br>   (<span class="hljs-string">&#x27;貓抓皮L型沙發&#x27;</span>, <span class="hljs-number">58900</span>, <span class="hljs-number">52900</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;沙發&#x27;</span>, <span class="hljs-string">&#x27;active&#x27;</span>),<br>   (<span class="hljs-string">&#x27;典雅三人座沙發&#x27;</span>, <span class="hljs-number">42800</span>, <span class="hljs-number">42800</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;沙發&#x27;</span>, <span class="hljs-string">&#x27;active&#x27;</span>),<br>   (<span class="hljs-string">&#x27;工業風電視櫃&#x27;</span>, <span class="hljs-number">5900</span>, <span class="hljs-number">4900</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&#x27;櫃子&#x27;</span>, <span class="hljs-string">&#x27;active&#x27;</span>),<br>   (<span class="hljs-string">&#x27;簡約書櫃&#x27;</span>, <span class="hljs-number">3500</span>, <span class="hljs-number">3500</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;櫃子&#x27;</span>, <span class="hljs-string">&#x27;active&#x27;</span>),<br>   (<span class="hljs-string">&#x27;玄關鞋櫃&#x27;</span>, <span class="hljs-number">2900</span>, <span class="hljs-number">2900</span>, <span class="hljs-number">15</span>, <span class="hljs-string">&#x27;櫃子&#x27;</span>, <span class="hljs-string">&#x27;active&#x27;</span>),<br>   (<span class="hljs-string">&#x27;日式雙人床架&#x27;</span>, <span class="hljs-number">12000</span>, <span class="hljs-number">11200</span>, <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;床架&#x27;</span>, <span class="hljs-string">&#x27;active&#x27;</span>),<br>   (<span class="hljs-string">&#x27;掀床五尺雙人床&#x27;</span>, <span class="hljs-number">19900</span>, <span class="hljs-number">18900</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;床架&#x27;</span>, <span class="hljs-string">&#x27;active&#x27;</span>),<br>   (<span class="hljs-string">&#x27;兒童床架&#x27;</span>, <span class="hljs-number">8900</span>, <span class="hljs-number">8900</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;床架&#x27;</span>, <span class="hljs-string">&#x27;inactive&#x27;</span>),<br>   (<span class="hljs-string">&#x27;電腦辦公椅&#x27;</span>, <span class="hljs-number">4500</span>, <span class="hljs-number">3900</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;椅子&#x27;</span>, <span class="hljs-string">&#x27;active&#x27;</span>),<br>   (<span class="hljs-string">&#x27;餐椅四入組&#x27;</span>, <span class="hljs-number">6000</span>, <span class="hljs-number">5200</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;椅子&#x27;</span>, <span class="hljs-string">&#x27;active&#x27;</span>),<br>   (<span class="hljs-string">&#x27;北歐風餐桌&#x27;</span>, <span class="hljs-number">15800</span>, <span class="hljs-number">14800</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;桌子&#x27;</span>, <span class="hljs-string">&#x27;active&#x27;</span>),<br>   (<span class="hljs-string">&#x27;實木咖啡桌&#x27;</span>, <span class="hljs-number">3200</span>, <span class="hljs-number">2900</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;桌子&#x27;</span>, <span class="hljs-string">&#x27;active&#x27;</span>),<br>   (<span class="hljs-string">&#x27;電競書桌&#x27;</span>, <span class="hljs-number">8900</span>, <span class="hljs-number">8900</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;桌子&#x27;</span>, <span class="hljs-string">&#x27;inactive&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>事前都準備好後，接下來就進入「家具店的菜雞銷售奇遇記」的奇幻冒險吧！</p><p><strong>P.S. 以下故事本身就是題目，所以如果有在其他地方看到同樣的故事，是正常的哦～</strong></p><h2 id="故事-…-開始！！"><a href="#故事-…-開始！！" class="headerlink" title="故事 … 開始！！"></a>故事 … 開始！！</h2><p>剛進入『築夢家居』當銷售顧問的小美，，沒想到第一天上班就遇到系統大當機，最扯的是這間老字號家具店只有 POS 機和資料庫，也沒有網站可以查詢。</p><p>偏偏今天是週年慶開跑，主管又在門市坐鎮，店裡生意好到不行，只好硬著頭皮詢問店裡的工程師大大…</p><p>（門市內）</p><p><strong>客人</strong>：我要看那個貓抓皮沙發，你們還有貨嗎？</p><p><strong>小美</strong>：（慌張）啊…貓抓皮沙發…</p><p>（急著用 LINE 問小明）</p><p><strong>小美</strong>：學長救命！要怎麼查這個沙發？</p><p><strong>小明</strong>：用等於就可以了：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, price, stock<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;貓抓皮L型沙發&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p><strong>小美</strong>：喔！就是以下這樣，對嗎？</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">選取 名字、價格、庫存<br>從 商品表<br>找 商品名等於貓抓皮L型沙發<br></code></pre></div></td></tr></table></figure><p><strong>小明</strong>：對！很快就上手了嘛！</p><p><strong>小美</strong>：（快速輸入…）哇！真的查到了！只剩一張庫存耶…</p><p><strong>客人</strong>：（不耐煩）小姐？到底有沒有啊？</p><p><strong>小美</strong>： 這款 L 型沙發目前最後一張特價 52900，要幫您預訂嗎？</p><p><strong>客人</strong>：哦？最後一張喔…那…就先訂起來好了！</p><p><strong>小明</strong>：！！！這麼快就會了？根本是資料庫天才 == b</p><p><strong>小明</strong>：那我再考你幾題，如果你都會了以後，那我就可以退休了ㄏㄏㄏ</p><p><strong>小美</strong>：…..</p><h2 id="基礎比較運算"><a href="#基礎比較運算" class="headerlink" title="基礎比較運算"></a><strong>基礎比較運算</strong></h2><h3 id="情境-1：單品查詢"><a href="#情境-1：單品查詢" class="headerlink" title="情境 1：單品查詢"></a><strong>情境 1</strong>：單品查詢</h3><p>客人：「這張北歐風雙人沙發多少錢？」</p><p>小美想查：想找到這張沙發的價格和庫存</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SELECT name, price, stock<br>FROM products<br>WHERE name = <span class="hljs-string">&#x27;北歐風雙人沙發&#x27;</span><br></code></pre></div></td></tr></table></figure><p>首先，使用 select 語法來查詢 products 資料表裡面的內容，並且因為題目需要價格與庫存，因此撈了 price 與 stock 欄位，我這邊多撈了 name 欄位來幫助識別。</p><p>最後，加上 where 條件，將 name 鎖定在題目所指定的「北歐風雙人沙發」。</p><h3 id="情境-2：價格比較"><a href="#情境-2：價格比較" class="headerlink" title="情境 2：價格比較"></a>情境 2：價格比較</h3><p>客人：「請列出 5000 元以下的櫃子有哪些？」</p><p>小美想查：找出櫃子類且價格在 5000 以下的商品</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SELECT * FROM products<br>WHERE price &lt; 5000<br></code></pre></div></td></tr></table></figure><p>這次沒特別指定欄位，所以我就 select 星號把全部欄位給撈出來，並且透過 where 來撈出符合價格低於 5000 的商品出來。</p><h3 id="情境-3：庫存確認"><a href="#情境-3：庫存確認" class="headerlink" title="情境 3：庫存確認"></a><strong>情境 3</strong>：庫存確認</h3><p>客人：「日式雙人床架還有貨嗎？」</p><p>小美想查：確認日式雙人床架的庫存狀況</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SELECT name, status<br>FROM products<br>WHERE name = <span class="hljs-string">&#x27;日式雙人床架&#x27;</span><br></code></pre></div></td></tr></table></figure><p>因為是確認庫存狀況，所以撈了 status 以及提供識別的 name，並且透過 where 篩選出 name 等於日式雙人床架的欄位，來確認庫存狀況。</p><h2 id="邏輯運算-AND"><a href="#邏輯運算-AND" class="headerlink" title="邏輯運算 AND"></a><strong>邏輯運算 AND</strong></h2><h3 id="情境-4：預算內的商品"><a href="#情境-4：預算內的商品" class="headerlink" title="情境 4：預算內的商品"></a><strong>情境 4</strong>：預算內的商品</h3><p>客人：「想找 4 萬以下，而且有現貨的沙發」</p><p>小美想查：要同時符合：是沙發、4萬以下、有庫存</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SELECT * FROM products<br>WHERE category = <span class="hljs-string">&#x27;沙發&#x27;</span><br>AND price &lt; 40000<br>  AND status = <span class="hljs-string">&#x27;active&#x27;</span><br></code></pre></div></td></tr></table></figure><p>首先透過 select 查詢 products 資料表後，where 的判斷分別下了 category 等於沙發、price 要小於 40000、status 等於 active 的三個條件式，並且透過 AND 來串接條件式，表示這三個條件同時需要符合，不然就不會回傳該筆資料。</p><h3 id="情境-5：特價且有貨"><a href="#情境-5：特價且有貨" class="headerlink" title="情境 5：特價且有貨"></a><strong>情境 5</strong>：特價且有貨</h3><p>客人：「沙發有哪些特價且現貨的品項？」</p><p>小美想查：要找到沙發類且有特價（原價大於優惠價）且還有庫存的商品</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SELECT * FROM products<br>WHERE price &gt; discount_price<br>AND status = <span class="hljs-string">&#x27;active&#x27;</span><br></code></pre></div></td></tr></table></figure><p>此題需要符合價格 price 要大於優惠價 discount_price，表示該商品目前有折扣，如果兩者相等代表這個商品目前沒有折扣。因此 where 的條件下了 price 要大於 discount_price，直接透過欄位比較來下條件，並且同時需要符合 status 等於 active 才能撈出所需條件的筆數。</p><h2 id="邏輯運算-OR"><a href="#邏輯運算-OR" class="headerlink" title="邏輯運算 OR"></a><strong>邏輯運算 OR</strong></h2><h3 id="情境-6：多分類查詢"><a href="#情境-6：多分類查詢" class="headerlink" title="情境 6：多分類查詢"></a><strong>情境 6</strong>：多分類查詢</h3><p>客人：「我要找櫃子或桌子」</p><p>小美想查：要找出櫃子類或桌子類的商品</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SELECT * FROM products<br>WHERE category = <span class="hljs-string">&#x27;沙發&#x27;</span> or category = <span class="hljs-string">&#x27;桌子&#x27;</span><br></code></pre></div></td></tr></table></figure><p>此題要撈分類等於「沙發」與「卓子」的欄位，但如果使用 AND 就變成要同時符合，但是題目設計上分類只會分別等於沙發、卓子，所以就會與題目要求不相符。所以此時就需要使用到 OR，這樣只要 OR 前後有其中一項符合，就會撈出該筆資料，如此一來就會將分類等於沙發或是桌子的筆數撈出來。</p><h3 id="情境-7：指定商品"><a href="#情境-7：指定商品" class="headerlink" title="情境 7：指定商品"></a><strong>情境 7</strong>：指定商品</h3><p>客人：「北歐風雙人沙發和貓抓皮L型沙發哪個還有貨？」</p><p>小美想查：要找出這兩張特定沙發的庫存狀況</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SELECT name, status<br>FROM products<br>WHERE name = <span class="hljs-string">&#x27;北歐風雙人沙發&#x27;</span> OR name = <span class="hljs-string">&#x27;貓抓皮L型沙發&#x27;</span><br></code></pre></div></td></tr></table></figure><p>這次撈出題目指定的庫存狀況 status 與方便識別的商品名稱 name，在 where 讀不份透過 OR 來將商品名稱為「北歐風雙人沙發」與「貓抓皮L型沙發」資料撈出來。</p><h2 id="IN-運算"><a href="#IN-運算" class="headerlink" title="IN 運算"></a><strong>IN 運算</strong></h2><h3 id="情境-8：多分類查詢"><a href="#情境-8：多分類查詢" class="headerlink" title="情境 8：多分類查詢"></a><strong>情境 8</strong>：多分類查詢</h3><p>客人：「客廳的家具有哪些？我要看沙發、櫃子跟桌子」</p><p>小美想查：要找出沙發、櫃子和桌子這三種分類的商品</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SELECT * FROM products<br>WHERE category IN (<span class="hljs-string">&#x27;沙發&#x27;</span>, <span class="hljs-string">&#x27;櫃子&#x27;</span>, <span class="hljs-string">&#x27;桌子&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>如果照情境 6 的做法，就會是要透過兩個 or 將上面三個分類的條件式列出來，如果條件一多其實滿累人，程式碼又很冗長 XD 但是透過 in 的方式，等於是只要 category 有符合右邊括號內的其中一個元素（可以理解成陣列元素）就會將資料撈出來。</p><h3 id="情境-9：特定商品"><a href="#情境-9：特定商品" class="headerlink" title="情境 9：特定商品"></a><strong>情境 9</strong>：特定商品</h3><p>客人：「電腦辦公椅和餐椅四入組的價格是多少？」</p><p>小美想查：要找出這兩款椅子的價格</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SELECT name, price<br>FROM products<br>WHERE name IN (<span class="hljs-string">&#x27;電腦辦公椅&#x27;</span>, <span class="hljs-string">&#x27;餐椅四入組&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>邏輯基本上跟上面一樣，撈出商品名稱為「電腦辦公椅」與「餐椅四入組」的商品名稱與價格。</p><h2 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a><strong>BETWEEN</strong></h2><h3 id="情境-10：價格區間"><a href="#情境-10：價格區間" class="headerlink" title="情境 10：價格區間"></a><strong>情境 10</strong>：價格區間</h3><p>客人：「想找 10000 到 20000 之間的商品有哪些？」</p><p>小美想查：列出這個價格區間的所有商品</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SELECT * FROM products<br>WHERE price BETWEEN 10000 AND 20000<br></code></pre></div></td></tr></table></figure><p>透過 BETWEEN 數字一 AND 數字二 可以撈出價格在這兩個數字之間的資料，所以透過這個語法來撈出價格在 10000 到 20000 之間的資料。</p><h3 id="情境-11：庫存區間"><a href="#情境-11：庫存區間" class="headerlink" title="情境 11：庫存區間"></a><strong>情境 11</strong>：庫存區間</h3><p>主管：「請列出庫存在 5 到 15 之間的商品」</p><p>小美想查：列出庫存數量在這個範圍的商品</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SELECT * FROM products<br>WHERE stock BETWEEN 5 AND 15<br></code></pre></div></td></tr></table></figure><p>將庫存在 5 到 15 之間的商品撈出來。</p><h2 id="NOT-IN"><a href="#NOT-IN" class="headerlink" title="NOT IN"></a><strong>NOT IN</strong></h2><h3 id="情境-12：排除商品"><a href="#情境-12：排除商品" class="headerlink" title="情境 12：排除商品"></a><strong>情境 12</strong>：排除商品</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">SELECT * FROM products<br>WHERE category NOT IN (<span class="hljs-string">&#x27;沙發&#x27;</span>, <span class="hljs-string">&#x27;床架&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>這個指令會將分類是「分類」與「床架」以外的資料撈出來。</p><h2 id="更新和刪除"><a href="#更新和刪除" class="headerlink" title="更新和刪除"></a><strong>更新和刪除</strong></h2><h3 id="情境-13：調整價格"><a href="#情境-13：調整價格" class="headerlink" title="情境 13：調整價格"></a><strong>情境 13</strong>：調整價格</h3><p>主管：「北歐風雙人沙發要調降 2000 元」</p><p>小美想查：要如何更新這張沙發的價格</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">UPDATE products<br>SET price = price - 2000<br>WHERE name = <span class="hljs-string">&#x27;北歐風雙人沙發&#x27;</span><br></code></pre></div></td></tr></table></figure><p>透過 Update 指令可以更新 products 資料表內的 price 欄位，以題目來說會將商品名稱為「北歐風雙人沙發」的價格 price 更新為 price 在減 2000</p><h3 id="情境-14：更新庫存"><a href="#情境-14：更新庫存" class="headerlink" title="情境 14：更新庫存"></a><strong>情境 14</strong>：更新庫存</h3><p>主管：「電腦辦公椅進了 5 張」</p><p>小美想查：要如何增加這款椅子的庫存數量</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">UPDATE products<br>SET stock = stock + 5<br>WHERE name = <span class="hljs-string">&#x27;電腦辦公椅&#x27;</span><br></code></pre></div></td></tr></table></figure><p>這個題目會將原本電腦辦公椅的庫存再加上 5 筆庫存。</p><h3 id="情境-15：清除資料"><a href="#情境-15：清除資料" class="headerlink" title="情境 15：清除資料"></a><strong>情境 15</strong>：清除資料</h3><p>主管：「要清掉兒童床架和電競書桌的資料」</p><p>小美想查：要如何刪除這兩項商品</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">DELETE FROM products<br>WHERE name IN (<span class="hljs-string">&#x27;兒童床架&#x27;</span>, <span class="hljs-string">&#x27;電競書桌&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>這個題目結合了上面提到的 IN，會將商品名稱為「兒童床架」與「電競書桌」的資料給刪除。</p><h2 id="故事結束"><a href="#故事結束" class="headerlink" title="故事結束"></a>故事結束</h2><p>發現透過情境來學習，增加了一些有趣程度寫起來會有種不一樣的感覺 XDD 尤其是在資料庫這種我不擅長的科目，開心不少（？）希望可以趁這次機會把一直沒機會學好的資料庫理解更深入！</p>]]></content>
    
    
    <categories>
      
      <category>資料庫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
      <tag>資料庫</tag>
      
      <tag>後端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建立你第一個 Git 版控專案吧！</title>
    <link href="/git-init/"/>
    <url>/git-init/</url>
    
    <content type="html"><![CDATA[<p>Git 是一個工程師需要會的一項技能，利用 Git 能夠容易做到版本控制以及與團隊進行專案協作，除了指令外我們能夠透過圖形化介面，幫助整個專案運行的流程更加順暢。</p><a id="more"></a><h2 id="使用-Git-的好處"><a href="#使用-Git-的好處" class="headerlink" title="使用 Git 的好處"></a>使用 Git 的好處</h2><p>上述提到了版本控制，以往最原始的版本控制，可能是在檔案或目錄加上版號，或甚至是「project_final」、「project_final2.0」之類的奇耙名稱 XD 雖然這樣能夠做到區分，但是我們並無法直接知道每個版本之間的差異，甚至是當程式、檔案一多就更難管理了。</p><p>另外使用 Git 更能容易與其它團隊成員進行協作開發，當然其它版本控制或許也可以，但是我沒有用過，今天主要專注在 Git 上。我們能透過像是 GitHub、GitLab 等服務存放專案，如果專案有多位成員同時開發需求，就能夠透過這些儲存庫服務將專案拉下來後開發，並且紀錄何人在何時所進行的開發、程式與版本差異，如果需要回復或是切換到某個版本一樣非常方便。</p><h2 id="學-Git-很難？"><a href="#學-Git-很難？" class="headerlink" title="學 Git 很難？"></a>學 Git 很難？</h2><p>其實在學 Git 之前，看到這一串指令我同樣感到焦慮，看不懂到底是什麼東西，因此才會有你現在看到這個部落格，會用 Hexo 建立這個部落格有部分原因就是想學習使用指令 XD 因此找到一個你想建立的專案，從興趣下手，順道來學習 Git，慢慢用久就會愈來愈熟悉、上手。</p><h2 id="開始動手安裝吧！"><a href="#開始動手安裝吧！" class="headerlink" title="開始動手安裝吧！"></a>開始動手安裝吧！</h2><p>首先需要安裝 Git 軟體，這個部分，就到 <a href="https://git-scm.com/downloads">官網</a> 來下載安裝。</p><h2 id="開啟終端機"><a href="#開啟終端機" class="headerlink" title="開啟終端機"></a>開啟終端機</h2><p>下載完 Git 後，我們就開始打指令啦！雖然說有圖形化介面可以使用，不過我個人建議可以先從指令開始下手，了解整個指令的操作流程，使用圖形化介面更能更快上手～</p><p>如果你是 Windows 可以在搜尋打上 cmd 開啟命令提示字元、使用 Mac 則開啟終端機。</p><h2 id="設定個人資料"><a href="#設定個人資料" class="headerlink" title="設定個人資料"></a>設定個人資料</h2><p>首先，我們剛剛提到，透過 Git 可以記錄是誰在何時進行的開發紀錄，因此在使用 Git 之前，我們要先將自己的名字、Email 紀錄上去，這樣之後推送修改紀錄的時候才知道是誰推送的。</p><p>輸入名字、E-mail 可以使用以下指令：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx">git config --<span class="hljs-built_in">global</span> user.name <span class="hljs-string">&quot;你的名字&quot;</span><br>git config --<span class="hljs-built_in">global</span> user.name <span class="hljs-string">&quot;你的 E-mail&quot;</span><br></code></pre></div></td></tr></table></figure><p>設定好後，可以透過以下指令來查看 Git 設定內容，包含上述我們設定的名字、E-mail：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx">git config --list<br></code></pre></div></td></tr></table></figure><p>如果設定好發現資料打錯了，該怎麼辦？不用擔心，假設是名字打錯，再輸入一次上述名字那段指令，把名字改成正確名字就好，其它相同。</p><h2 id="使用-cd-移動到專案目錄"><a href="#使用-cd-移動到專案目錄" class="headerlink" title="使用 cd 移動到專案目錄"></a>使用 cd 移動到專案目錄</h2><p>我們可以先在桌面或是你喜歡的地方，建立一個專案目錄，但此時要如何讓終端機能夠吃到專案目錄呢？這時要使用 <code>cd</code> 這個指令，透過 <code>cd</code> 後面加上目錄路徑，可以讓終端機前往該專案目錄。</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx">cd 專案目錄路徑<br></code></pre></div></td></tr></table></figure><p>此時可能會有一個疑問，路徑這麼長，難道都要自己打嗎？會不會太累？其實不用，首先將 cd 後加空格打好後，接著按住專案目錄不放，拖曳到終端機內放開，終端機就會帶入目錄路徑了，此時按下 Enter，就會前往專案目錄囉。</p><h2 id="建立本地儲存庫"><a href="#建立本地儲存庫" class="headerlink" title="建立本地儲存庫"></a>建立本地儲存庫</h2><p>接下來就是今天的重頭戲，我們要針對這個專案目錄建立一個 Git 儲存庫，往後這個專案內所有變動都會透過 Git 來儲存下來。我們只需輸入以下指令就能為這個專案建立 Git 追蹤：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx">git init<br></code></pre></div></td></tr></table></figure><p>完成！就是這麼簡單，此時你可以開啟顯示隱藏檔案或目錄，就會看到這個被歸類在隱藏目錄的「.git」，Git 所追蹤的資料，會被歸類在這個目錄下。</p><h2 id="第一個-Git-版控專案建立成功！"><a href="#第一個-Git-版控專案建立成功！" class="headerlink" title="第一個 Git 版控專案建立成功！"></a>第一個 Git 版控專案建立成功！</h2><p>恭喜你成功建立第一個 Git 版控專案！當然之後還會介紹到 commit 等更多用法，幫助記憶每一個版本開發過程，這部分就下次來介紹。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>關於 JavaScript 的 Fucntion 那些事</title>
    <link href="/js-function/"/>
    <url>/js-function/</url>
    
    <content type="html"><![CDATA[<p>來把以前 JavaScript 關於 Function 的筆記 Po 上來與大家分享～</p><h3 id="使用函數原因"><a href="#使用函數原因" class="headerlink" title="使用函數原因"></a>使用函數原因</h3><p>用輸入跟輸出的例子來說明：</p><a id="more"></a><table><thead><tr><th>輸入</th><th>處理</th><th>輸出</th></tr></thead><tbody><tr><td>按電視遙控器</td><td>遙控器處理我們請求</td><td>電視開啟</td></tr><tr><td>人類上課學習</td><td>大腦吸收</td><td>寫作業或筆記將想法寫出來</td></tr><tr><td>將兩個數字丟給處理加法的函數</td><td>程式處理加法</td><td>輸出結果</td></tr></tbody></table><p>而函數 function 就像是上列表格的處理，進行我們要的請求，例如我們可以定義一個加法函數，在裡面撰寫加法程式。</p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><figure class="highlight delphi"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs delphi"><span class="hljs-comment">// 沒有參數</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> 變數名稱<span class="hljs-params">()</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment"></span></span><br><span class="hljs-function"><span class="hljs-comment">&#125;</span></span><br><span class="hljs-function">變數名稱<span class="hljs-params">()</span>;</span> <span class="hljs-comment">// 執行函數</span><br><br><span class="hljs-comment">// 有參數</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> 變數名稱<span class="hljs-params">(num1, num2)</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment"></span></span><br><span class="hljs-function"><span class="hljs-comment">&#125;</span></span><br><span class="hljs-function">變數名稱<span class="hljs-params">(<span class="hljs-string">&#x27;參數1&#x27;</span>,<span class="hljs-string">&#x27;參數2&#x27;</span>)</span>;</span> <span class="hljs-comment">// 假設有兩個參數，就要傳遞兩個參數進去</span><br><br><span class="hljs-comment">// 加法函數，在函數裡寫 console.log 顯示出（無法使用變數接收，因為函數只是顯示出答案，並沒有回傳值）</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">(num1, num2)</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment">    console.log(num1+num2);</span></span><br><span class="hljs-function"><span class="hljs-comment">&#125;</span></span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(12,24)</span>;</span> <span class="hljs-comment">//執行函數</span><br><br><span class="hljs-comment">// 乘法函數，利用 return 回傳值，並使用變數接收；若要顯示答案，須在外層撰寫 console 顯示</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mul</span><span class="hljs-params">(num1, num2)</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment">    return num1 * num2</span></span><br><span class="hljs-function"><span class="hljs-comment">&#125;</span></span><br><span class="hljs-function"><span class="hljs-title">let</span> <span class="hljs-title">ans</span> = <span class="hljs-title">num</span><span class="hljs-params">(9*9)</span>;</span> <span class="hljs-comment">// 執行函數並賦予值給變數 ans</span><br>console.log(ans); <span class="hljs-comment">// 顯示答案</span><br></code></pre></div></td></tr></table></figure><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><p>函數內可以有多個 return，但是第一個 return 執行完後，就會跳脫 function，後面不管事 return 還是其它程式，都不會執行</p><h3 id="全域變數與區域變數邏輯"><a href="#全域變數與區域變數邏輯" class="headerlink" title="全域變數與區域變數邏輯"></a>全域變數與區域變數邏輯</h3><ul><li>在 function 以外宣告的變數，為全域變數</li><li>在 function 內宣告的變數或是參數，為區域變數；只能在 function 內使用，</li><li>在 function 內執行變數，會先尋找 function 內有沒有宣告；如果沒有，會向 function 外尋求是否有同名的全域變數</li></ul><h3 id="使用-if-執行多個-return，並在內運作全域變數"><a href="#使用-if-執行多個-return，並在內運作全域變數" class="headerlink" title="使用 if 執行多個 return，並在內運作全域變數"></a>使用 if 執行多個 return，並在內運作全域變數</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-comment">/* 是否有發燒 */</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">//記錄受測人數</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">degree</span>(<span class="hljs-params">num</span>)</span>&#123;<br>    <span class="hljs-built_in">number</span>+=<span class="hljs-number">1</span>; <span class="hljs-comment">// 受測人數+1</span><br>    <span class="hljs-keyword">if</span>(num&gt;=<span class="hljs-number">37.5</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;有發燒&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;沒發燒&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(degree(<span class="hljs-number">37.2</span>));<br><br>result: <span class="hljs-string">&quot;沒發燒&quot;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>讓 emit 回傳資料給 Vue 父層元件！</title>
    <link href="/vue-emit/"/>
    <url>/vue-emit/</url>
    
    <content type="html"><![CDATA[<p>上一次介紹了 <a href="https://guiblogs.com/vue-props/">初步認識 Vue Props，父元件傳入值給子元件！</a>，但是然後呢？如果我需要回傳值到父層元件，該怎麼做呢？今天就來介紹 emit 這個機制，能夠達到這樣的需求。</p><a id="more"></a><h2 id="做個加法計算機：子元件"><a href="#做個加法計算機：子元件" class="headerlink" title="做個加法計算機：子元件"></a>做個加法計算機：子元件</h2><p>假設有個子元件是這樣：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> addNum = &#123;<br>  template: <span class="hljs-string">`&lt;button type=&quot;button&quot; @click=&quot;returnData&quot;&gt;點我 + 1&lt;/button&gt;`</span>,<br>  props: [<span class="hljs-string">&#x27;number&#x27;</span>],<br>  methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">returnData</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;return-text&#x27;</span>, <span class="hljs-built_in">this</span>.number + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;,<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>這邊建立了一個名為 addNum 的子元件，有一個名為 number 的 Props 傳入，當有人點擊「點我 + 1」按鈕時，會觸發 returnData()。在這個 function 我們發現了一個新的 <code>this.$emit()</code>，便是我們今天的重點。</p><h2 id="this-emit-用法"><a href="#this-emit-用法" class="headerlink" title="this.$emit() 用法"></a><code>this.$emit()</code> 用法</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;emit 名稱&#x27;</span>, <span class="hljs-string">&#x27;要傳回的值&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>在這段函式的兩個參數中，第一個參數是 emit 名稱，到時父元件會使用此名稱觸發 emit。</p><p>第二個參數則是要回傳的值，可以是字串、數字、物件、…各式各樣資訊，或是如範例所看到的，直接在函式內進行運算，將答案傳回。另外不一定要傳回值，可以用於單純讓父元件觸發指定 function。</p><h2 id="父元件"><a href="#父元件" class="headerlink" title="父元件"></a>父元件</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>答案：&#123;&#123; answer &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">add-num</span> <span class="hljs-attr">:number</span>=<span class="hljs-string">&quot;number&quot;</span> @<span class="hljs-attr">return-text</span>=<span class="hljs-string">&quot;getReturnData&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>  components: &#123;<br>    addNum<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      number: <span class="hljs-number">0</span>,<br>      answer: <span class="hljs-number">0</span>,<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">getReturnData</span>(<span class="hljs-params">ans</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.answer = ans;<br>    &#125;<br>  &#125;<br>&#125;);<br><br>app.mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p>從範例可以看到有一個 input 輸入框，並與 number 做了雙向綁定，並透過 Props 將 number 傳入給 add-num 子元件，最後會將答案顯示在 answer。</p><p>但這邊出現了一個 <code>@return-text=&quot;getReturnData&quot;</code>，這段話的意思就是剛剛建立的 return-text 這個 Emit 被觸發了，觸發後要執行右邊指定的函式 <code>getReturnData()</code>。</p><p>接下來從 JavaScript 範例可知，<code>getReturnData()</code> 函式帶了一個參數，就是剛剛 Emit 所傳回的參數，這時我們在將傳回值賦予值到 <code>this.answer</code>，父元件就會顯示 <code>答案：傳回值</code> 了。</p><p>此外，如果 Emit 沒有傳回值，仍然能夠透過 Emit 觸發後執行函式，這在上一段有介紹過，相信跑過這段流程後更加理解。</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>這邊提供一個 codepen 範例「<a href="https://codepen.io/guitimliu/pen/yLpdjgQ">Vue Props + Emit 計算機</a>」讓大家玩玩看，理解後在自己練習一次，會更加熟悉其用法。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://ithelp.ithome.com.tw/articles/10223518">Day16 Vue Component(元件) props、emit介紹 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初步認識 Vue Props，父元件傳入值給子元件！</title>
    <link href="/vue-props/"/>
    <url>/vue-props/</url>
    
    <content type="html"><![CDATA[<p>Vue 的頁面由一組又一組的元件所組成，其中或多或少會需要元件之間傳遞值，首先如果是父層元件要將值傳給子層元件，該怎麼設定呢？今天就來介紹 Props 這個能夠將值傳遞給子元件的機制。</p><a id="more"></a><h2 id="將資料傳入元件"><a href="#將資料傳入元件" class="headerlink" title="將資料傳入元件"></a>將資料傳入元件</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML">&lt;元件Tag Props名稱=&quot;傳入值&quot; /&gt;<br></code></pre></div></td></tr></table></figure><h3 id="來段範例"><a href="#來段範例" class="headerlink" title="來段範例"></a>來段範例</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">card</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;item.title&quot;</span> <span class="hljs-attr">:img</span>=<span class="hljs-string">&quot;item.imgUrl&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>方法很簡單，就是在元件的 HTML 標籤內增加屬性，屬性名稱就是我們要設定的 Props 名稱，並將傳入值帶入，如果帶入值為變數可使用 v-bind 形式傳入。</p><p>如此一來元件內就會運用我們在此時設定的 Props 名稱來取傳入值。</p><h2 id="子元件接收傳入值：陣列寫法"><a href="#子元件接收傳入值：陣列寫法" class="headerlink" title="子元件接收傳入值：陣列寫法"></a>子元件接收傳入值：陣列寫法</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    data () &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            text: <span class="hljs-string">&#x27;文字&#x27;</span>,<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// props: [&#x27;Props 名稱 1&#x27;, &#x27;Props 名稱 2&#x27;, /* ... 以此類堆 */ ]</span><br>    props: [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;img&#x27;</span>],<br>    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.title);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.img);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我們在以上範例中增加了一個 props 的陣列，裡面擺放了兩個陣列元素的名稱要跟外面傳入的 Props 是一樣的，如此一來我們便能利用 props 來去做後續的操作，以此範例為例我們在 <code>mounted()</code> 內 console 出兩個傳入值。</p><h2 id="子元件接收傳入值：物件寫法"><a href="#子元件接收傳入值：物件寫法" class="headerlink" title="子元件接收傳入值：物件寫法"></a>子元件接收傳入值：物件寫法</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    data () &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            text: <span class="hljs-string">&#x27;文字&#x27;</span>,<br>        &#125;<br>    &#125;,<br>    props: &#123;<br>        title: &#123;<br>            type: <span class="hljs-built_in">String</span>,<br>            <span class="hljs-keyword">default</span>: <span class="hljs-string">&#x27;預設值&#x27;</span>,<br>            required: <span class="hljs-literal">true</span>,<br>        &#125;,<br>        img: &#123;<br>            type: <span class="hljs-built_in">String</span>,<br>            <span class="hljs-keyword">default</span>: <span class="hljs-string">&#x27;預設值&#x27;</span>,<br>            required: <span class="hljs-literal">true</span>,<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.title);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.img);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用這個寫法的好處是能夠自訂預設值，假設外層沒傳入資料，還是能夠透過這裡設定的預設值來進行運算，同時能夠加入驗證機制，從傳入時即判斷值是否合乎驗證規則。</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>這篇介紹的 Props 讓父層資料可以傳遞給子元件進行處理，但既然資料可以傳入，代表同樣能夠將資料傳遞回父元件。因此下一次就要介紹 Emit 的用法，敬請期待～</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://book.vue.tw/CH2/2-2-communications.html">2-2 元件之間的溝通傳遞 | 重新認識 Vue.js | Kuro Hsu</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10223833">Day17  Vue Component(元件) - props使用注意細項(1) - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何變更 Edge 預設搜尋引擎？</title>
    <link href="/edge-change-search/"/>
    <url>/edge-change-search/</url>
    
    <content type="html"><![CDATA[<p>大概從去年開始吧，我在自己電腦上開始改用了 Edge 瀏覽器，意外發現還滿好用的就使用到現在。然而之前看到網路上有網友表示想改掉 Edge 預設搜尋引擎 Bing 為 Google，其實是可以改的，雖然說確實需要找一下 XD（至少我是這樣）</p><a id="more"></a><h2 id="修改-Edge-預設搜尋引擎"><a href="#修改-Edge-預設搜尋引擎" class="headerlink" title="修改 Edge 預設搜尋引擎"></a>修改 Edge 預設搜尋引擎</h2><p>首先第一步先進入 Edge 設定後，點選左邊選單的「隱私權、搜尋與服務」，然後<strong>滑到最下面</strong>點擊「網址列和搜尋」。（<del>雖然都有搜尋字樣，但我當初怎麼找這麼久 QQ</del>）</p><p><img src="http://img.guiblogs.com/edge-change-search/1.jpg" alt="隱私權、搜尋與服務 -&gt; 網址列和搜尋"></p><p>第二步把「在網址列中使用的搜尋引擎」的下拉式選單，預設應該會是 Bing，改成你想選擇的搜尋引擎，就完成了。</p><p><img src="http://img.guiblogs.com/edge-change-search/2.jpg" alt="修改預設搜尋引擎"></p>]]></content>
    
    
    <categories>
      
      <category>工具推薦</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Edge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>透過 row-cols，Bootstrap 格線 class 免重覆設定！</title>
    <link href="/bootstrap-row-cols/"/>
    <url>/bootstrap-row-cols/</url>
    
    <content type="html"><![CDATA[<p>使用 Bootstrap 格線系統可以很方便的排出多欄式的版面，然而在每個子欄的 class 都要不斷地加上 <code>col-md-6</code>、<code>col-xl-3</code> 等似乎又覺得有些麻煩，但其實我們可以直接在父層設定後，使子層能夠依照父層的設定進行排版。</p><a id="more"></a><h2 id="col-寫法"><a href="#col-寫法" class="headerlink" title=".col-* 寫法"></a><code>.col-*</code> 寫法</h2><p>一開始新手在學習撰寫格線系統時，可能會主要以下面這樣形式撰寫：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6 col-xl-3&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse recusandae saepe sed et laborum. Odit, impedit a aliquid cupiditate soluta fugiat reprehenderit ducimus excepturi cum dolores dolore quae quia enim!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6 col-xl-3&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Facere expedita asperiores adipisci quos! Fugit eum corporis qui doloremque quia pariatur deserunt eligendi numquam, iste, possimus cumque quam repellat molestias temporibus. Veritatis quas molestiae autem hic? A, nostrum possimus?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6 col-xl-3&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Odio voluptates veritatis facilis ea quo sapiente libero iusto necessitatibus, quibusdam suscipit corporis sunt nisi officiis natus aspernatur beatae eos eaque possimus dolor alias perferendis. Distinctio cum placeat impedit laboriosam.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-6 col-xl-3&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Neque eligendi inventore a ullam. Sapiente quae culpa accusantium numquam, earum cupiditate alias dignissimos eos dolor minus sed repudiandae eaque amet quibusdam nulla vero repellat at? Et cumque veniam nulla?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>但假設後續我要針對版面排列方式進行修正，就必須很麻煩的一個一個改，就算有搜尋取代的功能，但有時候也不會只有一個地方使用到格線系統，還是會有些許不方便。</p><h2 id="row-cols-寫法"><a href="#row-cols-寫法" class="headerlink" title=".row-cols-* 寫法"></a><code>.row-cols-*</code> 寫法</h2><p>先來段範例讓大家參考：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row row-cols-md-2 row-cols-xl-4&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Esse recusandae saepe sed et laborum. Odit, impedit a aliquid cupiditate soluta fugiat reprehenderit ducimus excepturi cum dolores dolore quae quia enim!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Facere expedita asperiores adipisci quos! Fugit eum corporis qui doloremque quia pariatur deserunt eligendi numquam, iste, possimus cumque quam repellat molestias temporibus. Veritatis quas molestiae autem hic? A, nostrum possimus?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Odio voluptates veritatis facilis ea quo sapiente libero iusto necessitatibus, quibusdam suscipit corporis sunt nisi officiis natus aspernatur beatae eos eaque possimus dolor alias perferendis. Distinctio cum placeat impedit laboriosam.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Neque eligendi inventore a ullam. Sapiente quae culpa accusantium numquam, earum cupiditate alias dignissimos eos dolor minus sed repudiandae eaque amet quibusdam nulla vero repellat at? Et cumque veniam nulla?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="子層改寫"><a href="#子層改寫" class="headerlink" title="子層改寫"></a>子層改寫</h3><p>先將子欄所有 <code>.col-*</code>、<code>.col-md-*</code> 或 <code>.col-xl-*</code> 等改寫成純 <code>.col</code>，讓父層來設定。</p><h3 id="父層改寫"><a href="#父層改寫" class="headerlink" title="父層改寫"></a>父層改寫</h3><p>再來至父層 <code>.row</code>，<code>.row</code> 保留不變外，再加上 <code>.row-cols-*</code> 的設定。值得注意的是，<code>*</code> 所設定的數字即設定整個版面需要呈現幾欄，而非設定單欄需要占多少個位置。<code>Ex. .row-cols-3</code> 代表三欄式版面。</p><p>與 <code>.col-*</code> 設定一樣，可在與 <code>.row</code> 同層 div 設定 <code>.row-cols-md-*</code>、<code>.row-cols-xl-*</code> 響應式版面設定。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://bootstrap5.hexschool.com/docs/5.0/layout/grid/">網格系統 (Grid system) · Bootstrap 5 繁體中文文件 - 六角學院 v5.0</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Bootstrap</category>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>透過 Mixin，統整需要重複使用的 Sass 語法！</title>
    <link href="/sass-mixin/"/>
    <url>/sass-mixin/</url>
    
    <content type="html"><![CDATA[<p>在一般程式中如果有需重複使用的程式，我們會使用 function 來進行統整後，需要執行時再呼叫這個 function；在 Sass 裡我們能夠透過 Mixin 來達到與 function 統整重複程式碼的效果。</p><a id="more"></a><h2 id="基本寫法"><a href="#基本寫法" class="headerlink" title="基本寫法"></a>基本寫法</h2><h3 id="Minix-撰寫方式"><a href="#Minix-撰寫方式" class="headerlink" title="Minix 撰寫方式"></a>Minix 撰寫方式</h3><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SCSS"><span class="hljs-comment">/* 不帶參數 */</span><br><span class="hljs-keyword">@mixin</span> Mixin名稱 &#123;<br>    <span class="hljs-comment">/* SCSS 語法 */</span><br>&#125;<br><br><span class="hljs-comment">/* 帶參數 */</span><br><span class="hljs-keyword">@mixin</span> Mixin帶參數($參數名稱一, $參數名稱二) &#123;<br>    屬性一: $參數名稱一;<br>    屬性二: $參數名稱二;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>以 <code>mixin</code> 為開頭後，接著自訂 Mixin 名稱</li><li>如果需要帶參數，在 Mixin 名稱後加上括號包覆，如超過一個參數使用逗號分隔</li><li>在 <code>&#123;&#125;</code> 撰寫語法</li></ul><h3 id="呼叫-Mixin"><a href="#呼叫-Mixin" class="headerlink" title="呼叫 Mixin"></a>呼叫 Mixin</h3><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SCSS"><span class="hljs-comment">/* 不帶參數 */</span><br><span class="hljs-keyword">@include</span> Mixin名稱;<br><br><span class="hljs-comment">/* 帶參數 */</span><br>.類別選擇器 &#123;<br>    <span class="hljs-keyword">@include</span> Mixin帶參數(帶入參數一, 帶入參數二)<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>以 <code>@include</code> 為開頭後，接著自訂 Mixin 名稱</li><li>如果需要帶資料進入，在 Mixin 名稱後加上括號包覆，超過一個參數使用逗號分隔</li></ul><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><h3 id="不帶參數"><a href="#不帶參數" class="headerlink" title="不帶參數"></a>不帶參數</h3><p>假設今天我們想為放置標題的 <code>h1</code> 標籤以圖片取代文字呈現，SCSS 可以這麼撰寫：</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SCSS"><span class="hljs-comment">/* 圖片取代文字 */</span><br><span class="hljs-keyword">@mixin</span> hide-text &#123;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">110%</span>;<br>    <span class="hljs-attribute">white-space</span>: nowrap;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-class">.header</span> <span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">background</span>: url(<span class="hljs-string">&#x27;../logo.png&#x27;</span>);<br>    <span class="hljs-keyword">@include</span> hide-text;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我們將圖片取代文字語法撰寫在 hide-test 的 Mixin 內，並且當 <code>h1</code> 標籤需要使用這樣的機制時，就可以直接引入 hide-text。</p><p>另外一個好處是，後續如果有其它地方，需要使用圖片取代文字的機制就不用特別另外在撰寫一次。因此圖片取代文字的機制就不會是 <code>h1</code> 標籤專有，而是有需要就可以直接引入。</p><h3 id="帶參數"><a href="#帶參數" class="headerlink" title="帶參數"></a>帶參數</h3><p>假設我們需要在不同區域加上不同大小的圓形，可以這麼寫：</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SCSS"><span class="hljs-keyword">@mixin</span> circle (<span class="hljs-variable">$size</span>, <span class="hljs-variable">$bgcolor</span>) &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-variable">$size</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-variable">$size</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-variable">$bgcolor</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box1</span> &#123;<br>    <span class="hljs-keyword">@include</span> circle(<span class="hljs-number">30px</span>, <span class="hljs-number">#fff</span>);<br>&#125;<br><span class="hljs-selector-class">.box2</span> &#123;<br>    <span class="hljs-keyword">@include</span> circle(<span class="hljs-number">60px</span>, orange);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如此一來我們便能在不同的 div 區塊上，透過參數各自設定為不同大小與顏色的圓形。</p><h2 id="Mixin-RWD-應用"><a href="#Mixin-RWD-應用" class="headerlink" title="Mixin + RWD 應用"></a>Mixin + RWD 應用</h2><p>透過 Mixin 能透非常方便管理 RWD 內容，如下：</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SCSS"><span class="hljs-keyword">@minix</span> pad &#123;<br>    <span class="hljs-keyword">@media</span> (min-width: <span class="hljs-number">768px</span>) &#123;<br>        <span class="hljs-keyword">@content</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">@minix</span> desktop &#123;<br>    <span class="hljs-keyword">@media</span> (max-width: <span class="hljs-number">992px</span>) &#123;<br>        <span class="hljs-keyword">@content</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我們能夠先撰寫不同大小裝置使用媒體查詢於各自 Mixin，其中在媒體查詢裡面使用到了 <code>@content</code>，這個機制可以讓外部呼叫 Mixin 時，可以直接將語法撰寫至指定的 Mixin，保留一個給外部寫入的空間。</p><p>假設有個網頁頁首，手機版、平板與 PC 裝置背景顏色分別呈現為橘色、藍色與紅色，能夠這樣設置：</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SCSS"><span class="hljs-selector-class">.header</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: orange;<br>    <span class="hljs-keyword">@include</span> pad &#123;<br>        <span class="hljs-attribute">background-color</span>: blue;<br>    &#125;<br>    <span class="hljs-keyword">@include</span> desktop &#123;<br>        <span class="hljs-attribute">background-color</span>: red;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>透過這樣撰寫，就會自動將語法帶入到 @content 內，進行不同樣式上渲染。</p><h2 id="Mixin-import-組合技"><a href="#Mixin-import-組合技" class="headerlink" title="Mixin + import 組合技"></a>Mixin + import 組合技</h2><p>搭配 <a href="https://guiblogs.com/sass-import/">使用 @import 讓你 Sass 切分檔案、維護管理更方便！</a> 使用，可以將 Mixin 整理成一個檔案或多個檔案進行整合後，使用 @import 整合至主樣式檔：</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SCSS"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;variable&quot;</span>; <span class="hljs-comment">/* 變數檔 */</span><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;normalize&quot;</span>; <span class="hljs-comment">/* CSS Reset */</span><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;mixin&quot;</span>; <span class="hljs-comment">/* Mixin 檔 */</span><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;main&quot;</span>; <span class="hljs-comment">/* 自己的 SCSS */</span><br></code></pre></div></td></tr></table></figure><p>先引入 Mixin 檔後再載入自訂 SCSS 檔，使由上而下編譯時能夠先識別 Mixin（如同變數），就能夠於後續使用 Mixin。</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Sass</tag>
      
      <tag>SCSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 @import 讓你 Sass 切分檔案、維護管理更方便！</title>
    <link href="/sass-import/"/>
    <url>/sass-import/</url>
    
    <content type="html"><![CDATA[<p>我們都知道一支檔案篇幅不要太長，因此就需要透過載入檔案方式來進行整合。而 Sass 則可透過 import 這個語法載入其它樣式。</p><a id="more"></a><h2 id="基本寫法"><a href="#基本寫法" class="headerlink" title="基本寫法"></a>基本寫法</h2><p>以下語法皆以 SCSS 撰寫。</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SCSS"><span class="hljs-comment">/* 載入目錄 components 下 banner.scss 樣式 */</span><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&#x27;components/banner&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>載入上不用特別加上副檔名，直接使用 <code>目錄/檔名</code> 形式載入即可。</p><h2 id="import-整合範例"><a href="#import-整合範例" class="headerlink" title="@import 整合範例"></a>@import 整合範例</h2><p>來一段範例，假設同一目錄中有以下 SCSS 檔案：</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">style.scss<br>bootstrap.scss<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_reset</span>.</span></span>scss<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_base</span>.</span></span>scss<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_banner</span>.</span></span>scss<br></code></pre></div></td></tr></table></figure><p>我希望 style.scss 可以載入 _reset.scss、_base.scss、_banner.scss，可以在 style.scss 這麼撰寫：</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SCSS"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;reset&quot;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;base&quot;</span>;<br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;banner&quot;</span>;<br></code></pre></div></td></tr></table></figure><p>如此一來進行編譯後，就會產生以下 CSS 檔案：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">style</span><span class="hljs-selector-class">.css</span> <span class="hljs-selector-tag">-</span>&gt; 包含 <span class="hljs-selector-tag">reset</span>、<span class="hljs-selector-tag">base</span>、<span class="hljs-selector-tag">banner</span> 等內容<br><span class="hljs-selector-tag">bootstrap</span><span class="hljs-selector-class">.css</span><br></code></pre></div></td></tr></table></figure><h2 id="檔名底線用途"><a href="#檔名底線用途" class="headerlink" title="檔名底線用途"></a>檔名底線用途</h2><p>從 @import 整合範例能夠看到經過編譯後僅保留 style.css 與 bootstrap.css 兩支檔案，是因為其它三支檔案都在檔名開頭加上底線，基本上編譯時就不會將這些檔案編譯成獨立 CSS 檔案。</p><h2 id="import-建議載入順序"><a href="#import-建議載入順序" class="headerlink" title="@import 建議載入順序"></a>@import 建議載入順序</h2><p><a href="https://guiblogs.com/sass-variable/">Sass / SCSS 筆記：如何利用變數管理重複設定值？</a> 提到 Sass / SCSS 為由上而下編譯，因此在載入順序建議可依照以下順序來載入：</p><ul><li>變數檔，使後面讀取變數順利</li><li>Mixin</li><li>CSS Reset</li><li>通用類別</li><li>Other files …</li></ul><p>以要被後面讀取的資訊或是要被 Reset 的內容放在前面為主。</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Sass</tag>
      
      <tag>SCSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 條件渲染 v-if 如何使用？與 v-show 有什麼差別？</title>
    <link href="/vue-conditional/"/>
    <url>/vue-conditional/</url>
    
    <content type="html"><![CDATA[<p>假設網頁中有一個情境是不同的條件顯示不同的區塊，像是非登入狀態顯示登入與註冊連結、登入狀態顯示登出連結，類似這種情境怎麼做到？以 Vue 來說，此時就能使用條件渲染 v-if、v-show 等指令。</p><a id="more"></a><h2 id="v-if-與-v-else"><a href="#v-if-與-v-else" class="headerlink" title="v-if 與 v-else"></a>v-if 與 v-else</h2><p>以上述的情境，我們先來段範例：</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;is_login&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登出<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu&quot;</span> <span class="hljs-attr">v-else</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登入<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>註冊<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> app = &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            is_login: <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="範例解說"><a href="#範例解說" class="headerlink" title="範例解說"></a>範例解說</h3><p>以這段範例來說，有兩個 ul 選單，我們希望在一個狀態之下只顯示一個 ul 選單，以 Vue 來說我們只要針對這兩個 ul 區塊設定 v-if、v-else 條件渲染語法。</p><p>基本上就跟程式語言的 if…else… 用法一樣，在 v-if 設定條件式，因此我們將 data 中 is_login 帶入，假設為 true 代表為登入狀態，即顯示登出那個 ul 區塊，反之為 false 就顯示 v-else 區塊。</p><h2 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h2><p>跟一般程式語言一樣，如果需要多條件判斷，可使用 v-else-if 這段指令。假設呈現不同會員等級就很適合使用。</p><h3 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;member_level == &#x27;管理員&#x27;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>您擁有最高管理權限<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;member_level == &#x27;編輯&#x27;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>您擁有新增文章權限<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;member_level == &#x27;會員&#x27;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>您擁有回復文章權限<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>您擁有觀看文章權限<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> app = &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            member_level: <span class="hljs-string">&#x27;編輯&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="範例解說-1"><a href="#範例解說-1" class="headerlink" title="範例解說"></a>範例解說</h2><p>這個範例總共分成管理員、編輯、一般會員以及沒有註冊的訪客，我們將條件式直接填入 v-if 與 v-else-if，當達成指定條件後，顯示該區塊。</p><h2 id="v-if-與-v-show-的差別是什麼"><a href="#v-if-與-v-show-的差別是什麼" class="headerlink" title="v-if 與 v-show 的差別是什麼"></a>v-if 與 v-show 的差別是什麼</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>基本上 v-if 與 v-else 狀態切換的改變，會是直接開啟、關閉其生命週期，所以如過透過像是按鈕切換等功能切換 v-if 與 v-else 區塊，原本顯示的區塊會在原始碼消失，顯示新區塊。</p><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>使用這個指令基本上跟 v-if 差不多（不過剛剛稍微測試，v-else-show 似乎不能運作？大家可以動手測試看看 XD），不過切換狀態時，原本顯示的區塊如果被替換，會透過 CSS <code>display: none;</code> 來隱藏區塊，而不會動到生命週期。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>六角 Vue 直播班，我的上課心得</title>
    <link href="/hex-vue-training/"/>
    <url>/hex-vue-training/</url>
    
    <content type="html"><![CDATA[<p>今天要來說說這兩三個月參與六角 Vue 直播班的心得與感受。</p><a id="more"></a><p>跟之前的直播班一樣，在直播課程開始前，就會釋出課前影音課程，讓學員可以先行複習。</p><p>我很喜歡，不管程度如何，至少大家都有一個機會能夠事前具備一些基本觀念（當然，畢竟這是 Vue 直播班，還是先要有 JS 基礎比較好），當遇到問題時，就可以在詢問助教或是直接於直播課程詢問老師。</p><p>再來這次直播班還會主動關心學員狀況，因為過年有點過的太開心，再加上新工作離家裡有點遠，所以後來進度整個大落後，作業都沒寫 XD 此時就會有機器人來關心你的狀況，是否需要協助之類的。</p><p>同學間的討論氣氛依舊相當熱烈，然而我並不是一個遇到問題喜歡發問的人，但是透過 Discard 上爬文，仍然有機會找到自己在作業上到底踩到什麼雷。</p><p>這次參與度沒有像之前那麼高，主要還是在適應開始上班之後的生活與長時間的通勤，這也是必須持續做的功課，畢竟下班後的自我成長還是相當重要。</p><p>打算先趕完作業後，再來開始慢慢啃課程提供的資源～</p>]]></content>
    
    
    <categories>
      
      <category>學習</category>
      
    </categories>
    
    
    <tags>
      
      <tag>上課心得</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>v-on：Vue 事件觸發器</title>
    <link href="/v-on/"/>
    <url>/v-on/</url>
    
    <content type="html"><![CDATA[<p>v-on 能夠透過 Event（如點擊事件）來觸發某個方法。</p><a id="more"></a><h2 id="v-on-寫法與縮寫"><a href="#v-on-寫法與縮寫" class="headerlink" title="v-on 寫法與縮寫"></a>v-on 寫法與縮寫</h2><h3 id="一般寫法（以點擊事件為例）"><a href="#一般寫法（以點擊事件為例）" class="headerlink" title="一般寫法（以點擊事件為例）"></a>一般寫法（以點擊事件為例）</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;帶入方法（或其參數） or 直接撰寫&quot;</span>&gt;</span>按鈕<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="縮寫（以點擊事件為例）"><a href="#縮寫（以點擊事件為例）" class="headerlink" title="縮寫（以點擊事件為例）"></a>縮寫（以點擊事件為例）</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;帶入方法（或其參數） or 直接撰寫&quot;</span>&gt;</span>按鈕<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="事件修飾符：prevent"><a href="#事件修飾符：prevent" class="headerlink" title="事件修飾符：prevent"></a>事件修飾符：prevent</h2><ul><li>HTML 中的 a 或是 form 表單內的 post 會分別在點擊鏈結跟 submit 後跳轉鏈結</li><li>若無須跳轉鏈結，可在 v-on 後加入 <code>.prevent</code>，可移除其事件</li><li>當然也可以增加事件，可參考官方文件：<a href="https://cn.vuejs.org/v2/api/#v-on">https://cn.vuejs.org/v2/api/#v-on</a></li></ul><h3 id="a-鏈結範例"><a href="#a-鏈結範例" class="headerlink" title="a 鏈結範例"></a>a 鏈結範例</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.google.com&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;方法變數&quot;</span>&gt;</span>鏈結<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>加入 .prevent 前，執行完方法後就會跳轉鏈結</li><li>加入 .prevent 後，執行完方法不會跳轉鏈結</li></ul><h3 id="表單-submit-範例"><a href="#表單-submit-範例" class="headerlink" title="表單 submit 範例"></a>表單 submit 範例</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://www.google.com/&quot;</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;方法變數&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>加入 .prevent 前，點擊 submit 會執行完方法後並跳轉鏈結</li><li>加入 .prevent 後，點擊 submit 執行完方法但不會跳轉鏈結</li></ul><h2 id="範例程式碼"><a href="#範例程式碼" class="headerlink" title="範例程式碼"></a>範例程式碼</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;counter += 1&quot;</span>&gt;</span>Add 1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;say(&#x27;hi&#x27;)&quot;</span>&gt;</span>say hi<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;say(&#x27;what&#x27;)&quot;</span>&gt;</span>say what<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.google.com/&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;clickfu&quot;</span>&gt;</span>有 prevent 的狀況下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.google.com/&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;clickfu&quot;</span>&gt;</span>沒有 prevent 的狀況下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://www.google.com/&quot;</span> @<span class="hljs-attr">submit.prevent</span>=<span class="hljs-string">&quot;submitFu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>有 prevent<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://www.google.com/&quot;</span> @<span class="hljs-attr">submit</span>=<span class="hljs-string">&quot;submitFu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>沒有 prevent<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;enter&quot;</span>&gt;</span>針對 input 按下 Enter 會觸發按鍵精靈<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;enter&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;onEnter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>針對 input 按下 Enter 會觸發按鍵精靈<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.a</span>=<span class="hljs-string">&quot;onEnter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span>針對 input 按下 Enter 會觸發按鍵精靈<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.b</span>=<span class="hljs-string">&quot;onEnter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;c&quot;</span>&gt;</span>針對 input 按下 Enter 會觸發按鍵精靈<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.c</span>=<span class="hljs-string">&quot;onEnter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = &#123;<br>    data () &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            counter: <span class="hljs-number">0</span>,<br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        say (message) &#123;<br>            alert(message);<br>        &#125;,<br>        clickfu () &#123;<br>            alert(<span class="hljs-string">&#x27;prevent&#x27;</span>);<br>        &#125;,<br>        submitFu () &#123;<br>            alert(<span class="hljs-string">&#x27;表單傳遞&#x27;</span>);<br>        &#125;,<br>        onEnter () &#123;<br>            alert(<span class="hljs-string">&#x27;按鍵精靈&#x27;</span>);<br>        &#125;,<br>    &#125;,<br>&#125;<br><br>Vue.createApp(app).mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 的幾個 V-model 修飾符：lazy、number、trim</title>
    <link href="/v-model-modifier/"/>
    <url>/v-model-modifier/</url>
    
    <content type="html"><![CDATA[<p>v-model 可透過一些修飾符，來去對 input 進行限制與效果。</p><h2 id="lazy：轉為-change-事件後同步"><a href="#lazy：轉為-change-事件後同步" class="headerlink" title="lazy：轉為 change 事件後同步"></a>lazy：轉為 change 事件後同步</h2><p>編輯資料時不會一起更動值，等到輸入完畢離開 input 後才會變動</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- HTML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    &#123;&#123; message &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="number：改變-input-資料型別-typeof"><a href="#number：改變-input-資料型別-typeof" class="headerlink" title="number：改變 input 資料型別 typeof"></a>number：改變 input 資料型別 typeof</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- HTML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    &#123;&#123; message &#125;&#125;<br>    &#123;&#123; typeof message &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-comment">// 假設值為 123456：</span></span><br>    /*<br>    欄位一：string<br>    欄位二：number<br>    欄位三：string<br>    欄位四：number<br>    */<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li><code>&#123;&#123; typeof 資料名稱 &#125;&#125;</code> 可取得該筆資料的資料型別</li><li>加上修飾符 .number 才能改變其資料型態為 number，否則儘管輸入數字也會是 string</li></ul><h2 id="trim：去掉頭尾空格"><a href="#trim：去掉頭尾空格" class="headerlink" title="trim：去掉頭尾空格"></a>trim：去掉頭尾空格</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- HTML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    首&#123;&#123; message &#125;&#125;尾<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-comment">// 假設值為 &quot; 哈囉 &quot;：</span></span><br>    /*<br>    欄位一：首 哈囉 尾<br>    欄位二：首哈囉尾<br>    */<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>trim 能夠自動去除用戶在 input 框內首尾輸入的空格</li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://hackmd.io/@hexschool/S1DJeKTdL/%2FCHGTC0zPT4efLjbmoR9hqw">v-model - Vue 常用指令及方法</a></li><li><a href="https://www.itread01.com/content/1541221390.html">vue修飾符——.lazy - IT閱讀</a><ul><li>參考了一下如何介紹 lazy</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>讓資料進行雙向綁定的 Vue 指令：V-model</title>
    <link href="/v-model/"/>
    <url>/v-model/</url>
    
    <content type="html"><![CDATA[<h2 id="v-model-特點"><a href="#v-model-特點" class="headerlink" title="v-model 特點"></a>v-model 特點</h2><ul><li>input 加上 v-model 能夠與 vue 進行雙向溝通</li><li>會覆蓋 HTML 的 value、checked、selected 預設值</li></ul><a id="more"></a><h2 id="v-model-範例"><a href="#v-model-範例" class="headerlink" title="v-model 範例"></a>v-model 範例</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    &#123;&#123; message &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = &#123;<br>    data () &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            message: <span class="hljs-string">&#x27;哈囉&#x27;</span>,<br>        &#125;<br>    &#125;<br>&#125;<br><br>Vue.createApp(app).mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></div></td></tr></table></figure><ul><li>先在 JS 定義 message 資料，並透過  顯示資料在網頁上</li><li>在 input 標籤上榜定 v-model，預設會載入 JS 定義的資料，如果編輯資料會馬上改變值，達到雙向溝通綁定</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>讓 Vue 渲染資料在畫面上的幾個指令</title>
    <link href="/vue-render/"/>
    <url>/vue-render/</url>
    
    <content type="html"><![CDATA[<p>使用 JS 原生要將資料渲染，還要取得 DOM 元素後在進行操作，但是在 Vue 內則可以讓我們省略撰寫渲染的部分，由 Vue 本身來進行渲染，今天要介紹以下四種指令可以幫助我們達到渲染效果。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>就我目前了解，渲染資料可用下面四種指令：</p><ul><li><code>&#123;&#123; 資料名稱 &#125;&#125;</code></li><li>v-text 綁定在標籤上，Ex. <code>v-text=&quot;資料名稱&quot;</code><ul><li><code>&#123;&#123; &#125;&#125;</code> = <code>v-text</code></li></ul></li><li>v-once 綁定在父層，內層放置資料名稱 Ex. <code>&lt;div v-once&gt;&#123;&#123; 資料名稱 &#125;&#125;&lt;/div&gt;</code><ul><li>資料名稱放置於子層，而不是 v-once=”資料名稱”</li><li>僅會輸出一次資料在畫面上，往後更新都不會更動</li></ul></li><li>v-html 可以編譯 HTML 與法至標籤畫面上 Ex. <code>v-html=&quot;資料名稱&quot;</code><ul><li>不輕易讓用戶撰寫 HTML 語法，否則會用 XSS 攻擊風險；只可在可信內容上使用，不能用於提交內容上</li><li>詳細說明可參考：<a href="https://cn.vuejs.org/v2/api/#v-html">https://cn.vuejs.org/v2/api/#v-html</a></li></ul></li></ul><h2 id="程式範例"><a href="#程式範例" class="headerlink" title="程式範例"></a>程式範例</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    &#123;&#123; text &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-once</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = &#123;<br>    data () &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            text: <span class="hljs-number">0</span>,<br>        &#125;<br>    &#125;<br>&#125;<br><br>Vue.createApp(app).mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></div></td></tr></table></figure><h3 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h3><p>當 <code>&lt;input class=&quot;form-control&quot; v-model=&quot;text&quot;&gt;</code> 輸入 <code>2&lt;br&gt;3</code></p><ul><li> 顯示：`2<br>3`</li><li><p>v-text 顯示：<code>2&lt;br&gt;3</code></p></li><li><p>v-once 顯示：0</p></li><li><p>v-html 顯示：2</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 起手式，載入 CDN 建立環境</title>
    <link href="/vue-start/"/>
    <url>/vue-start/</url>
    
    <content type="html"><![CDATA[<p>之前學習 Vue 寫的筆記，先 Po 上來一下，預計這星期補上後續更熟悉後對 Vue 的了解。</p><a id="more"></a><h2 id="引入-Vue-CDN"><a href="#引入-Vue-CDN" class="headerlink" title="引入 Vue CDN"></a>引入 Vue CDN</h2><p>引入 Vue CDN，載入 Vue 外部資源，讓網頁能夠讀取 Vue 功能</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="在-HTML、JavaScript-建立-Vue-環境"><a href="#在-HTML、JavaScript-建立-Vue-環境" class="headerlink" title="在 HTML、JavaScript 建立 Vue 環境"></a>在 HTML、JavaScript 建立 Vue 環境</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>設定一個 ID 為 app 的 div，事實上不一定要取名為 app，不過大部分人都會取名為 app。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="範例-JS"><a href="#範例-JS" class="headerlink" title="範例 JS"></a>範例 JS</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = &#123;<br>    data () &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            text: <span class="hljs-number">0</span>,<br>        &#125;<br>    &#125;<br>&#125;<br><br>Vue.createApp(app).mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></div></td></tr></table></figure><h4 id="JS-解說"><a href="#JS-解說" class="headerlink" title="JS 解說"></a>JS 解說</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> 變數名稱 = &#123;<br>    data () &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            資料名稱: 資料內容 or 物件,<br>        &#125;<br>    &#125;<br>&#125;<br><br>Vue.createApp(變數名稱).mount(<span class="hljs-string">&#x27;HTML ID 名稱&#x27;</span>)<br></code></pre></div></td></tr></table></figure><ul><li>一開始宣告一個變數，內含要傳給 HTML 的資料</li><li>其中定義一個 data() 函式，裡面要放置 return {}，資料則放在 return {} 內</li><li>資料擺放格式為「資料名稱：資料內容 or 物件」，讀取資料時會使用資料名稱，而內容可以是單一值或物件</li><li>最後透過 Vue.createApp 選取要傳入的變數，並在透過 mount 傳送給指定的 HTML 區塊</li></ul><h3 id="另外一種-JavaScript-寫法"><a href="#另外一種-JavaScript-寫法" class="headerlink" title="另外一種 JavaScript 寫法"></a>另外一種 JavaScript 寫法</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = Vue.createApp(&#123;<br>    data () &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            text: <span class="hljs-number">0</span>,<br>        &#125;<br>    &#125;<br>&#125;).mount(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></div></td></tr></table></figure><ul><li>方法一是先宣告變數，後面再透過 Vue.createApp 去選取變數</li><li>此方法是在宣告變數的同時，就透過 Vue.createApp 選取並將資料傳遞給指定的 HTML 區塊</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>習慣養成只是開始，成長本就是痛苦</title>
    <link href="/habit-pain/"/>
    <url>/habit-pain/</url>
    
    <content type="html"><![CDATA[<p>我自認自己是一個喜歡自我提升的人，同時也會尋找許多自我提升的方法；最近一兩年很流行的原子習慣，每天 1 % 的進步，雖然微小但累積的能量很可觀，我也一直透過這樣的方式持續進步，這樣看似不會給自己太大壓力的進步方式，或許到了一個階段，還是必然面對相對痛苦的這個階段。</p><a id="more"></a><h2 id="想改變一件事情，從習慣開始"><a href="#想改變一件事情，從習慣開始" class="headerlink" title="想改變一件事情，從習慣開始"></a>想改變一件事情，從習慣開始</h2><p>當我們想要改變一件長久以來的陋習，或是要開始一個嶄新的計畫，通常來說我不會一開始給自己很大的壓力，可能是每天 10 分鐘、15 分鐘的時間，從最簡單的單位開始，比如說讀一頁書、做 20 下仰臥起坐，我相信這都比什麼都不執行還來的好。</p><p>就像運動，我希望它是我生活中的一部分，但畢竟過去它比較算是過客的形式在我的生活當中，一開始一定會有些不習慣；所以先從養成習慣開始，說不定習慣之後因為喜歡這項活動，就會自己想持續進步，不需要一開始就擬定讓人喘不過氣的執行計畫，導致還沒開始或一下就放棄。</p><h2 id="從調整作息看到成長的痛苦"><a href="#從調整作息看到成長的痛苦" class="headerlink" title="從調整作息看到成長的痛苦"></a>從調整作息看到成長的痛苦</h2><p>先說其實我還沒看過原子習慣這本書，不過透過網路許多人的分享，也開始運用每天進步 1 % 的進步法，尤其像是之前因為是 SOHO 族的關係，自由的作息使我比較晚睡晚起，開始我善用每天提早 15 分鐘起床的方式，起初覺得還算輕鬆，不會出太多力。</p><p>不過後來就開始停滯甚至又有些退步了，我原本以為每天不斷進步一些，過程應該不至於會太痛苦，不過我太天真了，到了一個階段還要再往前進步，或許還是會有些痛苦。這對一些人來說或許並不算什麼，但是在這種自由的作息久了之後，真的開始調整了還真是要有一些意志力。</p><h2 id="習慣養成只是開始，成長本就是痛苦"><a href="#習慣養成只是開始，成長本就是痛苦" class="headerlink" title="習慣養成只是開始，成長本就是痛苦"></a>習慣養成只是開始，成長本就是痛苦</h2><p>或許在一開始我們能夠以一個比較無壓力的方式成長，讓我們不要在一開始就因為壓力而放棄，但是到了一個階段，或許是習慣已經養成已久、進步的蜜月期結束、成長已經開始停滯，如果想要持續在這條路上前進，仍然不得不做一些犧牲，才能夠繼續往下走。</p><p>畢竟成長終究還是痛苦的，但這也是它難能可貴的地方，畢竟如果過程中都沒有任何痛苦，就代表任何人來做都可以很快上手，就沒有它應有的價值了。</p><h2 id="接受人生所有的挑戰"><a href="#接受人生所有的挑戰" class="headerlink" title="接受人生所有的挑戰"></a>接受人生所有的挑戰</h2><p>當然，每天進步 1 % 的力量還是很強大的，至少最近有一項過去一直沒有達成過的事情或許快達成了（對別人應該算是滿基本的事情，但對我是個挑戰），等達到再跟各位分享。</p><p>不過真正達到那個巔峰，勢必還是要有所付出，這也是成果帶給我們的美妙之處。</p>]]></content>
    
    
    <categories>
      
      <category>學習</category>
      
    </categories>
    
    
    <tags>
      
      <tag>學習</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>既然要花一輩子的時間，慢一點又何嘗是件壞事？</title>
    <link href="/life-long-learn/"/>
    <url>/life-long-learn/</url>
    
    <content type="html"><![CDATA[<p>這個時代資訊流通非常的快，只要擁有網路，想要尋找哪方面的資訊基本上都能夠 Google 大神或網路上都可以找到，但卻也很容易形成資訊焦慮。</p><a id="more"></a><h2 id="專精？還是協槓？"><a href="#專精？還是協槓？" class="headerlink" title="專精？還是協槓？"></a>專精？還是協槓？</h2><p>最近很夯的某詐賭事件中，有提到起因大致上是「雖然本業月收很多，但除了本業還能夠做什麼事情？」，先姑且不論這項自白大家解讀為何，但這句話帶給我一些反思。</p><p>坦白說我也是有些焦慮的，雖然工程師這行業看似前景不錯，不過我也常問自己一個問題：我除了「網站工程師」這條路以外，我還能夠做什麼事情？如果以後一個萬一沒有了網路了，我還有這個價值嗎？（不要懷疑，我常常這樣想 XD）</p><h2 id="有太多想完成的事情了"><a href="#有太多想完成的事情了" class="headerlink" title="有太多想完成的事情了"></a>有太多想完成的事情了</h2><p>當然上述那段是很極端的事情，我自己也知道不太可能發生 XD 不過偶爾還是會有想要提升的其它東西，比如健身、遊戲、社交能力、英語能力、…等等還有許多，都是我想要提升的部分，但不用說到這些了，光是網站這項領域，我自己就經常會有一股衝動想要一網打盡。</p><p>有這個企圖心以及野心，我相信是好的；但是，吸收得了嗎？我看有些人很厲害，也是多項協槓技能在身，我難道就不行嗎？</p><h2 id="從運動得到的反思"><a href="#從運動得到的反思" class="headerlink" title="從運動得到的反思"></a>從運動得到的反思</h2><p>我的體能在大眾上來看是偏差的，體育成績也總是名列前茅（倒數來看的話），雖然有在跑健身房，但畢竟是自己練，對於健身的觀念、細節絕對有很多不懂之處，於是於年底請了運動教練幫我調整。</p><p>教練給我的目標是：增加體重、體指維持，培養運動基礎。雖然在請教練之前，算是滿認真的在跑健身房三個多月，但事實上我的運動基礎能力還是很弱。畢竟，花了 23 年不善待自己身體，又怎能想在短期看見效果？</p><h2 id="只想看到成熟的果實"><a href="#只想看到成熟的果實" class="headerlink" title="只想看到成熟的果實"></a>只想看到成熟的果實</h2><p>有些人運動可能是希望為了短期可以達到瘦身的效果，然而有時候執行過程的反饋，並不如自己預期般那樣；於是開始鬆懈，最後再度回到原點。</p><p>曾經我給自己的壓力也是挺大的，好像把運動這件事情看得很慎重一樣，尤其自己「完美主義」感到強烈後，一點點不如意就能夠讓我煩惱好幾天，搞得像會影響很大，但實際上根本就是想一堆有的沒的，才導致效果低落。</p><h2 id="求慢不求快：花一輩子的時間，好好運動！"><a href="#求慢不求快：花一輩子的時間，好好運動！" class="headerlink" title="求慢不求快：花一輩子的時間，好好運動！"></a>求慢不求快：花一輩子的時間，好好運動！</h2><p>後來心態上能夠有所轉變的原因，是因為我將「運動」這件事情當成是我生活的一部分、生活習慣，它就是我的日常生活，我不會因為哪幾天狀況比較差，就造成長時間心情低落，而更是需要慢慢磨練、持續進步。</p><p>當然，過程中還是要持續檢討過程帶給我們的反饋。不過，盡可能地更加享受過程，畢竟，<strong>我要花一輩子的時間，好好運動！</strong></p><h2 id="只要自己還有在進步，就不怕在未來等不到成熟果實"><a href="#只要自己還有在進步，就不怕在未來等不到成熟果實" class="headerlink" title="只要自己還有在進步，就不怕在未來等不到成熟果實"></a>只要自己還有在進步，就不怕在未來等不到成熟果實</h2><p>今年我的目標，打算放在身體健康（包含運動與飲食）、專業技能、社交技巧上面。當然，我還有一堆想要學習的東西，但是既然知道我們無法同時兼顧這麼多事情，那不如先努力達標今年所有目標，再來考慮其它事情。</p><p>當然有些人能協槓很厲害，但我們不用跟他人比較，因為當我夠努力，或許總有一天那個成功的人就會是我；就算比別人慢一點，那又有什麼關係？</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>在這個步調很快的世界裡，或許更應該放慢腳步。世界帶給我們很多的雜訊，但是每個人一天都只有 24 小時，不可能兼顧所有事情，我們都必須適時暫時放下某件事情。</p><p>不過我相信，只要有那一份信念在，既然有一輩子的事情可以去努力，那或許也不用急於去兌現；唯一能做的，就是不斷的精進提升，把每一天過得更加充實。</p>]]></content>
    
    
    <categories>
      
      <category>學習</category>
      
    </categories>
    
    
    <tags>
      
      <tag>學習</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue 搭配 template 標籤使渲染資料不額外產生標籤</title>
    <link href="/vue-template/"/>
    <url>/vue-template/</url>
    
    <content type="html"><![CDATA[<p>使用 Vue 開發程式時，<code>v-for</code> 是一個經常使用的指令，用於一組陣列渲染。不過今天如果只是要進行迴圈渲染，不想額外產生新標籤，又該怎麼進行撰寫？</p><a id="more"></a><h2 id="遇到的問題"><a href="#遇到的問題" class="headerlink" title="遇到的問題"></a>遇到的問題</h2><p>前幾天利用 Bootstrap Carousel 元件，想使用 Vue 將資料渲染使用。但發現一個問題：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-inner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(url,num) in temp.imagesUrl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;num == 0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-item active&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-100&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">:alt</span>=`照片$&#123;<span class="hljs-attr">num</span>+<span class="hljs-attr">1</span>&#125;`&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-100&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">:alt</span>=`照片$&#123;<span class="hljs-attr">num</span>+<span class="hljs-attr">1</span>&#125;`&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 其它 Buutton --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>這個範例我為了要跑 v-for 指令，所以特別再加上一層 <code>&lt;div&gt;</code> 標籤；但這樣會使渲染後的 HTML 語法如下： </p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-inner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-item active&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-100&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;照片網址1&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;照片1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-100&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;照片網址2&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;照片2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 其它 Buutton --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>從外觀上來看，或許只是多了一層 <code>&lt;div&gt;</code> 標籤，但是在 Carousel 的機制下，是無法正常運作的！這會使 Carousel 無法順利轉到下一張圖片，點擊上下張或是指定按鈕也無效。</p><h2 id="解決方法：使用-lt-template-gt-標籤"><a href="#解決方法：使用-lt-template-gt-標籤" class="headerlink" title="解決方法：使用 &lt;template&gt; 標籤"></a>解決方法：使用 <code>&lt;template&gt;</code> 標籤</h2><p>使用 <code>&lt;template&gt;</code> 標籤搭配進行渲染，能夠使 DOM 結構產生時不會新增額外不必要標籤。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-inner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(url,num) in temp.imagesUrl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;num == 0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-item active&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-100&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">:alt</span>=`照片$&#123;<span class="hljs-attr">num</span>+<span class="hljs-attr">1</span>&#125;`&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-100&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">:alt</span>=`照片$&#123;<span class="hljs-attr">num</span>+<span class="hljs-attr">1</span>&#125;`&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 其它 Buutton --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>將用於放置 v-for 的標籤改成 <code>&lt;template&gt;</code>，最後產生語法如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-inner&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-item active&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-100&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;照片網址1&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;照片1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;carousel-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;w-100&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;照片網址2&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;照片2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 其它 Buutton --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>於是回到 Demo，Bootstrap Carousel 元件就能正常運作了。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://hackmd.io/@hexschool/S1DJeKTdL/%2FKWXW13ewTaq2M_svlEAYXA">Vue 常用指令及方法：v-for</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原來 CSS 也有原生變數可以使用</title>
    <link href="/css-variables/"/>
    <url>/css-variables/</url>
    
    <content type="html"><![CDATA[<p>之前使用 SCSS 慣了，每次如果想要在樣式表使用變數就會直覺想到使用預處理器，結果前陣子才發現原生的 CSS 也有變數功能可以使用，那就來記錄一下吧。</p><a id="more"></a><h2 id="設定方式"><a href="#設定方式" class="headerlink" title="設定方式"></a>設定方式</h2><p>首先 CSS 原生變數的語法是這樣設定的：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>    --變數名稱: 變數值;<br>    <span class="hljs-selector-tag">--bg-primary</span>: <span class="hljs-selector-tag">orange</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>變數的設定都會放在 <code>:root</code> 選取器內。</p><h2 id="變數使用方式"><a href="#變數使用方式" class="headerlink" title="變數使用方式"></a>變數使用方式</h2><p>假設我希望 <code>&lt;header&gt;&lt;/header&gt;</code> 區塊內的背景顏色可以使用 <code>--bg-primary</code> 的橘色，CSS 可以這樣撰寫（不過通常不會直接使用標籤選擇器設定樣式就是了，這裡僅為範例）：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">header</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--bg-primary);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>反正就是在屬性值撰寫 <code>var(--變數名稱)</code> 這樣格式。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.youtube.com/watch?v=rIMsQ8fk1L0">[ 前端新手技能樹 ] #7 從 CSS 變數與函式看預處理與程式 - YouTube By Alex 宅幹嘛</a></li><li><a href="https://w3c.hexschool.com/blog/21985acb">原生 CSS 變數運用技巧（CSS Variables） - 客座投稿 | W3HexSchool</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回顧 2021 年與 2022 年未來展望</title>
    <link href="/2021-to-2022/"/>
    <url>/2021-to-2022/</url>
    
    <content type="html"><![CDATA[<p>雖然 2022 年已經過了兩天，還是跟大家說聲新年快樂；一年過去總是有一些收穫與成長的部分，也有需要更加努力的地方，今天就來做個年度總結。</p><h2 id="部落格"><a href="#部落格" class="headerlink" title="部落格"></a>部落格</h2><p>我在 2021 年時在部落格發布了 69 篇技術文章、學習心得等等，其中包含了 30 篇的 IT 鐵人賽文章。</p><p>去年成長有很大一部分真的要歸功於這個部落格，使我盡量能夠產出一些文章，也因為持續的輸出，使我對某些技術原先只是會用，但透過自己寫了一遍更加了解了對於該技術的掌握以及熟悉度。</p><p>另外，在我一個很喜歡的學習 YouTuber「錦堂」有一部 <a href="https://www.youtube.com/watch?v=-6aResZ_JHo&t=122s">【打天下篇 9】高效笔记做法｜正确的 学习方法2.0 影片</a> 所提到的複習式筆記其實就滿像我撰寫技術文章的概念，大家可以參考一下。</p><h2 id="對於-WordPress-的掌握度"><a href="#對於-WordPress-的掌握度" class="headerlink" title="對於 WordPress 的掌握度"></a>對於 WordPress 的掌握度</h2><p>年初我還在實習公司工作，所以大多基底其實在 2020 年時慢慢已經有了對 WordPress 開發上有一定的熟悉度。</p><p>畢業後跟實驗室的學長開始做 WordPress 網站接案，明顯感受到過去實習大量沉浸在 WordPress 開發所帶來的上手程度，程式碼的部分自認寫的比起過去好許多（現在想到過去在公司寫的 Code …… 慚愧中 XD）。不過現在看來還是有許多能夠更加調整的部分，比方說檔案架構拆分的可能性，這部分我還沒嘗試過，我想會是未來想著重實作的一塊。</p><h2 id="參與-WordCamp-Taiwan-2021-志工籌備"><a href="#參與-WordCamp-Taiwan-2021-志工籌備" class="headerlink" title="參與 WordCamp Taiwan 2021 志工籌備"></a>參與 WordCamp Taiwan 2021 志工籌備</h2><p>今年一個滿特別的經驗是參與了 WCTW 2021 志工籌備，並且在第一次參與籌備的情況下自願擔任了網站組組長，主要就是要主持會議以及分配工作、關心進度，因為都是第一次所以自認待改進事項還是很多，不過是很不錯的經驗。</p><p>大致上就是處理 WCTW 網站上的頁面編排以及 CSS 撰寫，會需要使用到 Git 與大家協作，之前使用 Git 還是自己使用居多（實習公司時期我大多使用介面操作），所以這次與他人協作有讓我對於 Git 的掌握又有更深層的認識與學習。</p><p>另外也透過此次活動更加認識了幾位在 WordPress 社群努力的夥伴，雖然因為只見幾次面所以我還稍微有些害羞（？）希望之後能愈來愈熟。</p><h2 id="對於技術的掌握程度"><a href="#對於技術的掌握程度" class="headerlink" title="對於技術的掌握程度"></a>對於技術的掌握程度</h2><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p>2021 上半年之前我的主要技術還是以 PHP 的精進上為主，大致上可能還是以圍繞在 WordPress 上居多，就算是獨立開發的訂單查詢系統，也是接 CMS 的資料為主（而且還是 Joomla）。</p><p>不過在年底時因為一次面試測驗，接觸到了使用 Laravel 設計一個 RESTful API，然後在利用 Axios 套件串接，算是一個滿不錯的體驗，也迫使我至少跑了一次 Laravel 的流程。</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>前面所提的<del>迫使跑一次 Laravel</del>流程好像搞得我沒有在精進技術一樣（？）實際上今年有滿長一部分是在精進自己前端領域樹部分，過往可能只是會使用 CSS 跟 JavaScript，但今年對於這兩個部份的大量練習，讓我更進階到了一些設計模式的掌握、比較能夠掌握預處理器 SCSS 與 Bootstrap 應用、JS 物件取值或函式傳遞概念的實作有比較深的理解。</p><p>此外有稍微嘗試碰了一下框架 Vue 的東西，這會是我未來想持續精進的重點之一。</p><h2 id="我畢業了"><a href="#我畢業了" class="headerlink" title="我畢業了"></a>我畢業了</h2><p>今年還有一個重大的身分轉變，就是從幼稚園開始差不多十八年的學生生涯畢業了。比較可惜的是畢業期間剛好遇到了疫情，在下所有畢業節目系列第一個活動：社團送舊，剛好就是疫情剛爆發的 5/15，只能說無緣，第一個實體畢業活動就直接被取消（後來改線上），後面就不用說了。</p><p>不過既然發生也就發生了，值得慶幸的是後來本土疫情還是守住了，後來也還是有跟許多大學同學一起吃飯聊天，雖然少了許多儀式感的活動當然有些遺憾，不過我覺得更重要的還是與朋友間的友情，能夠保持著是一件很可貴的一件事情。</p><h2 id="專注於自己能夠控制的事情"><a href="#專注於自己能夠控制的事情" class="headerlink" title="專注於自己能夠控制的事情"></a>專注於自己能夠控制的事情</h2><p>這是我在 2021 年學到的事情，疫情打亂了我原本的計畫，心情當然不會到太好，基本上每天就是無力感爆棚。</p><p>但就算如此我想還是有很多可以繼續做的事情，比方說持續精進自己，疫情期間因為參加 Vue 體驗營學習到使用 Vue 3 實作一個簡單的 To do list，前後也就短短的一個月，就算在當時感到最無力的時候，仍然能夠將自己可控範圍的準備到極致，隨時準備任何機會。</p><h2 id="2022-未來展望"><a href="#2022-未來展望" class="headerlink" title="2022 未來展望"></a>2022 未來展望</h2><p>到這裡總是要有一些未來展望，上面其實都是比較多闡述技能面或是相關的東西，或多或少也提到了未來要學習的部分。所以來談談其它的 XD</p><p>其實未來自己想著重的重點包含外在形象與自己健康。過去其實挺對外在形象沒什麼再搭理，目前已經有在處理穿搭這方面，我想未來會在更進階到牙齒與痘疤這塊，不過目前也還在積極存錢當中 XD</p><p>健康的部分目前盡量讓自己維持在一週三練的運動頻率，從疫情三級解封後大致上維持在這個情況，不過在年底的時候請了健身教練，明顯感受到自己在駝背的這一塊改善了許多，算是讓我比較有成就感的部分。希望未來也能夠繼續堅持下去！</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>2021 年雖然不是太好的一年，不過一年過去總是會有一些成長，期許 2022 年不管是自己還是大家都能夠有更多收穫。</p><p>也希望這個世界能夠盡快平復下來，一起加油。</p>]]></content>
    
    
    <categories>
      
      <category>學習</category>
      
    </categories>
    
    
    <tags>
      
      <tag>學習</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>為自己加油，迷茫或許是必經過程</title>
    <link href="/cheer-for-yourself/"/>
    <url>/cheer-for-yourself/</url>
    
    <content type="html"><![CDATA[<p>這是一篇激勵自己的文章。</p><p>其實我在很小的時候就確立自己想要往電腦這條路發展，雖然中間經歷過許多跌跌撞撞的事情，但目前確實也靠著這份技能騙吃騙喝下去了。（8 個月的實習與目前的接案）</p><a id="more"></a><h2 id="資訊焦慮"><a href="#資訊焦慮" class="headerlink" title="資訊焦慮"></a>資訊焦慮</h2><p>常常會有資訊焦慮，看到很多人擁有的技術自己不知道是否熟悉。更精確來說，常常我在哪裡跌倒、很想從那裡站起來，但「那裡」很有可能是很大的一個坑。</p><p>比如說是刷題。</p><p>接著，我就開始想去努力刷題，但這其實是很突如其然的擾亂了我的學習計畫。但我只覺得我似乎有義務把所有坑給補起來。</p><h2 id="讀書會"><a href="#讀書會" class="headerlink" title="讀書會"></a>讀書會</h2><p>後來我加入了一個讀書會，本來是想刷題，但其中一人給了建議，才讓我突然又醒過來。</p><p>至少以在台灣現今狀態來講，刷題的公司基本上是比較少的，然而我卻因為在一間公司的失敗又起了得失心，想要開始努力刷題。</p><h2 id="刷題不是不好，但要釐清自己要的是什麼"><a href="#刷題不是不好，但要釐清自己要的是什麼" class="headerlink" title="刷題不是不好，但要釐清自己要的是什麼"></a>刷題不是不好，但要釐清自己要的是什麼</h2><p>這過程中有點偏離自己的學習計畫，這或許是該提醒自己不該把得失心看這麼重。</p><p>我知道我算是積極，失敗了想要重新站起來，想站起來的心是好的，但這本來就並非一蹴可及。</p><p>很多事情就是要慢慢地打磨，而並非講求快速，最終才有可能熬出自己所希望。</p><h2 id="為自己加油，迷茫或許是必經過程"><a href="#為自己加油，迷茫或許是必經過程" class="headerlink" title="為自己加油，迷茫或許是必經過程"></a>為自己加油，迷茫或許是必經過程</h2><p>當然每一次荒唐的行為，或多或少還是會有一些獲得，比如現在加入的讀書會，感覺大家都還滿認真的。</p><p>所以我也不會後悔有這些迷茫的過往，因為這都是必經的，未來才會愈來愈穩重。</p><p>所以還是要加油，之後才有機會離愈來愈靠近自己的理想。</p>]]></content>
    
    
    <categories>
      
      <category>學習</category>
      
    </categories>
    
    
    <tags>
      
      <tag>學習</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>參與六角學院 JavaScript 直播班，我有哪些收穫？</title>
    <link href="/hex-javascript-training/"/>
    <url>/hex-javascript-training/</url>
    
    <content type="html"><![CDATA[<p>雖然在今年我已經從大學生畢業成為了一名職場新鮮人，但要成為一名網站開發工程師，保持持續精進的心態仍然是必要的。在今年暑假（不是畢業了？XD）期間我上了六角學院的網頁切版直播班，結束後為了持續精進自己的前端能力，因此就接著上學院開設的 JavaScript 直播班，今天就來分享一下這個課程以及我從中學習到的內容吧。</p><a id="more"></a><h2 id="課程提供的服務與活動"><a href="#課程提供的服務與活動" class="headerlink" title="課程提供的服務與活動"></a>課程提供的服務與活動</h2><h3 id="主線與小組任務、每日任務、線上助教服務與助教直播"><a href="#主線與小組任務、每日任務、線上助教服務與助教直播" class="headerlink" title="主線與小組任務、每日任務、線上助教服務與助教直播"></a>主線與小組任務、每日任務、線上助教服務與助教直播</h3><p>由於之前 <a href="https://guiblogs.com/hex-web-layout-training/">六角學院網頁切版直播班，我的上課心得</a> 我就有大概說出六角直播班課程的調性，這邊我就不多加詳述。主要以在這段時間內的感受以及與學院老師的互動上為主。</p><h3 id="小組抽考"><a href="#小組抽考" class="headerlink" title="小組抽考"></a>小組抽考</h3><p>這是有別於切版直播班在這次 JS 直播班新出的一個活動。（但我不知道這是不是特定有的還是真的是新的 XD）校長會在直播課程中一個章節上到告一段落後，會出差不多 5 - 10 題題目，要各小組回答，此時小組自己就要開始分配人力還做解答，並將答案寫到雲端 Excel 作答區。</p><p>我覺得這個還滿有趣的，<del>除了能夠防止上課沒聽課外</del>，更重要的是增加了組內的互動性與向心力，校長會一直不斷地看目前各組的作答狀況，非常刺激 XD</p><p><img src="https://i.imgur.com/HTLSGfn.png" alt="小組抽考各組戰況"></p><p>作答部分使用 Google Drive 的試算表，但太多人上去網頁會整個很卡，最後都要先請一個人上線去做填答動作（其餘在 Slack 或 Discord 小組群組提供答案）。</p><h3 id="週末任務"><a href="#週末任務" class="headerlink" title="週末任務"></a>週末任務</h3><p>這個項目有可能是學院這邊會出個考題，第一個人作答後並 Po 在課程 Slack 群組後，自己也要出題目提供下一個人作答，然後持續接力；我認為還滿有趣的，畢竟要能夠出題代表自己對該技術要有一定程度的了解，更能迫使自己努力學習。</p><p>也可能是提供一個題目，要我們利用寫文章的方式把它撰寫出來，鼓勵我們透過輸出的方式，將自己所學分享出來。</p><p><img src="https://i.imgur.com/WFXGzOl.png" alt="週末任務"></p><h3 id="與校長的求職諮詢"><a href="#與校長的求職諮詢" class="headerlink" title="與校長的求職諮詢"></a>與校長的求職諮詢</h3><p>其實在直播班接近尾聲時，我就已經開始有求職的計畫。雖然過去有尋找實習的經驗，但畢竟依舊是職場小白，還是有許多問題需要請教，因此就趁著某一次的週末任務私訊校長後，就也開始有一些對於求職的疑問與校長做討論。</p><p>這部分從線上履歷撰寫（本來有自己設計）、面試準備建議、挑選公司，到後來持續面試過程中遇到任何問題私訊校長，校長都會盡可能在一天之內回覆我。</p><h2 id="在課程中我學習到什麼"><a href="#在課程中我學習到什麼" class="headerlink" title="在課程中我學習到什麼"></a>在課程中我學習到什麼</h2><p>這部分我會從上課之前就會的底子為基底來分享。</p><ul><li>更加熟悉變數資料<strong>記憶體指向</strong>觀念<ul><li>可參考我撰寫的筆記「<a href="https://guiblogs.com/js-by-reference-value/">JavaScript：by referenc（傳參考、傳址）與 by value（傳值）差異</a>」</li></ul></li><li>利用<strong>物件取值</strong>概念動態增加物件屬性</li><li>更熟悉利用套件 <strong>Axios 串接 API</strong><ul><li>除了 <strong>GET</strong> 以外，同時涉略 <strong>POST</strong> / <strong>DELETE</strong> / <strong>PETCH</strong></li><li>其中實作 PETCH 時，因為型別問題稍微踩了一下雷</li><li>一次面試線上測驗當中，按照題目開發了一個 <strong>Laravel RESTful API</strong>，前端即使用 Axios 串接</li></ul></li><li>嘗試利用 <strong>C3.js</strong> 實作個人非常不熟悉的圖表套件</li></ul><h3 id="API-串接實作：商品列表"><a href="#API-串接實作：商品列表" class="headerlink" title="API 串接實作：商品列表"></a>API 串接實作：商品列表</h3><p><img src="https://i.imgur.com/rw2Qnql.png" alt="API 串接：商品列表"></p><h3 id="API-串接實作：我的購物車"><a href="#API-串接實作：我的購物車" class="headerlink" title="API 串接實作：我的購物車"></a>API 串接實作：我的購物車</h3><p><img src="https://i.imgur.com/0cZsCvY.png" alt="API 串接：我的購物車"></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>整體而言因為是新手養成班，有較多的部分算是再複習過去所會但不熟悉的概念。不過對於 API 串接這個部分，有在這次的課程中大量練習到並踩過不少雷，從中獲取經驗。</p><p>我認為直播班的價值就是遇到問題你除了有學院的助教可以詢問外，身旁也有許多線上的同學、甚至是同組的組員可以詢問與討論，可以想像成是一個營隊，這兩個月大家為了學習這項技能一同學習。</p>]]></content>
    
    
    <categories>
      
      <category>學習</category>
      
    </categories>
    
    
    <tags>
      
      <tag>上課心得</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>淺談面試考題之一：Cookie 與 Session 的差異</title>
    <link href="/cookie-session/"/>
    <url>/cookie-session/</url>
    
    <content type="html"><![CDATA[<p>今天來談談一個面試可能會考的題目：Cookie 與 Session 的差異，這兩者能夠記錄一些使用者的狀態、資訊，至於它們本身的差異為何，就是今天要來筆記的部分。</p><a id="more"></a><h2 id="為何需要用到它們"><a href="#為何需要用到它們" class="headerlink" title="為何需要用到它們"></a>為何需要用到它們</h2><p>HTTP 協議屬於一種<strong>無狀態協議</strong>，代表<strong>每一次的請求都是獨立的</strong>，所以 HTTP 本身是不會記錄資訊，比方說登入表單輸入帳號的提示，這部分 <strong>HTTP 是無法紀錄的</strong>。因此就衍伸出了 <strong>Cookie</strong> 來去進行記錄，待會介紹的 <strong>Session</strong> 亦是如此。</p><p>如果要更白話來講就像是：道路本身人來人往，但道路本身不會記錄有誰曾經經過；而路上的攝影機，就能夠紀錄到攝像範圍內路過的人事物。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie 又稱<strong>小餅乾</strong>，是瀏覽網頁時伺服器那邊傳送給自己電腦的一塊資訊，瀏覽器就會儲存它，下一次瀏覽該網頁時再傳送給伺服器。</p><p>最常見的就是應用於登入表單，如果沒有特別設定，會提示之前我們所輸入的帳號資訊；或是用於紀錄目前登入狀態。</p><h3 id="Cookie-本身特性"><a href="#Cookie-本身特性" class="headerlink" title="Cookie 本身特性"></a>Cookie 本身特性</h3><p>首先 Cookie 有其<strong>生命週期</strong>，因此如果生命週期結束就會失效。</p><p><strong>另外 Cookie 只會針對原本網域起作用</strong>，例如在 <code>www.google.com</code> 的 Cookie 不會再 <code>tw.yahoo.com</code> 上起作用。</p><h3 id="Cookie-其缺點"><a href="#Cookie-其缺點" class="headerlink" title="Cookie 其缺點"></a>Cookie 其缺點</h3><p>Cookie 的缺點是<strong>伺服器端可以修改 Cookie 的資料</strong>，因此無法確保資料是真實的，所以不太能用於機密資料的傳遞。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session 紀錄<strong>伺服器上使用者資訊</strong>，常見應用於<strong>儲存使用者在伺服器上的資訊</strong>，比方說是<strong>用戶驗證</strong>後，除了本身記錄其資訊外，會產生對應 ID 傳入客戶端並使用 Cookie 進行記錄。</p><p>以飯店來舉例：飯店或櫃台（伺服器端、Server）證明你是 201 房客，飯店這邊除了紀錄你的資訊外，也會給你一組 201 房間鑰匙，而你（客戶端）就會拿到鑰匙放在自己身上某處（可理解為 Cookie），你就能夠拿這副鑰匙去打開房門。（不確定這樣舉例是否合適，有大神路過歡迎指教）</p><h2 id="兩者應用層面"><a href="#兩者應用層面" class="headerlink" title="兩者應用層面"></a>兩者應用層面</h2><ul><li>Cookie：放置瀏覽器儲存的資訊以及伺服器端回傳的 Session 資訊</li><li>Session：伺服器進行資料驗證以及紀錄伺服器使用者資訊</li></ul><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://medium.com/tsungs-blog/day14-session%E8%88%87cookie%E5%B7%AE%E5%88%A5-eb7b4035a382">Day14-Session與Cookie差別</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10187212">Day23 - Cookie &amp; Session - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天</a></li><li><a href="https://tw.alphacamp.co/blog/cookie-session-difference">Cookie 和 Session 究竟是什麼？有什麼差別？｜ALPHA Camp Blog</a></li><li><a href="https://progressbar.tw/posts/92">[不是工程師] 會員系統用Session還是Cookie? 你知道其實他們常常混在一起嗎？</a></li><li><a href="https://blog.hellojcc.tw/introduce-session-and-cookie/">介紹 Session 及 Cookie 兩者的差別說明</a></li><li><a href="https://hulitw.medium.com/session-and-cookie-15e47ed838bc">白話 Session 與 Cookie：從經營雜貨店開始 | by Huli | Medium</a></li><li><a href="https://iter01.com/511357.html">深度分析：面試90%被問到的 Session、Cookie、Token，看完這篇你就掌握了！ | IT人</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>開發相關</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cookie</tag>
      
      <tag>session</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>淺談 PHP include 與 require 以及加上 _once 的差異</title>
    <link href="/php-include-require/"/>
    <url>/php-include-require/</url>
    
    <content type="html"><![CDATA[<p>在 PHP 引入其它檔案，就會使用到 include、require 或是 include_once 以及 require_once。究竟這四個有什麼樣的差別，今天就來筆記一下這個部分。</p><a id="more"></a><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>使用 include 載入檔案時，如果發生找不到檔案的情況，會觸發 Warning 錯誤，基本上 Warning 類型的警告不會使程式碼中斷不往下執行，這部分可參考 <a href="https://blog.gtwang.org/octave/octave-errors-and-warnings/2/">Octave 錯誤與警告（Errors and Warnings）</a> 這篇文章，找時間我也來筆記一下這部分知識點 XD</p><p>不過我自己測試的時候，如果是像某一支檔案有一行沒加 <code>;</code> 分號而導致的錯誤，就會出現 Error 的錯誤而不會往下繼續執行程式。</p><h2 id="require"><a href="#require" class="headerlink" title="require"></a>require</h2><p>require 與 include 不同地方在於，PHP 會在 require 引入後重新編譯，而將被引入檔的內容也會引入至要求引入的檔案。</p><p>另外不一樣的一點是，如果載入不到檔案，require 會直接報 Error，所以就不會往下繼續執行。</p><h2 id="include-once-與-require-once"><a href="#include-once-與-require-once" class="headerlink" title="include_once 與 require_once"></a>include_once 與 require_once</h2><p>如果在後面加上 <code>_once</code> 字符，則會在引入前先檢查是否有在其它地方載入了同樣的檔案，如果有就不會再次載入。</p><p>例如說有一些自訂函式，怕重複載入而出現錯誤，就很適合使用這個方法載入。</p><h2 id="該使用-include-還是-require"><a href="#該使用-include-還是-require" class="headerlink" title="該使用 include 還是 require"></a>該使用 include 還是 require</h2><p>查了些網路上的資料，表示動態內容適合使用 include、靜態內容則適合使用 require，不過都沒有提到為什麼，可能是我沒有看到解釋或是才疏學淺 XD</p><p>可能是因為相對來講 include 在錯誤表達方面似乎不像 require 那麼嚴謹（？）不過這只是我的猜測，不保證是對的，如果有大神路過，可能要麻煩大神指教 XD</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="http://syunguo.blogspot.com/2013/04/phpinclude-require.html">[PHP]include 與 require 的差別</a></li><li><a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/239900/">深入理解require與require_once與include以及include_once的區別 | 程式前沿</a></li><li><a href="https://expect7.pixnet.net/blog/post/36116459">[程式][PHP] require 與 include 的差別。(包含include_once 與 require_one)。 @ 四處流浪的阿基。I am Vagrant Walker :: 痞客邦 ::</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>include</tag>
      
      <tag>require</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何利用 PHP 的 str_split 函式將字串字元一個個分割成字串</title>
    <link href="/php-str-split/"/>
    <url>/php-str-split/</url>
    
    <content type="html"><![CDATA[<p>最近去面試寫測驗時，我的撰寫邏輯需要使用到字串分割，但 PHP 的字串分割我真的超級不熟，每次使用每次忘記，所以就打算直接記錄在這裡。</p><a id="more"></a><h2 id="str-split-用法"><a href="#str-split-用法" class="headerlink" title="str_split 用法"></a>str_split 用法</h2><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">str_split(變數, 分割長度);<br></code></pre></div></td></tr></table></figure><ul><li>變數：須被分割成字串之變數</li><li>分割長度：預設值為 1，想兩兩配一起就寫 2</li></ul><h2 id="來段範例吧"><a href="#來段範例吧" class="headerlink" title="來段範例吧"></a>來段範例吧</h2><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$string</span> = <span class="hljs-string">&#x27;abc def&#x27;</span>;<br><span class="hljs-comment">// 將字串一個個分成陣列</span><br><span class="hljs-variable">$arr1</span> = str_split(<span class="hljs-variable">$string</span>);<br><span class="hljs-comment">// 一個陣列職最多兩個字元</span><br><span class="hljs-variable">$arr2</span> = str_split(<span class="hljs-variable">$string</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// Output 1</span><br>print_r(<span class="hljs-variable">$arr1</span>);<br><span class="hljs-comment">// Output 2</span><br>print_r(<span class="hljs-variable">$arr2</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="輸出結果"><a href="#輸出結果" class="headerlink" title="輸出結果"></a>輸出結果</h2><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">Array</span><br>(<br>    [<span class="hljs-number">0</span>] =&gt; a<br>    [<span class="hljs-number">1</span>] =&gt; b<br>    [<span class="hljs-number">2</span>] =&gt; c<br>    [<span class="hljs-number">3</span>] =&gt;  <br>    [<span class="hljs-number">4</span>] =&gt; d<br>    [<span class="hljs-number">5</span>] =&gt; e<br>    [<span class="hljs-number">6</span>] =&gt; f<br>)<br><span class="hljs-keyword">Array</span><br>(<br>    [<span class="hljs-number">0</span>] =&gt; ab<br>    [<span class="hljs-number">1</span>] =&gt; c <br>    [<span class="hljs-number">2</span>] =&gt; de<br>    [<span class="hljs-number">3</span>] =&gt; f<br>)<br></code></pre></div></td></tr></table></figure><p>可以看到輸出結果一的部分，將一段字串內的每個字元都被分配到各一個陣列值去；第二個輸出結果則是一個陣列值最多兩個字元。（注意第二個輸出結果的第 1 筆資料，<code>c </code> 旁邊是有空格的！）</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>意外發現新用法（是的我以前沒用過，也有可能是我忘記），不然以往我如果要一個一個分割我會這麼做：</p><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php">preg_split(<span class="hljs-string">&#x27;//&#x27;</span>, <span class="hljs-variable">$mystring</span>, <span class="hljs-number">-1</span>, PREG_SPLIT_NO_EMPTY)<br></code></pre></div></td></tr></table></figure><p>是從 <a href="https://www.wibibi.com/info.php?tid=PHP_%E5%AD%97%E4%B8%B2%E5%88%86%E5%89%B2%E4%B8%A6%E5%AD%98%E5%85%A5%E9%99%A3%E5%88%97">PHP 字串分割並存入陣列 - Wibibi 網頁設計教學百科</a> 找到的用法，又是正規表達式又是標記，很容易忘記啊 XDD</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://www.itread01.com/content/1548367021.html">PHP 字串分割 explode 與 str_split 函式</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>str_split</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何利用 JavaScript 箭頭函式來更加精簡程式碼？</title>
    <link href="/js-arrow-function/"/>
    <url>/js-arrow-function/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 在 ES6 之後增加了箭頭函式（Arrow functions），使用箭頭函式能夠使寫法更加精簡。</p><a id="more"></a><h2 id="聲明"><a href="#聲明" class="headerlink" title="聲明"></a>聲明</h2><p><strong>2022/1/19 更新：</strong>雖然使用箭頭函式同時能夠讓語法更加精簡，但是<strong>箭頭函式不等於縮寫</strong>！以 this 觀念來說，箭頭函式沒有自己的 this，因此它不等於是傳統函式的縮寫。</p><h2 id="傳統函式寫法"><a href="#傳統函式寫法" class="headerlink" title="傳統函式寫法"></a>傳統函式寫法</h2><p>宣告一個變數 newData 為函式，傳入值後再透過 return 傳出。如果利用傳統函式，寫法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> newData = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> item;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(newData(<span class="hljs-string">&#x27;data&#x27;</span>));<br></code></pre></div></td></tr></table></figure><p>如果要使語法更加精簡，可經由以下步驟一步步慢慢精簡。</p><h2 id="步驟一：去除-function、增加-gt"><a href="#步驟一：去除-function、增加-gt" class="headerlink" title="步驟一：去除 function、增加=&gt;"></a>步驟一：去除 <code>function</code>、增加<code>=&gt;</code></h2><p>首先將 <code>function</code> 這個單字去除，然後再參數後 <code>&#123;&#125;</code> 前加上 <code>=&gt;</code> 箭頭函式，就達成初步的精簡；這兩個部分必須同時達成。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> newData = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(newData(<span class="hljs-string">&#x27;data&#x27;</span>));<br></code></pre></div></td></tr></table></figure><h2 id="步驟二：去除-與-return"><a href="#步驟二：去除-與-return" class="headerlink" title="步驟二：去除 {} 與 return"></a>步驟二：去除 <code>&#123;&#125;</code> 與 <code>return</code></h2><p>再來就是要同時去除 <code>&#123;&#125;</code> 與 <code>return</code>，這兩部分是一組的，所以必須同時存在或移除。如此一來就能夠將語法精簡至一行。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> newData = <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item;<br><br><span class="hljs-built_in">console</span>.log(newData(<span class="hljs-string">&#x27;data&#x27;</span>));<br></code></pre></div></td></tr></table></figure><h2 id="步驟三：只有一個參數時，可去除"><a href="#步驟三：只有一個參數時，可去除" class="headerlink" title="步驟三：只有一個參數時，可去除 ()"></a>步驟三：只有一個參數時，可去除 <code>()</code></h2><p>再來如果你的參數只有一個，就可以將包覆參數的 <code>()</code> 移除。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> newData = <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item;<br><br><span class="hljs-built_in">console</span>.log(newData(<span class="hljs-string">&#x27;data&#x27;</span>));<br></code></pre></div></td></tr></table></figure><p>但是如果函式沒有任呵參數的話，就必須留下括號。範例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-keyword">let</span> newData = <span class="hljs-function">() =&gt;</span> <span class="hljs-string">&#x27;data&#x27;</span>;<br><br><span class="hljs-built_in">console</span>.log(newData());<br></code></pre></div></td></tr></table></figure><p>如果有兩個參數以上，也要加入括號。這樣才能夠使用逗號 <code>,</code> 區分參數。</p><h2 id="清楚了嗎？最後再來用-map-示範一次吧！"><a href="#清楚了嗎？最後再來用-map-示範一次吧！" class="headerlink" title="清楚了嗎？最後再來用 map() 示範一次吧！"></a>清楚了嗎？最後再來用 <code>map()</code> 示範一次吧！</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 傳統寫法</span><br><span class="hljs-keyword">let</span> newData = data.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> item;<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(newData);<br><br><span class="hljs-comment">// 步驟一：去除 function、增加 =&gt;</span><br><span class="hljs-keyword">let</span> newData = data.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item;<br>&#125;)<br><br><span class="hljs-built_in">console</span>.log(newData);<br><br><span class="hljs-comment">// 步驟二：去除 &#123;&#125; 與 return</span><br><span class="hljs-keyword">let</span> newData = data.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item );<br><br><span class="hljs-built_in">console</span>.log(newData);<br><br><span class="hljs-comment">// 步驟三：只有一個參數時，可去除 ()</span><br><span class="hljs-keyword">let</span> newData = data.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item );<br><br><span class="hljs-built_in">console</span>.log(newData);<br></code></pre></div></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>最後還是要提一下，將語法精簡固然很好，不過如果要跟其他人一同協作，還是需要考量一下其他人的 coding style；不過講好就好，我個人是滿喜歡精簡寫法的，畢竟能夠節省空間，除了很有成就感（？）看了也舒適。</p><p>另外 C# 似乎也有箭頭函式，所以不是 JavaScript 獨有的。不過這篇就以 JavaScript 示範為主，就給大家參考一下。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://blog.niclin.tw/2019/09/30/arrow-function-in-javascript/">ES6 箭頭函式 (Arrow functions) « Nic Lin&#39;s Blog</a></li><li><a href="https://wcc723.github.io/javascript/2017/12/21/javascript-es6-arrow-function/">鐵人賽：箭頭函式 (Arrow functions) | 卡斯伯 Blog - 前端，沒有極限</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>箭頭函式</tag>
      
      <tag>Arrow functions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ActivePresenter，螢幕錄影好幫手</title>
    <link href="/ActivePresenter/"/>
    <url>/ActivePresenter/</url>
    
    <content type="html"><![CDATA[<p>前陣子在練習 <a href="https://en.wikipedia.org/wiki/Kata">Kata</a>，需要運用錄影程式將我寫 code 過程記錄下來。原本我都是使用 Windows 內建的 Win + G 錄影功能，可能是我不會用，錄影程式只會 Focus 在 VS code。目前我都是使用 <a href="https://atomisystems.com/activepresenter/free-edition/">ActivePresenter</a> 這個錄影程式，所以就來寫寫對它的介紹。</p><a id="more"></a><h2 id="軟體資訊"><a href="#軟體資訊" class="headerlink" title="軟體資訊"></a>軟體資訊</h2><blockquote><p><strong>軟體名稱</strong>：ActivePresenter<br><strong>官方網站</strong>：<a href="https://atomisystems.com/activepresenter/free-edition/">https://atomisystems.com/activepresenter/free-edition/</a><br><strong>官方下載</strong>：<a href="https://atomisystems.com/download/">https://atomisystems.com/download/</a></p></blockquote><h2 id="錄製教學"><a href="#錄製教學" class="headerlink" title="錄製教學"></a>錄製教學</h2><p>開啟 ActivePresenter 後，點擊左邊選單「錄製視頻」。</p><p><img src="https://i.imgur.com/qX4na4V.png" alt="按下錄製視頻"></p><p>點擊後會彈跳以下視窗，可以選擇要錄製全部範圍或是部分範圍；或是選擇開啟攝像頭、錄音，如果不要關閉即可。點擊「REC」開始錄影。</p><p><img src="https://i.imgur.com/RSVNS4u.png" alt="點擊 REC 開始錄製"></p><p>會開始 3 秒的倒數計時，並提示如果要結束錄影按下鍵盤「Ctrl + End」即可。</p><p><img src="https://i.imgur.com/4jMtDKe.png" alt="倒數計時"></p><p>結束錄影後，會自動出現它的剪輯模式，我自己是沒有使用過它的剪輯模式，大家有興趣可以試試看。另外，如果你有開啟攝像頭，就可在此調整要將攝像頭拍出來的你放在哪個位置 XD</p><p><img src="https://i.imgur.com/iJT1wzQ.png" alt="自動開啟剪輯程式"></p><p>再來就是要匯出影片了，點擊頂部選單「導出」後按下「視頻」，就會出現匯出相關設定視窗了。就可以針對匯出影片設定。接著就能開心匯出囉！</p><p><img src="https://i.imgur.com/ABpaIfv.png" alt="匯出"></p>]]></content>
    
    
    <categories>
      
      <category>工具推薦</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ActivePresenter</tag>
      
      <tag>Kata</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你要開始才有機會變得很厲害：我是如何開始學習 Git 的？</title>
    <link href="/start-to-act/"/>
    <url>/start-to-act/</url>
    
    <content type="html"><![CDATA[<p>今天看著自己的 Hackmd 檢視一下今年的學習紀錄（也是今年才開始使用 Hackmd），接著發現了年初的 Git 筆記，發現自己差不多看懂了至少八成（原本感覺超難 XD），因此來有感而發寫了這篇文章。</p><p><img src="https://i.imgur.com/Urldmwr.jpg" alt="開始行動"></p><a id="more"></a><h2 id="回憶當初，Git-與-GitHub-傻傻分不清楚的故事"><a href="#回憶當初，Git-與-GitHub-傻傻分不清楚的故事" class="headerlink" title="回憶當初，Git 與 GitHub 傻傻分不清楚的故事"></a>回憶當初，Git 與 GitHub 傻傻分不清楚的故事</h2><p>雖然我念資管系，但我第一次使用 GitHub（不是 Git 喔 XD）是在大三下的時候，而且我上傳檔案那些都是用 GitHub 的介面進行操作，對我幾乎不會指令，那時候我也根本就搞不清楚 GitHub 與 Git 的差別。</p><p>所以那時找面試時，面試官問我會不會 Git，<del>因為我自認使用過 GitHub 所以我就說會</del>，先跟面試過我的面試官們說聲抱歉 XD</p><p>後來到了我實習的公司，使用 GitLab 進行版控時，我也是整個一蹋糊塗，然後我一樣是用介面慢慢將檔案上傳上去 XDDD 這時候雖然我知道 Git 跟這些服務是不一樣的，不過坦白說我還是覺得很難啊！不過也很感謝當時的同事教了我許多，所以也才會有那篇我寫下來的 Git 指令筆記。</p><h2 id="開始學習撰寫指令的歷程"><a href="#開始學習撰寫指令的歷程" class="headerlink" title="開始學習撰寫指令的歷程"></a>開始學習撰寫指令的歷程</h2><p>畢竟快畢業了，也必須為自己未來的技能樹作打算跟準備，那時候看著網路上工程師必備技能，好像是 PTT 吧，看到有網友說「Git 不算是技能吧，根本是標配」（我忘記真實怎麼說了，這句話是記憶中拼湊起來的 XD）我自己心裡感到問號？？我認為這些指令超難啊…</p><p>接下來的事情我想如果你有看我的鐵人賽文章，應該就會知道。我為了想要建立自己的技術部落格，所以開始了 Hexo 的學習之路。架設 Hexo 你必須要使用到指令去進行操作。也讓我開始去習慣觸碰指令的東西。</p><h2 id="好像漸漸上手了？"><a href="#好像漸漸上手了？" class="headerlink" title="好像漸漸上手了？"></a>好像漸漸上手了？</h2><p>其實這就好比健身去刺激肌肉，讓身體開始慢慢習慣愈來愈重的重量。開始接觸這些指令之後，雖然一開始障礙是真的滿多的，不過你就是得用才能繼續維護部落格嘛 XD 也就必須慢慢習慣了。</p><p>雖然在今年五月之前我對部落格的關懷（？）是比較少的，所以相對來說使用指令的時間也沒想像中多。但還是起了一些作用；五月中因為疫情爆發，在家時間變長了，因此就開始更加勤奮學習，那時候我是看六角學院的 YouTube Git 教學，結果我發現前十步我至少都聽得懂…？</p><p>是的，誤打誤撞的學習，雖然覺得有點難，但因為至少我開始有想要來認識 Git，慢慢的也就熟悉了。</p><h2 id="進步是一點一滴累積起來的"><a href="#進步是一點一滴累積起來的" class="headerlink" title="進步是一點一滴累積起來的"></a>進步是一點一滴累積起來的</h2><p>有時候學習不要怕慢，因為慢才能將東西學習的更透徹、紮實，雖然我的 Git 也沒有到多強啦… 還是新手一枚，但是透過每次學習一些，慢慢地就會發現自己跟半年甚至一年前有很大的不同。</p><p>看著那篇筆記，當初我是不懂的打完了那篇筆記，但現在的我看到卻已經能看懂大部分，我想這就是每天進步一些的成果吧。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>有時候開始才是最難的，就像當初感覺學習指令超難的啊，看到指令教學文就先退後 XD 但不管如何，就先開始吧！這句話我之前參加鐵人賽就重複兩次，但我還是想再重複，因為太重要了就來湊滿第三次吧（？）「你不需要一開始就很厲害，但必須要開始才有機會變得很厲害」與大家共勉之！</p><p>也快年底了，讓我們再加把勁努力完成年初所許下的目標！</p>]]></content>
    
    
    <categories>
      
      <category>學習</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>學習歷程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部落格成立九個月了，為它換上新衣吧！</title>
    <link href="/new-theme-fluid/"/>
    <url>/new-theme-fluid/</url>
    
    <content type="html"><![CDATA[<p>相信看到這篇文章的你，如果是過往就有在關注我的部落格，就會發現我們換新主題了！沒錯，在這篇文章發布的同時，我們一併將主題從原先的 Next 更換為 Fluid，為部落格換上新衣！</p><a id="more"></a><p>不知不覺從 2/14 在部落格發布第一篇文章後，過了九個月。雖然中間一度兩個多月沒更新 XD 不過至今包含這篇也累積了 61 篇文章。前幾天好像是在維護部落格時，突然覺得這個主題有些看膩了，畢竟人總還是有些喜新厭舊的，想說最近也接近年底了，那不如就來個新氣象，更換一下主題。</p><h2 id="談談當初主題選用的過程"><a href="#談談當初主題選用的過程" class="headerlink" title="談談當初主題選用的過程"></a>談談當初主題選用的過程</h2><p>說到 Next，可以說是許多 Hexo 的國民主題了！畢竟網路上 Next 的資源確實滿多的，前陣子我才剛完賽的「2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格」所使用的主題正是以 Next 為範例（畢竟我自己就使用這個主題）。</p><p>不過畢竟初使用 Hexo，功力實在不足。那時候連 Next 的設定都用到有些一蹋糊塗了，更何況其他主題在網路上資料又不比 Next 多的時候，發現 Bug 也不太清楚該從何處理，不然其實 Fluid 應該會是我第一個主題（那時候非但不會用，還把主題用到很不滿意 XD）</p><p>接下來我們就來談談改成 Fluid 後，部落格在版面上有什麼改變吧。</p><h2 id="每一頁都增加了-Banner-大圖"><a href="#每一頁都增加了-Banner-大圖" class="headerlink" title="每一頁都增加了 Banner 大圖"></a>每一頁都增加了 Banner 大圖</h2><p>這也是我很喜歡這個主題的一個點，在每一頁上都會放置 Banner，還有打字機的效果可以呈現出想表達的字或是該頁的標題。</p><p><img src="https://i.imgur.com/lxlWx1c.jpg" alt="每一頁都增加了 Banner 大圖"></p><p>基本上這些圖我都是在 <a href="https://pixabay.com/">pixabay</a> 找到的。</p><h2 id="選單"><a href="#選單" class="headerlink" title="選單"></a>選單</h2><p>新主題的網站標題與主選單都應用到頂部了。另外除了選單鏈結外，多了搜尋功能與黑暗模式。</p><p><img src="https://i.imgur.com/v1uwnAc.png" alt="選單"></p><h3 id="搜尋"><a href="#搜尋" class="headerlink" title="搜尋"></a>搜尋</h3><p><img src="https://i.imgur.com/2JV6mPS.png" alt="搜尋"></p><h3 id="黑暗模式"><a href="#黑暗模式" class="headerlink" title="黑暗模式"></a>黑暗模式</h3><p><img src="https://i.imgur.com/9EqjdAi.png" alt="一般模式"></p><p><img src="https://i.imgur.com/8CZNomA.png" alt="黑暗模式"></p><h2 id="關於頁"><a href="#關於頁" class="headerlink" title="關於頁"></a>關於頁</h2><p>關於頁面的部分，Fluid 特邊針對這頁加入作者資訊，因此新的大頭貼與相關鏈結就移駕到這裡。</p><p><img src="https://i.imgur.com/5THPrwP.png" alt="關於頁"></p><h2 id="電腦版網站變成單欄式"><a href="#電腦版網站變成單欄式" class="headerlink" title="電腦版網站變成單欄式"></a>電腦版網站變成單欄式</h2><p>原先的 Next 主題下，部落格在電腦版的呈現方式為兩欄式的左邊文章、右邊選單與個人資訊，不過在新主題則是改為單欄式，僅在文章右側會顯示文章大綱鏈結。</p><p><img src="https://i.imgur.com/rL85bVu.png" alt="電腦版網站變成單欄式"></p><p><img src="https://i.imgur.com/Yo01F5N.png" alt="文章大綱鏈結"></p><h2 id="持續修正與未來會新增的部分"><a href="#持續修正與未來會新增的部分" class="headerlink" title="持續修正與未來會新增的部分"></a>持續修正與未來會新增的部分</h2><p>當然還有要持續修正的部分。以往我自己有個習慣 h2 標題特別用「引用」剛好醒目出來，其實我也不知道這是不是對的 XD（但猜測不對可能居多？）但也就如此習慣下來。</p><p>但…在使用此主題時，h2 + 引用格式的部分似乎出了些問題，那就透過此次機會來把一篇篇文章給改善。</p><p>另外文章字數、閱讀時長也會不正常顯示，但我發現如果我再編輯一次就會正常顯示了。因此就趁修改 h2 那部分一起修正吧。</p><p><img src="https://i.imgur.com/4nMlMK0.jpg" alt="文章字數、閱讀時長與引用"></p><p>再來就是現在首頁文章列表增加圖片縮圖，之後會慢慢補上。不過發現圖片空間似乎有些小問題，這會在之後持續修正。</p><p><img src="https://i.imgur.com/6J2pu8Z.png" alt="圖片顯示不出來"></p><h3 id="404-與友情鏈結"><a href="#404-與友情鏈結" class="headerlink" title="404 與友情鏈結"></a>404 與友情鏈結</h3><p>Fluid 除了基本的 404 頁面外，還有特別針對友情鏈結設計的頁面。所以之後應該會找其他網站一起交換鏈結，不過這部分要等我再設置一下 XD</p><h2 id="Disqus-悄悄地有了完整繁體中文版介面"><a href="#Disqus-悄悄地有了完整繁體中文版介面" class="headerlink" title="Disqus 悄悄地有了完整繁體中文版介面"></a>Disqus 悄悄地有了完整繁體中文版介面</h2><p>這不是我用的，也不是主題關係 XD 是最近發現到的一點。過去雖然可以設定使用繁體中文版，但它有些文字還是會顯示英文，並沒有翻譯到很完全，這點當初還滿希望 Disqus 可以將這點完善。這個願望總算是達成了！</p><p><img src="https://i.imgur.com/rm57git.png" alt="Disqus"></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>這幾天一職再思考部落格的定位，在今年我是將這裡定調為單純的技術性筆記存放區。不過當文章寫久了，慢慢有了更多心得，趁這個機會換了主題後，之後也會嘗試更多不一樣的內容，再請大家敬請期待！</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>透過開發人員工具，使用 JavaScript 語法調整影片速率！（YouTube 適用）</title>
    <link href="/js-video-playbackrate/"/>
    <url>/js-video-playbackrate/</url>
    
    <content type="html"><![CDATA[<p>自己還滿習慣觀看各類型影片時會調高速率，想說比較省時間，再來就完全回不去了 XD 而人性的貪婪總是無法被滿足（？）漸漸地就會想要有更高的速率，但是以 YouTube 來說預設最多到 2 倍速，如果還想往上調高，該怎麼做呢？</p><a id="more"></a><p>有些影片如果要有那個氣氛、或是講話語速本來就很快，其實用原本的速率也行。不過畢竟胃口被養大了，當然還是會想要有個比較習慣的速率 XD 一開始我是使用 Chrome 的一個外掛，我也忘記叫甚麼名字。但後來在網路上看到使用開發人員工具，並利用 JavaScript 修改速率，還滿有趣的。所以就想說純紀錄一下！</p><h2 id="開啟開發人員工具"><a href="#開啟開發人員工具" class="headerlink" title="開啟開發人員工具"></a>開啟開發人員工具</h2><ul><li>Chrome 右上三點水按鈕 —&gt; 更多工具 —&gt; 開發人員工具</li><li>右鍵 —&gt; 檢查</li><li>Ctrl + Shift + I</li></ul><p>開啟之後，選擇 Console，我們要在這裡加上 JavaScript 語法。</p><p><img src="https://i.imgur.com/VPthTJB.png" alt="Console"></p><h2 id="利用-JavaScript-語法設定倍速"><a href="#利用-JavaScript-語法設定倍速" class="headerlink" title="利用 JavaScript 語法設定倍速"></a>利用 JavaScript 語法設定倍速</h2><p>在 Console 貼上以下這段語法：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;video&#x27;</span>).playbackRate = 倍速速率;<br></code></pre></div></td></tr></table></figure><p>把倍速速率改成你要的速率，以下截圖為例，就是設定影片為 2.5 倍速。</p><p><img src="https://i.imgur.com/GjCkQCY.png" alt="利用 JavaScript 語法設定倍速"></p><p>點擊 Enter 後，基本上就能感受到影片速率不同了。</p><p>除了 YouTube 以外，也可以試試看其他平台或許也套用這樣設定。</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://aben20807.blogspot.com/2016/08/1050826-youtube2.html">105.08.26 YouTube超過2倍速播放</a><ul><li>這是使用較為傳統語法，也可以用，剛開始我是使用該文章提供的語法～</li></ul></li><li><a href="https://aishuafei.com/youtube-play-speed/">教你用10倍速度看youtube影片</a><ul><li>這是使用較新的 querySelector 語法，也是今天這篇文章所使用之語法。</li></ul></li></ul><p>P.S. 我所提供之文章頁面是使我學習到這些應用的文章，不代表為最原始出處哦～如果搜尋這段語法，也會發現有許多相關文章。此篇僅是紀錄用！</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript：by referenc（傳參考、傳址）與 by value（傳值）差異</title>
    <link href="/js-by-reference-value/"/>
    <url>/js-by-reference-value/</url>
    
    <content type="html"><![CDATA[<p>今天來探討 JavaScript 中，by referenc（傳參考）與 by value（傳值）差異。</p><a id="more"></a><blockquote><h2 id="by-value（傳值）"><a href="#by-value（傳值）" class="headerlink" title="by value（傳值）"></a>by value（傳值）</h2></blockquote><ul><li>宣告 a 變數後，再宣告變數 b 並將 a 值賦予值給變數 b</li><li>然而要將 a 值賦予值到變數 b 時，會額外開新的記憶體空間</li><li>因此變數 a 與變數 b 是不同的記憶體空間，彼此沒有關聯</li><li>所以後續儘管進行 <code>b++;</code> 運算也不會影響到變數 a</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> b = a;<br>b++;<br><span class="hljs-built_in">console</span>.log(a, b); <span class="hljs-comment">// output: 1 2</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="by-reference（傳參考、傳址）"><a href="#by-reference（傳參考、傳址）" class="headerlink" title="by reference（傳參考、傳址）"></a>by reference（傳參考、傳址）</h2></blockquote><ul><li>宣告 a 變數後，再宣告變數 b 並將 a 值賦予值給變數 b</li><li>但因為兩者皆是物件，物件本身有個記憶體空間，因此 a 變數與 b 變數會指向到同一個物件記憶體空間</li><li>賦予新值給 b.name，此時 a.name 的結果也會被修改</li><li>原因是因為 a 與 b 變數都指向同一個記憶體空間物件</li><li>因此不論修改哪個變數裡面的屬性，都是針對同一個記憶體空間修改</li><li>陣列內的 value 也會跟物件一樣有傳參考特性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = &#123;<br>    name: <span class="hljs-string">&#x27;apple&#x27;</span>,<br>&#125;<br><span class="hljs-keyword">const</span> b = a;<br>b.name=<span class="hljs-string">&quot;banana&quot;</span>;<br><span class="hljs-built_in">console</span>.log(a.name, b.name); <span class="hljs-comment">// output: banana banana</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://www.youtube.com/watch?v=y1odVMpi6dU&t=2297s">JavaScript 常見考題破解：物件傳值？傳參考？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 的 undefined 與 null 有什麼差異？</title>
    <link href="/js-undefined-null/"/>
    <url>/js-undefined-null/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 除了有 Number、String  與 Boolean 等型別外，常見的還有 undefined 與 null 這兩種型別。今天就來介紹這兩者是什麼及其差異。</p><a id="more"></a><blockquote><h2 id="undefined-與-null-值如其型別"><a href="#undefined-與-null-值如其型別" class="headerlink" title="undefined 與 null 值如其型別"></a>undefined 與 null 值如其型別</h2></blockquote><p>兩者值如其型別。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a;<br><span class="hljs-keyword">let</span> b = <span class="hljs-literal">null</span>;<br><span class="hljs-built_in">console</span>.log(a, b); <span class="hljs-comment">// output: undefined null</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="何時出現-undefined？"><a href="#何時出現-undefined？" class="headerlink" title="何時出現 undefined？"></a>何時出現 undefined？</h2></blockquote><ul><li>變數已被宣告，但沒有給予值（未被定義）</li><li>使用 var 宣告時出現的 hoisting 狀況</li></ul><h3 id="變數已被宣告，但沒有給予值（未被定義）"><a href="#變數已被宣告，但沒有給予值（未被定義）" class="headerlink" title="變數已被宣告，但沒有給予值（未被定義）"></a>變數已被宣告，但沒有給予值（未被定義）</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// output: undefined</span><br></code></pre></div></td></tr></table></figure><h3 id="使用-var-宣告時出現的-hoisting-狀況"><a href="#使用-var-宣告時出現的-hoisting-狀況" class="headerlink" title="使用 var 宣告時出現的 hoisting 狀況"></a>使用 var 宣告時出現的 hoisting 狀況</h3><p>JavaScript 編譯時會先將所有變數掃過一輪，先畫出記憶體空間後再賦予值到變數。因此使用 var 宣告變數，會出現在宣告變數前就嘗試取值，但因為還沒賦予值，而出現 undefined 訊息。</p><p>另外，因為有先畫出空間，代表 JavaScript 知道有這個變數，只是還沒到宣告那一行，因此不會出現沒有定義變數訊息 <code>a is not defined</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// output: undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// output: 1</span><br></code></pre></div></td></tr></table></figure><p>但如果利用 let 宣告變數，錯誤訊息會換成 <code>Uncaught ReferenceError: Cannot access &#39;a&#39; before initialization</code>。</p><blockquote><h2 id="何時出現-null？"><a href="#何時出現-null？" class="headerlink" title="何時出現 null？"></a>何時出現 null？</h2></blockquote><ul><li>宣告變數時，賦予值為空值。</li><li>原本變數有值想清空，賦予值為空值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 宣告變數時賦予值為空值</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">1</span>;<br>b = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 將原本變數值清空</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li>六角學院 JS 直播班錄影</li><li><a href="https://www.youtube.com/watch?v=FGdKdn_CnWo">JavaScript 那個 let, const, var 到底差在哪？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 變數宣告：var、let、const 的差異？</title>
    <link href="/javascript-variable-declaration/"/>
    <url>/javascript-variable-declaration/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 的宣告方式，早期以 var 方式宣告居多。其後由於作用域的關係，發展了 let 宣告方式。另外還有 const 常數宣告方式，今天就來介紹不同宣告方式差異。</p><a id="more"></a><blockquote><h2 id="為什麼要宣告變數？"><a href="#為什麼要宣告變數？" class="headerlink" title="為什麼要宣告變數？"></a>為什麼要宣告變數？</h2></blockquote><p>JavaScript 預設如果沒有宣告變數，是不會出錯的，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">a = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// output: 1</span><br></code></pre></div></td></tr></table></figure><p>然而透過這樣沒有透過宣告而成的變數，其實叫作全域屬性。如果遇到以下情況：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    a = <span class="hljs-number">1</span>;<br>&#125;<br>fn();<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// output: 1</span><br></code></pre></div></td></tr></table></figure><p>依然是取得到值的，因為無法確定這個變數來自於哪裡（萬一 code 一多就會很複雜），因此就需要宣告變數會比較合適。</p><blockquote><h2 id="早期宣告變數方式：var"><a href="#早期宣告變數方式：var" class="headerlink" title="早期宣告變數方式：var"></a>早期宣告變數方式：var</h2></blockquote><p>如果使用 var 來宣告變數，用同樣上述範例，就會有不同差異：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>&#125;<br>fn();<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// output: a is not defined</span><br></code></pre></div></td></tr></table></figure><p>此時，只在特定區塊宣告的變數，對外面是沒有作用的。</p><h3 id="var-的問題：能夠被重複宣告"><a href="#var-的問題：能夠被重複宣告" class="headerlink" title="var 的問題：能夠被重複宣告"></a>var 的問題：能夠被重複宣告</h3><p>由於 var 能被重複宣告且不會出現錯誤，萬一未來資料一多有一定機會造成程式碼大亂。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// output: 2</span><br>&#125;<br>fn();<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// output: 1</span><br></code></pre></div></td></tr></table></figure><h3 id="var-的問題：作用域"><a href="#var-的問題：作用域" class="headerlink" title="var 的問題：作用域"></a>var 的問題：作用域</h3><p>雖然離開了作用域，但仍舊能在作用域外取出 i 值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-comment">// console.log(i);</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">// output: 10</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="現在主流做法：let"><a href="#現在主流做法：let" class="headerlink" title="現在主流做法：let"></a>現在主流做法：let</h2></blockquote><p>let 改善了前面 var 問題，如下：</p><h3 id="不能重複宣告-let-變數"><a href="#不能重複宣告-let-變數" class="headerlink" title="不能重複宣告 let 變數"></a>不能重複宣告 let 變數</h3><p>會出現錯誤訊息 <code>Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">2</span>; <span class="hljs-comment">// output: Uncaught SyntaxError: Identifier &#x27;a&#x27; has already been declared</span><br></code></pre></div></td></tr></table></figure><h3 id="區分作用域"><a href="#區分作用域" class="headerlink" title="區分作用域"></a>區分作用域</h3><p>會出現錯誤訊息 <code>Uncaught ReferenceError: i is not defined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-comment">// console.log(i);</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">// output: Uncaught ReferenceError: i is not defined</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="常數宣告方式：const"><a href="#常數宣告方式：const" class="headerlink" title="常數宣告方式：const"></a>常數宣告方式：const</h2></blockquote><p>以 let 來說，宣告後還是能夠重新賦予值：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// output: 1</span><br>a = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// output: 2</span><br></code></pre></div></td></tr></table></figure><p>而 const 則是用於宣告常數，宣告不容易或不會變動的值，像是圓周率、太陽數量。因此宣告後重新賦予值會出錯：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// output: 1</span><br>a = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// output: Uncaught TypeError: Assignment to constant variable.</span><br></code></pre></div></td></tr></table></figure><p>而出錯的部分是指變數重新賦予值時，會改變變數的記憶體指向，並在新的記憶體空間存放新值。</p><p>但若是更改物件內屬性值，因為沒有改變記憶體指向，是可以的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = &#123;<br>    name: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>&#125;;<br>a.name = <span class="hljs-string">&#x27;JS&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>但如果是直接賦予新物件，因為牽涉到記憶體指向，會出現錯誤。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = &#123;<br>    name: <span class="hljs-string">&#x27;JavaScript&#x27;</span>,<br>&#125;;<br>a = &#123;&#125;; <span class="hljs-comment">// output: Uncaught TypeError: Assignment to constant variable.</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://www.youtube.com/watch?v=FGdKdn_CnWo">JavaScript 那個 let, const, var 到底差在哪？</a></li><li>六角 JavaScript 直播班課程內容</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 30：完賽了，下次一起再來參加鐵人賽吧！</title>
    <link href="/hexo30-30/"/>
    <url>/hexo30-30/</url>
    
    <content type="html"><![CDATA[<p>終於到第三十天了，從八月初開始預先撰寫第一篇文章後，經過了許多困難與挑戰（？）總算是撐到完賽了，還是該來點參賽感言吧！</p><a id="more"></a><blockquote><h2 id="參加鐵人賽讓我學習到什麼？"><a href="#參加鐵人賽讓我學習到什麼？" class="headerlink" title="參加鐵人賽讓我學習到什麼？"></a>參加鐵人賽讓我學習到什麼？</h2></blockquote><h3 id="記錄並回憶自己每一段學習歷程"><a href="#記錄並回憶自己每一段學習歷程" class="headerlink" title="記錄並回憶自己每一段學習歷程"></a>記錄並回憶自己每一段學習歷程</h3><p>在我學習架設 Hexo 的旅途上，其實我並沒有太過去紀錄過程中所學歷稱，雖然從二月開始至今不過半年多，但還真有一部分內容有些忘記，還差點產不出來啊！費了一些心力才找到這些實作方法。從這個過程更能理解到撰寫技術型筆記的重要性。</p><h3 id="學習撰寫一系列文章"><a href="#學習撰寫一系列文章" class="headerlink" title="學習撰寫一系列文章"></a>學習撰寫一系列文章</h3><p>在開始撰寫之前，其實有做一些小規劃。之前頂多發幾篇單獨的技術文、或是 2 - 4 篇的系列文章，一次要規劃 30 天還真的要想一下 XDD 要想一下連貫性、怎麼從簡入深、<del>怎麼把內容塞到有 30 篇文章</del>，都是一大挑戰 XD</p><h3 id="又對自己的文章更加謹慎了"><a href="#又對自己的文章更加謹慎了" class="headerlink" title="又對自己的文章更加謹慎了"></a>又對自己的文章更加謹慎了</h3><p>昨天提到，自己的部落格人氣沒這麼高，<del>就算寫錯影響力可能也不高</del>，但是發佈到公開平台後，這點閱率與影響力就不會是開玩笑的了，如果有錯誤就很有可能會影響到許多人，所以會更警惕自己需要更謹慎，也感謝同時在參加六角筆記王時，給我建議的人們。</p><blockquote><h2 id="未完待續…？"><a href="#未完待續…？" class="headerlink" title="未完待續…？"></a>未完待續…？</h2></blockquote><p>是的，本系列預計還會有個幾篇。除了是補充三十天內還沒辦法生出來的內容（之後還會有篇申請 Google 廣告…因為我這邊還沒成功 XD）以及我認為比較適合放在進階篇的內容，我就會放到後續的補充篇。</p><blockquote><h2 id="回復請等我！"><a href="#回復請等我！" class="headerlink" title="回復請等我！"></a>回復請等我！</h2></blockquote><p>有幾位網友有在 IT 邦幫忙上面回復，在這裡先非常感謝大家的支持。這幾天本來有要回復，結果新手任務還沒過無法回復，所以等我過一下新手任務我會回復，不過先統一跟看到現在的讀者們說聲謝謝！</p><blockquote><h2 id="相約下次再見"><a href="#相約下次再見" class="headerlink" title="相約下次再見"></a>相約下次再見</h2></blockquote><p>以上是我這次學習到的，不管你這次有沒有參加鐵人賽，下次我們相約一起參加！而且相信看到這裡的讀者應該都建立起自己的部落格了（？）那就要恭喜你，未來的一年時間就來好好練練寫作的感覺，相信會有許多收穫！</p><p>最後也謝謝看到這裡的你們，你們的支持是我繼續創作的動力。如果你有因此學習到，歡迎留言跟我說～也歡迎大家一起來分享自己成功建立的部落格唷～</p><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10281809">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 29：利用 NPM 來安裝 Next 佈景主題</title>
    <link href="/hexo30-29/"/>
    <url>/hexo30-29/</url>
    
    <content type="html"><![CDATA[<p>在「<a href="https://guiblogs.com/hexo30-5/">Day 5：Hexo 安裝完成後的設定密技，並且為 Hexo 換上新佈景！</a>」篇章內有提到使用 <code>git clone</code> 方式將 Next 佈景主題下載 Hexo。不過 Next 在大約到版本 8 時開始支援 npm 的方式安裝，因此今天就來試試看使用 npm 方式來安裝吧！</p><a id="more"></a><blockquote><h2 id="為什麼要使用-npm-安裝-Next-佈景主題？"><a href="#為什麼要使用-npm-安裝-Next-佈景主題？" class="headerlink" title="為什麼要使用 npm 安裝 Next 佈景主題？"></a>為什麼要使用 npm 安裝 Next 佈景主題？</h2></blockquote><p>之前我們使用 <code>git clone</code> 方式來下載佈景主題，基本上會遇到以下問題：</p><ul><li>透過 git clone 下載回來的主題會被 .git 隱藏，版本控制上較不便<ul><li>刪除主題內的 .git 能解決此問題</li></ul></li><li>但如果使用上述解決方法，後續更新上會比較麻煩</li><li>設定部分成獨立一支檔案，不會因為更新主題後被洗掉</li></ul><blockquote><h2 id="使用-npm-安裝-Next-佈景主題"><a href="#使用-npm-安裝-Next-佈景主題" class="headerlink" title="使用 npm 安裝 Next 佈景主題"></a>使用 npm 安裝 Next 佈景主題</h2></blockquote><p>NPM 安裝指令：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># 安裝最新版本</span><br><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-theme-next@latest</span><br><span class="hljs-comment"># 安裝指定版本</span><br><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-theme-next@8.8.0</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="我想要修改佈景主題設定，怎麼修改？"><a href="#我想要修改佈景主題設定，怎麼修改？" class="headerlink" title="我想要修改佈景主題設定，怎麼修改？"></a>我想要修改佈景主題設定，怎麼修改？</h2></blockquote><p>因為使用 NPM 方式安裝，因此下載的檔案都會下載到 node_modules 目錄裡，主題檔案就不會是在原先的 <code>theme/next</code>。</p><p>此時如果想要針對佈景主題設定進行修改，該怎們做呢？此時我們必須透過指令方式新增：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">cp</span> <span class="hljs-string">node_modules/hexo-theme-next/_config.yml</span> <span class="hljs-string">_config.next.yml</span><br></code></pre></div></td></tr></table></figure><p>此時就會在 Hexo 根目錄看到 <code>_config.next.yml</code> 這支檔案。</p><p>更多這部分設定可到 <a href="https://theme-next.js.org/docs/advanced-settings/custom-files.html">Custom Files</a> 查看。</p><p><img src="https://i.imgur.com/ueKrvdS.png" alt="_config.next.yml"></p><p>基本上就跟原本佈景主題 <code>_config.yml</code> 一樣進行設定即可。</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://hsiangfeng.github.io/hexo/20201101/60919/">(33)試著學 Hexo-番外篇之更新 NexT 主題</a><ul><li>非常感謝參與六角筆記王期間，寫這篇文章的 Ray 助教提醒建議使用 NPM 安裝佈景主題部分～</li></ul></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10281506">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 28：我的部落格沒有人氣怎麼辦？</title>
    <link href="/hexo30-28/"/>
    <url>/hexo30-28/</url>
    
    <content type="html"><![CDATA[<p>嘛，鐵人賽來到第 28 天，<del>同時也宣告我的鐵人賽庫存沒有了</del>（剩下一篇寫到一半的庫存是 for 第 30 天的 XD），所以就要來想想寫什麼主題啦，想著就想到以前寫部落格還滿在意的一點：人氣，那就來談談這個吧。</p><a id="more"></a><blockquote><h2 id="你在意人氣嗎？我曾經很在乎"><a href="#你在意人氣嗎？我曾經很在乎" class="headerlink" title="你在意人氣嗎？我曾經很在乎"></a>你在意人氣嗎？我曾經很在乎</h2></blockquote><p>我是從國小開始寫部落格的，就當作在寫日記那樣，或甚至是看到新聞、小遊戲都會轉貼到自己的 Yahoo! 奇摩部落格，那時單純就覺得新奇好玩。沒想到這樣寫著，有天我的部落格衝到了每日破百人次的觀看，雖然這在現在看來沒什麼，但對於 13 年前小學的我來說無疑是一大肯定。</p><p>其實現在回頭看來，只是當初我認識了一位寫部落格的朋友，剛好那幾天也是國慶連假休息，所以跟我有比較多交流而已（是不是這樣我也忘了，好像是這樣 XD），但也因為如此我開始有些在意了些人氣。</p><h3 id="無限的循環"><a href="#無限的循環" class="headerlink" title="無限的循環"></a>無限的循環</h3><p>後來嘗試又開了幾個部落格，甚至是使用 Discuz! 架設了論壇討論區，常常因為在乎人氣而感到挫敗。我似乎開始陷入了無限的惡性循環，變得很挫折，感覺網站的價值取決於網站的人氣，而非網站擁有的內容。</p><blockquote><h2 id="但是網站的價值，在於內涵"><a href="#但是網站的價值，在於內涵" class="headerlink" title="但是網站的價值，在於內涵"></a>但是網站的價值，在於內涵</h2></blockquote><p>其實就跟人一樣，人是群聚動物，當然會想跟人做朋友、交流，甚至是幻想自己成為人人皆知、家喻戶曉的英雄人物，但我們都知道這不是不可能，卻也不容易。但就算不當英雄，我們還是有自己的價值啊！過好生活、陪伴家人與朋友、分享自己擁有的價值，不也是一種價值嗎？</p><p>就像是網站一樣，全世界有成千上萬個網站，我相信也有許多網站是非常優質的，但畢竟網路世界是如此競爭，本來就沒有理由說網站很優質就一定要很有名，畢竟優質的網站也太多了，但是沒關係啊，因為網站的價值由自身決定，而非全部都是人氣。</p><blockquote><h2 id="現在的我沒有像當初這麼在乎了"><a href="#現在的我沒有像當初這麼在乎了" class="headerlink" title="現在的我沒有像當初這麼在乎了"></a>現在的我沒有像當初這麼在乎了</h2></blockquote><p>一開始我寫技術部落格的時候，也在想人氣一定不會很高，然而一開始還是有些稍微彆扭。但沒關係啊，我只是將我的學習歷程放到網路上而已，有沒有人來看就隨緣，反正我做好我的內容、盡量正確的筆記，當有緣人造訪到我的部落格，希望能夠幫助他解惑。</p><p>如果你是靠這行賺錢的，在意人氣另當別論。但如果你跟我一樣單純的撰寫技術部落格、分享自己所學，那就一起專注在分享上面吧！像我自己的部落格，到目前也是小小的而已，不過只要能夠多幫助到一個人，我們的部落格就有存在的價值。</p><p>啊如果真的邊緣到只有你一個人看勒？沒關係，你依舊幫助了你自己！</p><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10281178">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 27：如何寫出一篇還不錯的技術文章？</title>
    <link href="/hexo30-27/"/>
    <url>/hexo30-27/</url>
    
    <content type="html"><![CDATA[<p>身為技術人，我想大家都有在網路上 Google 尋找資料的經驗。從許多熱心網友的技術文章中，找到我們需要的方向。而現在我們踏上了寫作的這條路上，當我們將文章發佈到網路上，勢必內容就要讓其他網友也能看得懂。今天就要來介紹撰寫技術文章時，可以掌握的幾個技巧。</p><a id="more"></a><blockquote><h2 id="先列出文章大綱"><a href="#先列出文章大綱" class="headerlink" title="先列出文章大綱"></a>先列出文章大綱</h2></blockquote><p>我覺得列出文章大綱滿重要的，根據自己經驗，沒有事先列出文章大綱的內容通常在撰寫上，思緒會有點亂、甚至是前後邏輯也會有一些差異，因為想到一就寫一、想到二再寫二，一不小心就會前後文不連貫。</p><p>列出大綱的好處在於掌握整篇文章所要表達的內容，思緒會比較清楚，撰寫上就能夠寫出比較連貫的前後文。</p><h3 id="大綱範例"><a href="#大綱範例" class="headerlink" title="大綱範例"></a>大綱範例</h3><p>以「Day 1：為什麼工程師要建立自己的技術部落格？」為例，可能就可以先列出 h2、h3 標題，再撰寫各段內容：</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs clean">## 先來一段我自己的心路歷程吧！<br><br>### 起因源自於我想要做一個 side project<br>... 內容 ...<br><br>### 既然要記錄內容，似乎可以試試看撰寫部落格？<br>... 內容 ...<br><br>### 將我所會的透過文章展示出來<br>... 內容 ...<br><br>## 為自己的學習歷程找到容身之處<br><br>### 公開到網路會對自己的筆記更為謹慎<br>... 內容 ...<br><br>### 你的筆記可以幫助到更多人<br>... 內容 ...<br><br>## 結語：使用 Hexo 架設你的技術部落格<br>... 內容 ...<br></code></pre></div></td></tr></table></figure><blockquote><h2 id="開始撰寫文章，但一開始可以不用這麼完美"><a href="#開始撰寫文章，但一開始可以不用這麼完美" class="headerlink" title="開始撰寫文章，但一開始可以不用這麼完美"></a>開始撰寫文章，但一開始可以不用這麼完美</h2></blockquote><p>大綱擬定好後，就能夠開始撰寫文章內容。基本上想到什麼就可以寫進去，這段時間可以不用特別去在意說一定要寫到很好，因為文章撰寫完成之後，還會不斷調整修正，最終再發佈到網路上，因此在撰寫時我們可以專注在內容的撰寫上，之後再進行修正。</p><p>當然如果在寫作過程當中突然有新的靈感想要進行修正，也是可以的。另外如果你是一天寫一個段落，那其實就可以在寫完該段落之後調整段落內容了。</p><blockquote><h2 id="搭配範例，善用情境與條列式說明"><a href="#搭配範例，善用情境與條列式說明" class="headerlink" title="搭配範例，善用情境與條列式說明"></a>搭配範例，善用情境與條列式說明</h2></blockquote><p>寫技術文章，主角之一就是語法、程式碼或是指令。如果單純只有敘述，對於新手來說可能有點難理解；但如果只有語法範例，那對於新手來說更是災難。因此範例與情境說明的搭配使用，我認為是最清楚的。</p><p>我自己撰寫一篇技術文章時，如果需要使用語法佐證，通常會自己撰寫一個、並確認語法能夠跑出來的情況之下，就會將語法貼到文章內；再來善用情境與條列式說明，能夠減輕新手的抽象感，讓新手更容易理解文章所想表達的內容。</p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p><img src="https://i.imgur.com/gtQFfWa.png" alt="搭配範例，善用情境與條列式說明"></p><ul><li>利用段落，表達情境</li><li>利用條列式說明：<ul><li>可以列點說明各個細項</li><li>或是像範例中說明目前情境所遇到的狀況</li></ul></li></ul><blockquote><h2 id="善用文章樣式"><a href="#善用文章樣式" class="headerlink" title="善用文章樣式"></a>善用文章樣式</h2></blockquote><p>文章撰寫完後，會開始整理文章內容。此時我們可以善用像是粗體等文章樣式，將重點標註起來；如此一來讀者閱讀文章時，比較能夠輕易看見本篇文章所要強調的重點。</p><h3 id="範例-1"><a href="#範例-1" class="headerlink" title="範例"></a>範例</h3><blockquote><p><strong>Sass / SCSS 的編譯方式是由上而下編譯的</strong>，因為這個特性，我們必須把變數放置在使用變數之前。以下列這個錯誤例子來舉例：</p></blockquote><p>利用粗體，將句子重點標示出來。</p><blockquote><h2 id="取一個適合的文章標題吧！"><a href="#取一個適合的文章標題吧！" class="headerlink" title="取一個適合的文章標題吧！"></a>取一個適合的文章標題吧！</h2></blockquote><p>通常來說文章撰寫前，我會先訂一個文章標題；但是在完成文章後，我還會針對文章標題進行調整，可能是撰寫到後面，想到了更好、更適合的文章標題？或是寫到一半發現篇幅太長，想拆分成不同篇文章撰寫。</p><h3 id="範例-2"><a href="#範例-2" class="headerlink" title="範例"></a>範例</h3><p>這裡也舉例幾個 NG、好標題對照組，取標題時能夠避開這些雷區：</p><ul><li><del>網頁編輯器擴充工具介紹：Emmet</del> —&gt; <strong>想要提升寫 code 效率，一定要認識的寫網頁好幫手 - Emmet</strong><ul><li>比起單純的「Emmet 介紹」，可以多加敘述 Emmet 可以幫助我們解決什麼？（提升寫 code 效率）</li></ul></li><li><del>Bootstrap 5 新手教學實戰營 - Week 1</del> —&gt; <strong>Bootstrap 5 起手式！如何套用至網頁、確認套用成功？</strong><ul><li>比起單純只寫課程的「週數」，可以直接在標題上敘述學習到的內容（起手式、如何成功套用到網頁）</li></ul></li><li><del>Flex 筆記：Flex-direction 與主軸、交錯軸</del> —&gt; Flex 強大排版術：flex-direction 如何應用？主軸、交錯軸附圖解說！<ul><li>原本標題雖已提到相關字詞，仍舊能以較為白話的方式敘述，閱讀起來不那麼死板，讀者也能夠從標題得知內文有附圖解說</li></ul></li></ul><blockquote><h2 id="持續檢查、最佳化文章，發佈！"><a href="#持續檢查、最佳化文章，發佈！" class="headerlink" title="持續檢查、最佳化文章，發佈！"></a>持續檢查、最佳化文章，發佈！</h2></blockquote><p>發佈之前，持續檢查是否有錯字、多閱讀個幾遍，如有不順的語意可以再進行修正。不斷的反覆閱讀與最佳化文章，直到自己認為可以發佈到網路上了，就勇敢的發佈吧！</p><p>發佈文章後不會是結束，持續的關注網友給予的反饋、式情況調整以及更新文章內容，也是很重要的哦～</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li>參加 <a href="https://hackmd.io/@o9ZLEqeZQ8e7u_JXSPfjsQ/Sk95CsMAu/https%3A%2F%2Fhackmd.io%2FFJZ7s0OHRv-kClQg_sLEPQ%3Fview">六角筆記王</a> 心得之一</li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10280839">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 26：如何培養日常寫作習慣？</title>
    <link href="/hexo30-26/"/>
    <url>/hexo30-26/</url>
    
    <content type="html"><![CDATA[<p>建立一個部落格其實相對來說是很簡單的事情，但開設後的經營與持續的文章撰寫更是後續需要花費許多時間維持的事情，但或許一開始會很有熱情想不斷撰寫文章，但往往會因熱情消耗或是時間不夠而導致部落格漸漸荒廢，還滿可惜的。因此今天來談談如何讓寫作培養成一種日常。</p><a id="more"></a><blockquote><h2 id="一開始不用給自己太多壓力"><a href="#一開始不用給自己太多壓力" class="headerlink" title="一開始不用給自己太多壓力"></a>一開始不用給自己太多壓力</h2></blockquote><p>通常經營部落格，會去參考別人是怎麼寫作的。而剛開始撰寫部落格時，或多或少會覺得別人怎麼這麼厲害？我是不是也要跟他們一樣，不然我很弱？他怎麼寫這麼多，我是不是也要擠出更多內容？他每天都在更新，我也要嗎？但我沒有這麼多時間，該怎麼辦？</p><p>然而每個人寫作風格不同、習慣字數不同、開始寫部落格的年齡不同，有非常多因素在影響，有些人寫得多是因為寫久了，自然而然比較上手；有些人甚至就是專職的，那當然要盡力做到最好。因此一開始跟著自己的腳步走就好了，不用給自己太大的壓力。</p><blockquote><h2 id="儘管時間不多，也能積沙成塔"><a href="#儘管時間不多，也能積沙成塔" class="headerlink" title="儘管時間不多，也能積沙成塔"></a>儘管時間不多，也能積沙成塔</h2></blockquote><p>每個人生活環境與包袱不同，擁有的時間就會不盡相同。但難道這就沒有辦法嗎？顯然還是有方法能夠解決的。</p><p>那就是拆分寫作任務，每天只要寫一點點，累積出的內容也是相當無可限量的。</p><h3 id="問問自己…"><a href="#問問自己…" class="headerlink" title="問問自己…"></a>問問自己…</h3><ul><li>能夠每天花個五分鐘，閱讀技術文章嗎？（哪怕只有一段也好）</li><li>能夠每天花個五分鐘，撰寫讀後心得、你學習到的知識點嗎？（哪怕只寫出一點內容也好）</li><li>工具隨意挑，紙本筆記、電子的 Line 個人群組、記事本、… 任何能記錄文字的工具都可以</li></ul><p>如果可以的話，就夠了。一開始目標不用訂太大，訂出自己絕對能夠完成的範圍，一整天有 1440 分鐘，拿出 10 分鐘做這些事情就好。</p><p>或許有點慢，但我們不求日更，只求慢慢累積內容，直到成形成一個完整的文章，你就會發現雖然每天只花個短短的十分鐘，但所累積出來的成果也是不容小覷的；而且如果你是新手，會愈來愈上手，一個月後就算每天一樣只能拿出十分鐘，也能夠比起一個月前還得心應手了。</p><blockquote><h2 id="我好懶？沒事的，只要跨出第一步就好"><a href="#我好懶？沒事的，只要跨出第一步就好" class="headerlink" title="我好懶？沒事的，只要跨出第一步就好"></a>我好懶？沒事的，只要跨出第一步就好</h2></blockquote><p>以我自己來舉例，我目前是一週去健身房三天，經常在要起步去運動之前會覺得好懶喔，幹嘛要早起去受虐啊，在家多睡一點不是很好嗎 QQ 可是通常只要出門去、搭上公車，通常念頭就打消了，而是去期待待會健身所帶來的充實日常。</p><p>寫作也是相同道理，在寫作之前可能都會有個百般的不願意，覺得今天好懶好累，但其實只要跨出第一步真正去做下去，就會覺得沒什麼了。反而還會心想剛剛怎麼浪費這麼多時間在猶豫要不要做 XD</p><p>會懶還有一個原因，就是可能要做很多事情。因此前面才會提到任務拆解，當把任務變小了，壓力自然不大，我們也就比較不會一直在猶豫。反正就多花個十分鐘而已嘛！</p><blockquote><h2 id="累了就休息，但要記得再次起步"><a href="#累了就休息，但要記得再次起步" class="headerlink" title="累了就休息，但要記得再次起步"></a>累了就休息，但要記得再次起步</h2></blockquote><p>不過說真的同一件事情做久了偶爾還是會匱乏的，所以如果真的累了也沒關係、想休息個一兩天也 OK，但重點是記得休息夠了還要繼續起步。</p><p>我們也可能因為一些外在因素或是對自己所寫的內容不信心，而想放棄寫作。不過記住寫作這件事情是長久的，每個階段所遇到的事情本來就都不一樣，這時請停下腳步，回想自己當初寫部落格的原因是為何？紀錄學習歷程、技術內容、讀書心得？回歸初心後，在出發也不遲。</p><blockquote><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2></blockquote><p>「你不需要一開始就很厲害，但必須要先開始才有機會變得很厲害」這句話與大家共勉，將寫作加入日常在一開始或許會有些不習慣，但慢慢去習慣它，我相信會愈來愈上手的，大家一起加油！</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li>參加 <a href="https://hackmd.io/@o9ZLEqeZQ8e7u_JXSPfjsQ/Sk95CsMAu/https%3A%2F%2Fhackmd.io%2FFJZ7s0OHRv-kClQg_sLEPQ%3Fview">六角筆記王</a> 心得之一</li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10280434">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 25：我可以寫什麼內容到部落格？</title>
    <link href="/hexo30-25/"/>
    <url>/hexo30-25/</url>
    
    <content type="html"><![CDATA[<p>有了自己的平台之後，接下來就能夠開始<del>暢所欲言胡搞瞎搞</del>，喔不是啦是將自己所學分享出來，但是我可以撰寫什麼內容到部落格呢？</p><a id="more"></a><blockquote><h2 id="我是新手，我怕會在意別人的眼光"><a href="#我是新手，我怕會在意別人的眼光" class="headerlink" title="我是新手，我怕會在意別人的眼光"></a>我是新手，我怕會在意別人的眼光</h2></blockquote><p>或許你是一位新手，覺得自己撰寫的文章沒有這麼厲害，甚至會怕說寫出來的文章太簡單、沒有含金量之類的，但又如何呢？就像你知道你是新手，代表說其實也有許多跟你一樣是新手的人，或許就因為你知道你這個新手該學什麼，寫了這篇文章，而跟你一樣是新手的網友因為看到你的文章而受益了，這不也是種價值嗎？</p><p>所以，放心的撰寫你的技術文章，就當作再寫筆記那樣就好。</p><blockquote><h2 id="可以先選定幾個主題"><a href="#可以先選定幾個主題" class="headerlink" title="可以先選定幾個主題"></a>可以先選定幾個主題</h2></blockquote><p>以我來講，初期我設定這三個為我想撰寫的主題。但你可以視情況進行變動：</p><ul><li>網站開發</li><li>學習筆記</li><li>個人成長</li></ul><p>基本上我的部落格都環繞在這幾個主題在走，當然不一定一定要都是這個主題，偶爾來篇遊記也不錯。但主要還是以你想定調的主題為主。</p><blockquote><h2 id="學習筆記該寫什麼"><a href="#學習筆記該寫什麼" class="headerlink" title="學習筆記該寫什麼"></a>學習筆記該寫什麼</h2></blockquote><h3 id="網站開發或程式相關"><a href="#網站開發或程式相關" class="headerlink" title="網站開發或程式相關"></a>網站開發或程式相關</h3><p>以 CSS 語法的技術文章為舉例好了，假設你今天想介紹 <code>display</code> 排版方式，就能夠利用自己的話來闡述相關運作原理，以及透過語法範例來進行輔助。</p><p>我自己通常寫文章時，會自己寫一份範例來去佐證。此時你不但刻意練習一次，也嘗試將自己所繪的知識點透過分享，重新複習與思考過一次。</p><h3 id="學習歷程"><a href="#學習歷程" class="headerlink" title="學習歷程"></a>學習歷程</h3><p>如果你有任何學習歷程，比方說在學校學了些什麼、讀書心得、參愈了什麼課程、參與了怎麼樣的技術會議、最近有什麼新體驗（跟技術無關也沒關係）、面試經歷、…等等不勝枚舉，這些有關於你的個人成長都能放在你的部落格。</p><blockquote><h2 id="增加參考資料"><a href="#增加參考資料" class="headerlink" title="增加參考資料"></a>增加參考資料</h2></blockquote><p>撰寫一篇筆記，或多或少會參考網路上的內容，很建議大家如果有參考到的文章可以蒐集到那篇文章的參考資料篇章中，一來是尊重原創作者，二來是你除了擁有自己消化過的文章之外，也蒐集了許多當初你所參考的文獻資料，如果之後要複習，更能夠輕鬆掌握。</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>你的部落格，就是你的個人品牌，也就代表著你，你能夠在這個平台盡情的展現自己、分享自己的價值，不用怕寫錯，多多嘗試總會進步的。</p><p>「你不需要一開始就很厲害，但必須要開始才能更加厲害」，用這句話來勉勵你我，經營部落格寫作這條路上，我們一起加油，你並不孤單！</p><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10280044">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 24：如何還原備份到 Github 另外一個分支的 Hexo 資料？</title>
    <link href="/hexo30-24/"/>
    <url>/hexo30-24/</url>
    
    <content type="html"><![CDATA[<p>昨天我們嘗試將 Hexo 備份到儲存庫另外一個分支，但如果哪一天真正需要使用這個備份還原本機環境怎麼辦？今天就來實際操作一次，以備下次需要時，就有還原經驗了。</p><a id="more"></a><blockquote><h2 id="將儲存庫內容下載回來"><a href="#將儲存庫內容下載回來" class="headerlink" title="將儲存庫內容下載回來"></a>將儲存庫內容下載回來</h2></blockquote><p>首先，執行以下指令將儲存庫下載回來自己的電腦：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /c/ # cd /選擇要存放專案目錄的位置/<br>git clone 你的儲存庫 Clone 位置<br><span class="hljs-meta">#</span><span class="bash"> Clone 位置：https://github.com/你的 Github 帳號/你的 Github 帳號.github.io.git</span><br></code></pre></div></td></tr></table></figure><p>下載回來後，就能夠看到剛剛選擇存放的位置看到下載回來的專案目錄。</p><blockquote><h2 id="切換分支"><a href="#切換分支" class="headerlink" title="切換分支"></a>切換分支</h2></blockquote><p>由於專案有兩個目錄，下載回來的專案預設可能會是 Github Pages 指向的分支（gh-pages），因此我們要切換到另外一個分支（master）此時利用 Git 指向到該目錄，在開始進行動作：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /下載回來的 Hexo 目錄/<br>git checkout master # git checkout 你用來放置備份的分支<br></code></pre></div></td></tr></table></figure><p>切換好後，如果檔案由原先的各個被產生的靜態網頁變成像是過去在本機設定 Hexo 時的那些檔案，就代表切換成功囉！</p><blockquote><h2 id="將套件與佈景安裝回來"><a href="#將套件與佈景安裝回來" class="headerlink" title="將套件與佈景安裝回來"></a>將套件與佈景安裝回來</h2></blockquote><h3 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h3><p>node_modules 目錄放置的是我們平常安裝的套件，因為備份時沒有備份到它，此時我們要重新安裝回來。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install<br></code></pre></div></td></tr></table></figure><p>執行完指令後，開啟根目錄下的 package.json 檔案，紀錄我們過去安裝的一些套件，也請將這些套件安裝回來。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git install 套件名稱 --save<br></code></pre></div></td></tr></table></figure><h3 id="佈景主題"><a href="#佈景主題" class="headerlink" title="佈景主題"></a>佈景主題</h3><p>重新將 Next 下載回來：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git clone https://github.com/theme-next/hexo-theme-next themes/next<br></code></pre></div></td></tr></table></figure><blockquote><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2></blockquote><p>重新 <code>hexo g</code>、<code>hexo s</code> 後，就可以看看是否有還原成功囉！不過一些設定可能還是要再做一下，並且檢查是否還有一些地方需要進行修正。</p><p><img src="https://i.imgur.com/d6BDbUu.png" alt="還原成功"></p><p>恭喜大家成功嘗試還原了一次備份，如此一來不管是電腦當機或想在不同裝置上操作 Hexo 內容，都可以利用這個方式來操作囉～</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://www.dazhuanlan.com/imdq/topics/965923">Hexo備份至GitHub</a></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10279635">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 23：將你的 Hexo 使用 Git 指令備份到 Github 儲存庫另一個分支</title>
    <link href="/hexo30-23/"/>
    <url>/hexo30-23/</url>
    
    <content type="html"><![CDATA[<p>我們都說備份很重要，因此定時備份 Hexo 就是我們必學的其中一個功課之一啦！我們對 Hexo 的更新與編輯都是在本機上運行，萬一有一天電腦可能一個不小心當機資料都沒有了，而 Hexo 本身的編輯資料也葬送其中的話… 就會有點麻煩啦！因此今天要跟大家介紹該如何利用 Git 指令備份到 Github 儲存庫另一個分支。</p><a id="more"></a><blockquote><h2 id="首先我們先來認識「-gitignore」這個檔案"><a href="#首先我們先來認識「-gitignore」這個檔案" class="headerlink" title="首先我們先來認識「.gitignore」這個檔案"></a>首先我們先來認識「.gitignore」這個檔案</h2></blockquote><h3 id="並不是所有檔案都要推送上去備份"><a href="#並不是所有檔案都要推送上去備份" class="headerlink" title="並不是所有檔案都要推送上去備份"></a>並不是所有檔案都要推送上去備份</h3><p>我們並不是所有目錄或是檔案都要推送上去的，例如像是目錄 public，這個目錄即是 Hexo 產生出的靜態檔，因此平常我們在執行部署指令 <code>hexo d</code> 時，已經將這些檔案推送到 Github Pages 了，也就是我們平常所瀏覽的部落格。</p><p>另外還有像是 node_modules 等與其他目錄或檔案，也基本上都是不用特別去備份，主要我們需要備份的是平常所編輯的 .md 檔案、網站設定檔。此時我們就要利用「.gitignore」這個檔案來幫我們過濾掉不需要部署上去的部分。</p><h3 id="gitignore-用途"><a href="#gitignore-用途" class="headerlink" title=".gitignore 用途"></a>.gitignore 用途</h3><p>這個檔案位於根目錄，用於 Git 部署檔案上去時，符合裡面的目錄或檔案條件時，就不會被推送上去。Hexo 本身就有撰寫好預設幾個不用推送上去的目錄或檔案：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">.DS_Store</span> <span class="hljs-comment"># 不推送 .DS_Store 檔案</span><br><span class="hljs-string">Thumbs.db</span> <span class="hljs-comment"># 不推送 Thumbs.db 檔案</span><br><span class="hljs-string">db.json</span> <span class="hljs-comment"># 不推送 Tdb.json 檔案</span><br><span class="hljs-string">*.log</span> <span class="hljs-comment"># 不推送副檔名為 .log 的檔案（星號為萬用字元，代表任何數目的字元）</span><br><span class="hljs-string">node_modules/</span> <span class="hljs-comment"># 不推送目錄 node_modules 與其內檔案</span><br><span class="hljs-string">public/</span> <span class="hljs-comment"># 不推送目錄 public 與其內檔案</span><br><span class="hljs-string">.deploy*/</span> <span class="hljs-comment"># 不推送開頭為 .deploy 的目錄</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="設定本地儲存庫"><a href="#設定本地儲存庫" class="headerlink" title="設定本地儲存庫"></a>設定本地儲存庫</h2></blockquote><p>若你還沒學過 Git（只有使用指令進行過 Hexo 操作），以下部分可以好好學起來，往後如果使用到 Git，以下指令將會很常用。基本上要將檔案部署到 Github 都會是使用以下指令。</p><h3 id="建立本地儲存庫"><a href="#建立本地儲存庫" class="headerlink" title="建立本地儲存庫"></a>建立本地儲存庫</h3><p>記得我們在 Github 建立過儲存庫這件事情吧？你可以把它理解成是遠端的儲存庫，而如果我們要將檔案推送到遠端儲存庫，我們自己也要建立一個本地儲存庫。</p><p>執行本地儲存庫的指令為：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 指向自己的 Hexo</span><br>cd /c/30blog/ # cd /你的 Hexo 目錄位置/<br><span class="hljs-meta">#</span><span class="bash"> 建立本地儲存庫</span><br>git init<br></code></pre></div></td></tr></table></figure><p><code>git init</code> 的意思是在這個目錄建立 Git 儲存庫，讓整個目錄可以被 Git 進行追蹤。</p><p><img src="https://i.imgur.com/km6TWn3.png" alt="建立儲存庫"></p><p>建立後可以在自己的 Hexo 目錄出現一個 .git 目錄：</p><p><img src="https://i.imgur.com/7z8iGlH.png" alt=".git 目錄"></p><p>這個目錄是一個被隱藏的檔案，所以你如果點進來沒有看到的話，就要設定一下能夠顯示被隱藏的項目。以 Windows 為例，點選頂部選單的檢視後，將「隱藏的項目」勾選即可。</p><p><img src="https://i.imgur.com/ltiq16L.png" alt="勾選隱藏的項目"></p><h3 id="與遠端儲存庫進行連接"><a href="#與遠端儲存庫進行連接" class="headerlink" title="與遠端儲存庫進行連接"></a>與遠端儲存庫進行連接</h3><p>ok，再來就要連接遠端儲存庫了。首先到你放置 Hexo 的 Github 儲存庫複製你的儲存庫 Clone：</p><p><img src="https://i.imgur.com/1JGZQ2O.png" alt="儲存庫 Clone"></p><p>再來執行以下指令，來連接 Github 儲存庫：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git remote add origin 你的儲存庫 Clone 位置<br><span class="hljs-meta">#</span><span class="bash"> Clone 位置：https://github.com/你的 Github 帳號/你的 Github 帳號.github.io.git</span><br></code></pre></div></td></tr></table></figure><p>基本上執行後不會給甚麼提示訊息。如果要看有沒有成功，可以到 /.git/config 這個檔案查看：</p><p><img src="https://i.imgur.com/gwnCCDF.png" alt="查看是否成功設定遠端儲存庫資訊"></p><blockquote><h2 id="commit-你的檔案"><a href="#commit-你的檔案" class="headerlink" title="commit 你的檔案"></a>commit 你的檔案</h2></blockquote><p>基本上建議是每新增一篇文章或是有任何編輯時都可以 commit 一下，以確保最新版本都有被備份到。</p><h3 id="將檔案從工作目錄移入索引區"><a href="#將檔案從工作目錄移入索引區" class="headerlink" title="將檔案從工作目錄移入索引區"></a>將檔案從工作目錄移入索引區</h3><p>專案目錄被 Git 追蹤後，當你有任何檔案的新增或是編輯，就會被歸類到所謂的工作目錄（代表跟前一版本有不同的更動之處），再來我們要將檔案加入到索引，以方便接下來 commit（更新版本）時，好歸類這些檔案都是屬於這次的 commit（更新）。</p><p>此時要執行的指令為：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git add .<br></code></pre></div></td></tr></table></figure><p>這個指令就是將有更動的所有檔案移入索引區，如果只是想移入一個檔案就指定檔案名稱即可，不過通常是會將全部有更動的檔案一起移動到索引區啦，除非你有特別想紀錄不同的版本號。</p><p>對了，執行後可能會看到一堆 warning，基本上可以不用理會。如果下一步 commit 有成功的話就沒問題～</p><h3 id="將索引區內的檔案-commit-成更新版本"><a href="#將索引區內的檔案-commit-成更新版本" class="headerlink" title="將索引區內的檔案 commit 成更新版本"></a>將索引區內的檔案 commit 成更新版本</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git commit -m &quot;更新訊息&quot;<br></code></pre></div></td></tr></table></figure><p>我們要使用這段指令來更新 Git 版本，其中更新訊息可以撰寫這次你做了哪些更動（比如說是新增或編輯哪篇文章），以利日後需要時能夠方便辨別。</p><p>日後也可以透過指令 <code>git log</code> 或是上傳到 Github 後的 Commit 紀錄來查看更新過的版本紀錄。</p><blockquote><h2 id="部署到-Github-上"><a href="#部署到-Github-上" class="headerlink" title="部署到 Github 上"></a>部署到 Github 上</h2></blockquote><p>見證奇蹟的一刻到啦！接著要執行部署指令，即可將檔案部署到 Github 上。</p><p>如果你是透過本系列的教學來安裝 Hexo，基本上顯示到 Github Pages 的分支為 gh-pages（詳細可回去看 Day 11 講述部署到 Github Pages 那篇），那麼我們的備份檔案就要設定在不同的分支，這裡我們就取名為 master。（如果你正好 Github Pages 連接的分支為 master，那就取其它分支名稱）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git push -u origin master<br><span class="hljs-meta">#</span><span class="bash"> git push -u origin 分支名稱</span><br></code></pre></div></td></tr></table></figure><p>部署成功的訊息大概長這樣：</p><p><img src="https://i.imgur.com/qZ47rhi.png" alt="Git 部署成功"></p><p>此時我們在回來 Github 儲存庫，如果有看到新的分支與剛剛部署的檔案，恭喜你成功完成備份分支的部署啦！</p><p><img src="https://i.imgur.com/FT5GBzb.png" alt="Github 儲存庫新分支"></p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://www.dazhuanlan.com/imdq/topics/965923">Hexo備份至GitHub</a></li><li><a href="https://support.microsoft.com/zh-tw/office/%E5%9C%A8%E6%90%9C%E5%B0%8B%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%90%AC%E7%94%A8%E5%AD%97%E5%85%83-ef94362e-9999-4350-ad74-4d2371110adb">在搜尋中使用萬用字元</a></li><li><a href="https://www.youtube.com/watch?v=PNEM7CH3ZAg&list=PLYrA-SsMvTPOZeB6DHvB0ewl3miMf-2tj">六角學院 Git、Github 教學</a><ul><li>我 Git 是看這系列影片學的，完成這篇文章時，有一併參考看這系列影片所記下來的筆記。</li></ul></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10279238">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 22：如何增加你 Hexo 的選單 Icon？</title>
    <link href="/hexo30-22/"/>
    <url>/hexo30-22/</url>
    
    <content type="html"><![CDATA[<p>之前不管是介紹到主選單或是 Social Links，可以發現它本身都有預設的 Icon 圖示可以對應。但是萬一今天我想要自訂一個新的選單，但是 Hexo 預設並無提供適合的 Icon 該怎麼辦呢？</p><a id="more"></a><blockquote><h2 id="什麼是-Font-Awesome？"><a href="#什麼是-Font-Awesome？" class="headerlink" title="什麼是 Font Awesome？"></a>什麼是 Font Awesome？</h2><ul><li>服務名稱：Font Awesome</li><li>服務網址：<a href="https://fontawesome.com/">https://fontawesome.com/</a></li></ul></blockquote><p>今天要介紹的服務叫做 Font Awesome，其實大家可以嘗試在 Next 佈景主題內的 config 搜尋這個服務名稱，就可以看到許多註解都提到它，Hexo 預設使用的 Icon 服務就是 Font Awesome。</p><p>這項服務是基於 CSS 與 LESS 的字體和圖標套件工具，它本身提供了一系列的 Icon 圖庫，我們只需在網站引入 Font Awesome 後，如果在 Font Awesome 看到喜歡的圖示，可以複製它提供的語法或是在自己 HTML 輸入相對應的 class 名稱即可使用該 Icon。</p><p>至於 Hexo 本身就已經載入了 Font Awesome 服務，因此就能夠直接使用。</p><blockquote><h2 id="透過-Font-Awesome-尋找適合的-Icon-圖示"><a href="#透過-Font-Awesome-尋找適合的-Icon-圖示" class="headerlink" title="透過 Font Awesome 尋找適合的 Icon 圖示"></a>透過 Font Awesome 尋找適合的 Icon 圖示</h2></blockquote><p>首先到服務網站，點擊頂部主選單的 Icons 後，會出現許多 Icon 圖示讓我們做挑選。</p><p>其中如果圖示是比較淺色的，代表需要購買 Font Awesome Pro 才能夠取得，因此如果要免費使用的話，可以以圖示顏色判斷哪個圖示是能夠免費使用的。</p><p><img src="https://i.imgur.com/Xpi9Jnl.png" alt="挑選 Font Awesome Icon 圖示"></p><p>我們隨機選擇一個圖示進入，可以直接點擊「Start Using This Icon」。（如果是需要購買 Icon 才能使用會提示）</p><p><img src="https://i.imgur.com/fVi9BNd.png" alt="點擊 Start Using This Icon"></p><p>此時就可以直接複製語法或是記下此 Icon 的 class。</p><p><img src="https://i.imgur.com/56lXRxH.png" alt="Icon 語法"></p><blockquote><h2 id="在-Hexo-上使用自己找到的-Icon"><a href="#在-Hexo-上使用自己找到的-Icon" class="headerlink" title="在 Hexo 上使用自己找到的 Icon"></a>在 Hexo 上使用自己找到的 Icon</h2></blockquote><p>此時回到 Next 的 config 來去設定 Icon，我認為它似乎可用在關於頁的鏈結，因此將原本 Icon 註解，替換成新的試試看：</p><p><img src="https://i.imgur.com/ejZ15un.png" alt="替換 Icon"></p><p>替換後的結果，關於頁鏈結 Icon 成功地變成剛剛所挑選的 Icon 圖示。</p><p><img src="https://i.imgur.com/KFm0HNL.png" alt="Icon 成功替換"></p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://zh.wikipedia.org/wiki/Font_Awesome">Font Awesome - 維基百科，自由的百科全書</a></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10278805">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 21：在 Hexo 增加作者版權聲明（使用 Next 佈景）</title>
    <link href="/hexo30-21/"/>
    <url>/hexo30-21/</url>
    
    <content type="html"><![CDATA[<p>內容發布到網路上，由於都是開放的，不管是你寫的文章、拍攝的相片或是影片，有一定的機率會被轉貼。有些人是無法接受被轉載文章、有些人則是需要事先通知、以及最基本的註明出處。不管是哪一種協議，我們能夠事先在網站或文章上註明，設定 Next 佈景主題的版權區塊至網站上。</p><a id="more"></a><p><img src="https://i.imgur.com/GRwOLTU.png" alt="作者版權聲明"></p><blockquote><h2 id="實作方法"><a href="#實作方法" class="headerlink" title="實作方法"></a>實作方法</h2></blockquote><p>進入到 Next 佈景的 _config.yml，找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">creative_commons:</span><br>  <span class="hljs-attr">license:</span> <span class="hljs-string">by-nc-sa</span> <span class="hljs-comment"># 使用的版權協議</span><br>  <span class="hljs-attr">sidebar:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否於邊欄顯示版權宣告</span><br>  <span class="hljs-attr">post:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否於文章內頁顯示版權宣告</span><br>  <span class="hljs-attr">language:</span><br></code></pre></div></td></tr></table></figure><p>如此一來就能夠於網站邊欄或是文章內容底部（可擇一顯示）顯示版權聲明。</p><p><img src="https://i.imgur.com/UMz9b2N.png" alt="於網站上顯示版權聲明"></p><h3 id="版權協議"><a href="#版權協議" class="headerlink" title="版權協議"></a>版權協議</h3><p>使用的版權協議，基本上檔案上會有這行註解可選擇：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br></code></pre></div></td></tr></table></figure><p>至於各版權協議的差異，可參考：<a href="https://creativecommons.org/licenses/">關於授權條款</a></p><blockquote><h2 id="自訂內容"><a href="#自訂內容" class="headerlink" title="自訂內容"></a>自訂內容</h2></blockquote><p>如果你想自訂版權宣告區塊的內容，也是可以自訂修改區塊語法。內容及其樣式修改如下：</p><blockquote><ul><li><strong>HTML 內容以及語法</strong>：themes/next/layout/_partials/post/post-copyright.swig</li><li><strong>CSS 樣式</strong>：themes/next/source/css/_common/components/post/post-copyright.styl</li></ul></blockquote><p><img src="https://i.imgur.com/A0oMCgJ.png" alt="自訂版權宣告區塊內容"></p><p>如果說我想要在版權宣告區塊左側顯示作者大頭貼，可以將區塊內容代替為以下語法：</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-copyright d-flex&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;site-author-image&quot;</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&#123;&#123; author &#125;&#125;&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(theme.avatar.url) &#125;&#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list-style-none&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-copyright-author&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;&#123; __(&#x27;post.copyright.author&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>      &#123;&#123;- page.author or author &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-copyright-link&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;&#123; __(&#x27;post.copyright.link&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>      &#123;&#123; next_url(page.permalink, page.permalink, &#123;title: page.title&#125;) &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-copyright-license&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;&#123; __(&#x27;post.copyright.license_title&#x27;) + __(&#x27;symbol.colon&#x27;) &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>      &#123;&#123;- __(&#x27;post.copyright.license_content&#x27;, next_url(ccURL, ccIcon + ccText)) &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-class">.post-copyright</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">var</span>(--card-bg-color);<br>  <span class="hljs-attribute">border-left</span>: <span class="hljs-number">3px</span> solid $red;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">2em</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5em</span> <span class="hljs-number">1em</span>;<br>&#125;<br><span class="hljs-selector-class">.list-style-none</span> &#123;<br>  <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br><span class="hljs-selector-class">.d-flex</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我將原本 .post-copyright 放置到父層，並將原先 .post-copyright 內的 <code>list-style: none;</code> 另外設定一個類別選擇器，因為那是針對 ul 內 li 不要出現項目標籤使用，並放置於 ul。在設定一個 <code>display: flex;</code> 類別選擇器並指定於父層 div，使區塊元素能夠以水平方式排列。</p><p>設定完後顯示成果如下，大家也可以修改成自己想要的樣式！</p><p><img src="https://i.imgur.com/Xs2GpjL.png" alt="自訂內容：將大頭貼新增到版權宣告區塊"></p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="http://blog.amdoing.com/the-post-copyright-in-hexo-next/">使用Hexo的next主题，配置POST文章文末的版权信息</a></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10278151">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 20：設定 404 頁面，不要讓讀者迷路了！</title>
    <link href="/hexo30-20/"/>
    <url>/hexo30-20/</url>
    
    <content type="html"><![CDATA[<p>當網站建立一段時間，或多或少可能會有頁面因為時間推移改變或是刪除了，但此時頁面已經被搜尋引擎收錄或是說有人將網址轉貼到其它地方，如果有人進入了該網址卻發現已經失效了，不免讓人感到尷尬。</p><p><img src="https://i.imgur.com/str9wrh.png" alt="Github Pages 預設 404 頁面"></p><a id="more"></a><p>以 Github Pages 來說預設有提供一個 404 頁面，而且 404 上顯示的也不是你的網站，因此無助於將讀者留在自己的網站裡。此時建議可以新增一個屬於自己部落格的 404 頁面，這樣就算該網址內容已被移除，還是能多少留住一些讀者，也有利於 SEO。</p><blockquote><h2 id="建立-Hexo-404-頁面"><a href="#建立-Hexo-404-頁面" class="headerlink" title="建立 Hexo 404 頁面"></a>建立 Hexo 404 頁面</h2></blockquote><p>先透過指令建立頁面：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">hexo new page 404<br></code></pre></div></td></tr></table></figure><p>建立好後利用編輯器開啟頁面 .md 檔，並增加以下語法：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">---<br>title: 404 錯誤<br>date: 2021-09-08 13:50:44<br>type: categories<br>comments: false<br>permalink: /404.html<br>description: 很抱歉，找不到您想要存取的頁面。您可以經由以下分類找到您想要的內容。<br>---<br></code></pre></div></td></tr></table></figure><p>其中：</p><ul><li>我增加 type 為 <code>categgories</code>，以至於取得目前 Hexo 的分類</li><li>增加 <code>permalink: /404.html</code>，這樣才能在讀者存取不存在頁面時顯示 404 頁面</li><li>增加 <code>description</code> 並設定提示訊息（內容可自行設定）</li></ul><p><img src="https://i.imgur.com/tCnIuOC.png" alt="設定成果"></p><p>當然這是我的設定方式，你不一定要跟我這麼做。你也能夠不去設定 type 為分類，而是自己撰寫頁面內容或是放張圖也可以。</p><p>另外在本機伺服器上是沒有效果的，所以你可以直接到 <code>http://localhost:4000/404/</code> 頁面查看編輯狀況，在部署到 Github Pages，亂輸入一個不存在的頁面網址確認。</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://hsiangfeng.github.io/hexo/20201006/174392200/">(23) 試著學 Hexo - SEO 篇 - 新增你的 404 頁面</a></li><li><a href="https://sofree.cc/">香腸炒魷魚</a><ul><li>會有 404 頁面放置分類列表的想法，就是從他的 404 頁面參考而來的～</li></ul></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10277851">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 19：Hexo 文章分類設定小知識！你都知道了嗎？</title>
    <link href="/hexo30-19/"/>
    <url>/hexo30-19/</url>
    
    <content type="html"><![CDATA[<p>我自己的寫文習慣是如果文章內容剛好符合兩個分類，就會同時設定兩個分類。不過這也意外讓我入了一個坑啊（？）這才發現了設定 Hexo 文章分類時，必須要注意的細節。</p><a id="more"></a><blockquote><h2 id="設定兩個分類"><a href="#設定兩個分類" class="headerlink" title="設定兩個分類"></a>設定兩個分類</h2></blockquote><p>之前「<a href="https://guiblogs.com/hexo30-9/">Day 9：使用 Typora 發表你的第一篇 Hexo 文章</a>」曾經提到過：文章分類或是標籤都建議使用 <code>- [分類或標籤名稱]</code> 這樣的形式撰寫：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">tags:<br><span class="hljs-bullet">-</span> [文章標籤一]<br><span class="hljs-bullet">-</span> [文章標籤二]<br>categories:<br><span class="hljs-bullet">-</span> [文章分類一]<br><span class="hljs-bullet">-</span> [文章分類二]<br></code></pre></div></td></tr></table></figure><p>是的，照著這樣的寫法，我們就能夠在同一篇文章，同時設定兩個標籤以及兩個分類。</p><p>不過，會再特別開一篇文章就代表我有留伏筆啦…</p><blockquote><h2 id="設定子分類"><a href="#設定子分類" class="headerlink" title="設定子分類"></a>設定子分類</h2></blockquote><p>如果你有逛過一些部落格，或許會發現有些部落格分類較細，就會利用到子分類，那這要怎麼設定呢？</p><p>其實，這樣把 <code>[]</code> 移除就好，如下…</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&lt;!-- 雖然主要是在講分類，但可以觀察標籤是否也有變化 --&gt;<br>tags:<br><span class="hljs-bullet">-</span> 標籤一<br><span class="hljs-bullet">-</span> 標籤二<br>categories:<br><span class="hljs-bullet">-</span> 分類一<br><span class="hljs-bullet">-</span> 分類二<br></code></pre></div></td></tr></table></figure><h3 id="標籤部分"><a href="#標籤部分" class="headerlink" title="標籤部分"></a>標籤部分</h3><p>標籤部分，沒有變化。</p><p><img src="https://i.imgur.com/deNX9t0.png" alt="標籤部分截圖"></p><h3 id="分類部分"><a href="#分類部分" class="headerlink" title="分類部分"></a>分類部分</h3><p>分類部分卻發現：分類二竟然成為分類一的子分類了？是的，這就是我當初想要設定成兩個分類，結果直接變成第二個分類是第一個分類的子分類啊！</p><p><img src="https://i.imgur.com/W06SMWX.png" alt="分類部分截圖"></p><h3 id="子分類還可以延伸下去哦"><a href="#子分類還可以延伸下去哦" class="headerlink" title="子分類還可以延伸下去哦"></a>子分類還可以延伸下去哦</h3><p>我知道這很無意義…但總要有些實驗精神嘛！難道只有我覺得這樣用很好玩嗎？（謎之聲：對，只有你！）</p><p><img src="https://i.imgur.com/9cVJ5M0.png" alt="延伸好幾個子分類"></p><blockquote><h2 id="設定子分類的另一個做法"><a href="#設定子分類的另一個做法" class="headerlink" title="設定子分類的另一個做法"></a>設定子分類的另一個做法</h2></blockquote><p>阿那如果我剛好要設定兩個分類，剛好都是子分類，又或是一主分類、一子分類，該怎麼辦？來～不用擔心，既然都用 <code>[]</code> 了，有人規定一個空間只能放一個東西嗎？沒有嘛！！所以另外一個子分類的設定可以這樣：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">categories:<br><span class="hljs-bullet">-</span> [分類一, 分類二]<br><span class="hljs-bullet">-</span> [分類三, 分類四]<br><span class="hljs-bullet">-</span> [分類五]<br></code></pre></div></td></tr></table></figure><p>如此一來，分類二會是分類一的子分類、分類四會是分類三的子分類。</p><p>至於標籤也可以這樣設定嗎？你試試看啊，我自己試過了，但不告訴你答案 XDDDDDD 自己試試 XD 我們要有實驗精神！！（同一個梗重複用）</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>有些東西試了才知道，嘗試後踢到了鐵板（？）再去找資料，雖然好像有點蠢，但也因為是自己嘗試過，才會更深刻體會啊！</p><p>啊不過可能就會遇到一個問題，之前被設定成子分類的分類如果改成主分類，那原本子分類的位置就會被刪除，如果 Google 搜尋引擎已經收錄該怎麼辦？（之前我將中文分類中文位置改為英文時也遇過同樣問題 QQ），這時就要運用 404 頁面引導誤入歧途（？）的網友了。這就是下集預告了，我們明天見啦！（意不意外，開不開心）</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://aiellochan.com/2018/02/13/hexo/Hexo-%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%A4%9A%E4%B8%AA-categories/">Hexo 一篇文章多个 categories</a><ul><li>當初看到這篇才對 Hexo 分類設定有新的認識，大家也可以參考看看～</li></ul></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10277344">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 18：為你的 Hexo 部落格文章添加文章字數與所需閱讀時間</title>
    <link href="/hexo30-18/"/>
    <url>/hexo30-18/</url>
    
    <content type="html"><![CDATA[<p>今天要實作的內容，能夠為自己的 Hexo 部落格文章增加提示本篇文章所需字數以及所需閱讀時間，能夠幫助讀者好掌握閱讀這篇文章大致上需要花費的時間。</p><a id="more"></a><blockquote><h2 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h2></blockquote><p>打開終端機指定位址至 Hexo 目錄後，執行以下這段指令：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-symbols-count-time</span> <span class="hljs-string">--save</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="修改-Next-設定檔"><a href="#修改-Next-設定檔" class="headerlink" title="修改 Next 設定檔"></a>修改 Next 設定檔</h2></blockquote><p>開啟 Next 佈景的 _config.yml 檔案，找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Post wordcount display settings</span><br><span class="hljs-comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span><br><span class="hljs-attr">symbols_count_time:</span><br>  <span class="hljs-attr">separated_meta:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否獨立一行</span><br>  <span class="hljs-comment"># 以下設定如果填 false，「文章字數：」與「所需閱讀時間 ≈ 」會以圖標呈現</span><br>  <span class="hljs-attr">item_text_post:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 文章</span><br>  <span class="hljs-attr">item_text_total:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 網頁底部</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="在-Hexo-設定檔新增語法"><a href="#在-Hexo-設定檔新增語法" class="headerlink" title="在 Hexo 設定檔新增語法"></a>在 Hexo 設定檔新增語法</h2></blockquote><p>開啟 Hexo 根目錄 _config.yml 檔案，增加以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># count</span><br><span class="hljs-attr">symbols_count_time:</span><br>  <span class="hljs-attr">symbols:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 文章字數統計顯示</span><br>  <span class="hljs-attr">time:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 文章閱讀時間顯示</span><br>  <span class="hljs-attr">total_symbols:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 網頁底部字數統計顯示</span><br>  <span class="hljs-attr">total_time:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 網頁底部閱讀時間顯示</span><br>  <span class="hljs-attr">exclude_codeblock:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 字數統計是否排除程式碼</span><br>  <span class="hljs-attr">awl:</span> <span class="hljs-number">4</span>  <span class="hljs-comment"># 平均文字長度，中文為 2, 英文為 5, 預設為 4</span><br>  <span class="hljs-attr">wpm:</span> <span class="hljs-number">275</span>  <span class="hljs-comment"># 一分鐘閱讀字數</span><br>  <span class="hljs-attr">suffix:</span> <span class="hljs-string">&quot;分鐘&quot;</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="實作成果"><a href="#實作成果" class="headerlink" title="實作成果"></a>實作成果</h2></blockquote><h3 id="文章（項目以文字呈現）"><a href="#文章（項目以文字呈現）" class="headerlink" title="文章（項目以文字呈現）"></a>文章（項目以文字呈現）</h3><p><img src="https://i.imgur.com/Qs0Bvof.png" alt="文章（項目以文字呈現）"></p><h3 id="文章（獨立一行呈現）"><a href="#文章（獨立一行呈現）" class="headerlink" title="文章（獨立一行呈現）"></a>文章（獨立一行呈現）</h3><p><img src="https://i.imgur.com/Rp8vV8t.png" alt="文章（獨立一行呈現）"></p><h3 id="網頁底部（項目以圖標呈現）"><a href="#網頁底部（項目以圖標呈現）" class="headerlink" title="網頁底部（項目以圖標呈現）"></a>網頁底部（項目以圖標呈現）</h3><p><img src="https://i.imgur.com/pqFaVad.png" alt="網頁底部（項目以圖標呈現）"> </p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li>忘了當初照哪一篇教學文章操作了，找到再補。</li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10276764">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 17：Next 佈景客製化 - 將 Social Link 移到主選單</title>
    <link href="/hexo30-17/"/>
    <url>/hexo30-17/</url>
    
    <content type="html"><![CDATA[<p>使用 Hexo 經營部落格也有一陣子了，漸漸也慢慢地上手！但發現 Next 這個佈景主題有一個問題是，在比較小的裝置或是手機上瀏覽時，sidebar 會不見；但我又希望 Social Link 不會因此而消失。此時該怎麼做才能夠達成呢？</p><a id="more"></a><blockquote><h2 id="實作方法：將-Social-Link-移到主選單"><a href="#實作方法：將-Social-Link-移到主選單" class="headerlink" title="實作方法：將 Social Link 移到主選單"></a>實作方法：將 Social Link 移到主選單</h2></blockquote><p>我自己使用的方式是<strong>將 Social Link 整個區塊移動到主選單</strong>，讓訪客點擊手機版主選單的下拉式方塊時，所彈出的主選單下方就會顯示 Social Link。實作方式如下：</p><p>修改檔案：<strong>themes/next/layout/_partials/sidebar/site-overview.swig</strong></p><p>找到以下整串語法，差不多在第 77 行處：</p><figure class="highlight twig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">if</span></span> theme.social %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;links-of-author motion-element&quot;</span>&gt;</span></span><br><span class="xml">      </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">for</span></span> name, link in theme.social %&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;links-of-author-item&quot;</span>&gt;</span></span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">set</span></span> sidebarURL = link.split(&#x27;||&#x27;)[0] | trim %&#125;</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">if</span></span> theme.social_icons.enable %&#125;</span><br><span class="xml">          </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">set</span></span> sidebarIcon = &#x27;&lt;i class=&quot;&#x27; + link.split(&#x27;||&#x27;)[1] | trim + &#x27; fa-fw&quot;&gt;&lt;/i&gt;&#x27; %&#125;</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name">else</span> %&#125;</span><br><span class="xml">          </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">set</span></span> sidebarIcon = &#x27;&#x27; %&#125;</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">endif</span></span> %&#125;</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">if</span></span> theme.social_icons.enable and theme.social_icons.icons_only %&#125;</span><br><span class="xml">          </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">set</span></span> sidebarText = &#x27;&#x27; %&#125;</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name">else</span> %&#125;</span><br><span class="xml">          </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">set</span></span> sidebarText = name %&#125;</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">endif</span></span> %&#125;</span><br><span class="xml">          </span><span class="hljs-template-variable">&#123;&#123; next_url(sidebarURL, sidebarIcon + sidebarText, &#123;title: name + &#x27; → &#x27; + sidebarURL&#125;) &#125;&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">endfor</span></span> %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">endif</span></span> %&#125;</span><br></code></pre></div></td></tr></table></figure><p>這整段語法即是有關於 Social Link 的部分，如果要移動到主選單，就要將它移動到主選單區塊內，而主選單部分要找到另外一個檔案。</p><p>修改檔案：<strong>themes/next/layout/_partials/header/menu.swig</strong></p><p>找到以下這串語法：</p><figure class="highlight django"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">if</span></span> theme.algolia_search.enable or theme.local_search.enable %&#125;</span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;menu-item menu-item-search&quot;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;popup-trigger&quot;</span>&gt;</span></span><br><span class="xml">      </span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">if</span></span> theme.menu_settings.icons %&#125;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-search fa-fw&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></span><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-variable">&#123;&#123; __(&#x27;menu.search&#x27;) &#125;&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br></code></pre></div></td></tr></table></figure><p>將剛剛複製的那段語法貼到這後面即可。</p><blockquote><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2></blockquote><p>以我自己部落格（使用 Scheme 為 Pisces）為例，Social Link 移動到主選單區塊裡了。至於在手機版，<strong>只要點擊主選單下拉選單，主選單下方就會出現 Social Link</strong>。</p><h3 id="PC-版"><a href="#PC-版" class="headerlink" title="PC 版"></a>PC 版</h3><p><img src="https://i.imgur.com/FxxyAgE.png" alt="Social Link 移動到主選單成果 - PC 版"></p><h3 id="手機版"><a href="#手機版" class="headerlink" title="手機版"></a>手機版</h3><p><img src="https://i.imgur.com/TPXTeOi.png" alt="Social Link 移動到主選單成果 - 手機板"></p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>為了解決這個問題，在網路上搜尋了已久都找不到相關資訊。因此後來是到 <a href="https://www.facebook.com/groups/2542430066079726">Hexo Taiwan</a> Facebook 社團詢問方向，因此最後就照了以上的實作方式進行。真的非常感謝 XD</p><p>所以當遇到問題且真正已經 Google 過後仍然無法解決，我認為就該到社團或是一些討論區上詢問了。也因為如此社群才能變得更加強大，而且當自己真實解決問題了之後，更能夠透過分享將整個心路歷程分享到網路上，畢竟取之於網路、回饋於網路嘛！</p><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10276487">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 16：Next 佈景客製化 - 讓副標題顯示於標題內</title>
    <link href="/hexo30-16/"/>
    <url>/hexo30-16/</url>
    
    <content type="html"><![CDATA[<p>Hexo 網站設定當中，除了有標題的設定外，還有所謂的「副標題」來輔助主標題外想補充說明的內容。比方我自己的部落格 <strong>Gui Blog - 網站的工具人</strong>，其中「Gui Blog」是我的部落格主標題，而「網站的工具人」則是我自己想補充部落格的站長有這樣的一個稱呼。</p><p>不過以 Next 來說，預設網站標題僅有主標題，並沒有副標題。而副標題僅會顯示在網站 h1 後面。</p><p><img src="https://i.imgur.com/Slu27p7.png" alt="預設網站標題不會呈現副標題"></p><a id="more"></a><blockquote><h2 id="動手實作：使副標題也能放入網站標題（title）"><a href="#動手實作：使副標題也能放入網站標題（title）" class="headerlink" title="動手實作：使副標題也能放入網站標題（title）"></a>動手實作：使副標題也能放入網站標題（title）</h2></blockquote><p>修改檔案：<strong>themes/next/next/layout/_layout.swig</strong></p><p>找到以下這段語法：（約 line 7 處）</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs swig">&lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;&#x2F;title&gt;<br></code></pre></div></td></tr></table></figure><p>修改為：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs swig">&lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125; - &#123;&#123; subtitle &#125;&#125;&lt;&#x2F;title&gt;<br><br></code></pre></div></td></tr></table></figure><p>完成！</p><p>作法就是在原本主標題（<code>&lt;title&gt;&lt;/title&gt;</code> 內），後面再加上副標題變數，如此一來瀏覽器顯示標題就會在主標題後接著 “-“ 與副標題。</p><p><img src="https://i.imgur.com/6E0V4X9.png" alt="副標題成功放入 title"></p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>如果你的網站標題只有設定個主標題，也建議你可以加個副標題看看，能夠輔助主標題無法多敘述的部分，更能凸顯你的個人特色哦！</p><p>那今天就先這樣了～（今天好像有點短？沒有啊～都是你的錯覺 XDDDDDD）</p><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10275690">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 15：移除 Hexo 文章點擊「閱讀全文」後網址出現的 `#more`</title>
    <link href="/hexo30-15/"/>
    <url>/hexo30-15/</url>
    
    <content type="html"><![CDATA[<p>發表文章時，如果文章內容太長，我們會善用 <code>&lt;!-- more --&gt;</code> 這段語法，以至於讓首頁與文章列表不會太過於落落長，要看更深入內容進入該篇文章即可。但是網友如果點擊的是閱讀全文按鈕進去文章時，文章後面卻會出現 #more 的後綴詞，如下圖所示：</p><p><img src="https://i.imgur.com/iBfaT0I.png" alt="原先"></p><a id="more"></a><blockquote><h2 id="會造成什麼影響？"><a href="#會造成什麼影響？" class="headerlink" title="會造成什麼影響？"></a>會造成什麼影響？</h2></blockquote><p>如果是經由閱讀全文進入文章的，文章網址後面不但會有 <code>#more</code> 的後綴詞，而且瀏覽器會自動跳到閱讀全文後的網頁內容，而不是最上層。原因是 #more 是 HTML 元素裡的一個 ID，如果進入以 ID 為 more 的文章網址，就會自動跳到 ID 為 more 的區塊。</p><p>或許這是一個滿貼心的設計，能夠讓網友在文章列表看完前面內文後，點擊閱讀全文後瀏覽器還直接跳到下一段內文，不過以我個人為例，我是希望網友不管是點擊標題還是閱讀全文，他都能夠連到同一個網址，而且都可以是從最頂層開始瀏覽。</p><blockquote><h2 id="如何解決這個問題？"><a href="#如何解決這個問題？" class="headerlink" title="如何解決這個問題？"></a>如何解決這個問題？</h2></blockquote><p>修改檔案：<strong>themes/next/lauout/_macro/post.swig</strong></p><p>找到以下這段語法：</p><figure class="highlight handlebars"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs handlebars"><span class="xml">        <span class="hljs-comment">&lt;!--/noindex--&gt;</span></span><br><span class="xml">&#123;% elif post.excerpt %&#125;</span><br><span class="xml">        </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">post.excerpt</span> &#125;&#125;</span><br><span class="xml">        <span class="hljs-comment">&lt;!--noindex--&gt;</span></span><br><span class="xml">        &#123;%- if theme.read_more_btn %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-button&quot;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">post.path</span>) &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">#more&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;contents&quot;</span>&gt;</span></span><br><span class="xml">        </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">__</span>(<span class="hljs-name">&#x27;post.read_more&#x27;</span>) &#125;&#125;</span><span class="xml"> <span class="hljs-symbol">&amp;raquo;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        &#123;%- endif %&#125;</span><br><span class="xml">        <span class="hljs-comment">&lt;!--/noindex--&gt;</span></span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/lfp2wYE.png" alt="程式碼"></p><p>截圖中，我特地將 <code>#more</code> 反白，這就是重點了。這個 a 鏈結即是閱讀全文按鈕，其中 href 要連線的位置為 <code>&#123;&#123; url_for(post.path) &#125;&#125;#more</code>，就是文章網址。</p><figure class="highlight handlebars"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">post.path</span>) &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">#more&quot;</span></span></span><br></code></pre></div></td></tr></table></figure><p>此時，我們要做的就是將 #more 刪除即可，如此一來之後網友點擊閱讀全文，就會指向後綴沒有 #more 的文章網址了。</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>我們都力求網址愈短、愈簡單愈好，因此如果能夠讓網站所有指向的鏈結愈短，我認為是一件比較好的事情。不過如果你認為想要將文章從頭看到尾按標題、在文章列表看文內容想接續看的就按閱讀全文，我認為也是可以，就看各位如何選擇了。</p><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10275101">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 14：Disqus 留言管理指南</title>
    <link href="/hexo30-14/"/>
    <url>/hexo30-14/</url>
    
    <content type="html"><![CDATA[<p>昨天我們在 Hexo 裝設了 Disqus 留言版功能，那當真的有人留言之後，我該怎麼去管理這些留言呢？今天我們來介紹這個部分。</p><a id="more"></a><blockquote><h2 id="管理留言"><a href="#管理留言" class="headerlink" title="管理留言"></a>管理留言</h2></blockquote><p>當有網友回復需要審核時，需要進入到 Disqus 進行核准。<del>如果你跟我一樣是邊緣人沒有讀者留言</del>，可以自己留言 XD</p><p>首先，來到 Disqus 官方網站，點擊右上角「Admin」。</p><p><img src="https://i.imgur.com/RlUhb7I.png" alt="點擊 Admin"></p><p>點擊右上角「Moderate Comments」。</p><p><img src="https://i.imgur.com/RUgGz0I.png" alt="點擊 Moderate Comments"></p><p>到這邊可以針對新留言進行管理，有「Approve（批准）」、「spam（垃圾留言）」、「Delete（刪除）」，或是勾選旁邊勾勾進行批次操作。</p><p><img src="https://i.imgur.com/CDCnVhJ.png" alt="核准留言"></p><p>核准留言後，點擊上方選單「Approve」鏈結，還可進行後續管理操作。</p><p><img src="https://i.imgur.com/bRxmTm1.png" alt="管理留言"></p><blockquote><h2 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h2></blockquote><p>看到左邊選單，還有許多針對留言版的相關設定。我們點擊進入「Configuration」看看。</p><p><img src="https://i.imgur.com/m2BZhK8.png" alt="控制台選單"></p><p>選擇裝設至 Hexo 的留言版。</p><p><img src="https://i.imgur.com/XYQ5zEk.png" alt="選擇留言版"></p><p>這邊許多針對留言版的設定，大家可以研究看看，雖然是英文 XD</p><p><img src="https://i.imgur.com/3UvFcxx.png" alt="控制台"></p><blockquote><h2 id="回覆留言與-Hexo-上的操作"><a href="#回覆留言與-Hexo-上的操作" class="headerlink" title="回覆留言與 Hexo 上的操作"></a>回覆留言與 Hexo 上的操作</h2></blockquote><p>回到 Hexo 文章內，我們可以針對讀者留言做出回復，點擊「Reply」就會出現留言框。另外，還能夠點擊喜歡、不喜歡，或是進行分享。</p><p><img src="https://i.imgur.com/BpTvtn6.png" alt="回覆留言與 Hexo 上的操作"></p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>如此一來，就能夠利用 Disqus 與讀者進行互動並進行管理，<del>不過也要你有願意留言的讀者</del>，好啦，各位就先去操作看看吧！</p><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10274567">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 13：為自己的 Hexo 部落格增加 Disqus 留言功能（使用 Next 佈景主題）</title>
    <link href="/hexo30-13/"/>
    <url>/hexo30-13/</url>
    
    <content type="html"><![CDATA[<p>Hexo 雖然是靜態網頁產生器，因此不會像 WordPress 那樣本身就內建內容儲存在資料庫的文章留言功能。但我們仍然能夠使用第三方服務替自己的 Hexo 網頁增加留言功能；今天就要來介紹 Disqus 這個第三方留言服務。</p><a id="more"></a><blockquote><h2 id="為何要使用-Disqus？"><a href="#為何要使用-Disqus？" class="headerlink" title="為何要使用 Disqus？"></a>為何要使用 Disqus？</h2></blockquote><p>如果你在網路上經常在各個網站回應或是留言，很可能就有用過 Disqus 了。使用它就像是個社群那樣，假設 A、B 網站都使用 Disqus 第三方留言功能，你就能夠使用同一個 Disqus 帳號在兩個網站留言，非常的方便。所以雖然 WordPress 本身有內建留言功能，不過也有滿多人是套用 Disqus 留言功能的 XD</p><p>對於 Hexo 來說，因為是靜態網頁，所以更須倚賴這些第三方留言功能，因此就更適合使用像 Disqus 這些服務，為自己的 Hexo 增加留言功能。</p><blockquote><h2 id="註冊-Disqus"><a href="#註冊-Disqus" class="headerlink" title="註冊 Disqus"></a>註冊 Disqus</h2><p>官方網站：<a href="https://blog.disqus.com/">https://blog.disqus.com/</a></p></blockquote><p>首先進入 Disqus 官網，點擊右上角的「Get Started」。</p><p><img src="https://i.imgur.com/aiL7Fve.png" alt="Disqus 官方網站"></p><p>進入註冊頁（Signup），輸入資料，也可以連接社群帳號。</p><p><img src="https://i.imgur.com/4rtyjLC.png" alt="註冊 Disqus 帳號"></p><p>如果都沒問題就會顯示登入了。回到首頁後，點擊中間的「GET STARTED」，開始進行安裝設定。</p><p><img src="https://i.imgur.com/NY9Rgid.png" alt="開始"></p><blockquote><h2 id="建立一個網站留言版"><a href="#建立一個網站留言版" class="headerlink" title="建立一個網站留言版"></a>建立一個網站留言版</h2></blockquote><p>點擊「I want to install Disqus on my site」。</p><p><img src="https://i.imgur.com/VQWEKDj.png" alt="我想在我的網站上安裝 Disqus"></p><p>輸入網站名稱、類別與語言。</p><p><img src="https://i.imgur.com/PUGLEgF.png" alt="建立新的網站留言版"></p><p>選擇方案，免費方案選擇下面的 Basic。</p><p><img src="https://i.imgur.com/9tiTTOV.png" alt="選擇方案"></p><p>選擇放置的平台，Hexo 沒有在上面，因此選擇「I don’t see my platform listed, install manually with Universal Code」。</p><p><img src="https://i.imgur.com/y96hU8Z.png" alt="選擇平台"></p><p>這邊再設定一些資訊，有些剛剛設定過了。這邊再設定較詳細的。</p><p><img src="https://i.imgur.com/rhMLxtV.png" alt="設置 Disqus"></p><p>這邊為你的留言審核設定。</p><p><img src="https://i.imgur.com/Asr3Mbv.png" alt="評論和審核設定"></p><p>到這一步就設定完成啦！</p><p><img src="https://i.imgur.com/t71bf60.png" alt="設定完成"></p><blockquote><h2 id="Hexo-設定-Disqus"><a href="#Hexo-設定-Disqus" class="headerlink" title="Hexo 設定 Disqus"></a>Hexo 設定 Disqus</h2></blockquote><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Disqus</span><br><span class="hljs-attr">disqus:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">shortname:</span> <span class="hljs-string">你的</span> <span class="hljs-string">shortname（Website</span> <span class="hljs-string">Name）</span><br></code></pre></div></td></tr></table></figure><ul><li>enable：從 false 設定成 true 開啟功能</li><li>shortname：輸入剛建立的留言版 shortname 代碼進行連接</li></ul><p><img src="https://i.imgur.com/VxlciEy.png" alt="Hexo 顯示 Disqus"></p><blockquote><h2 id="Disqus-留言版繁體中文化"><a href="#Disqus-留言版繁體中文化" class="headerlink" title="Disqus 留言版繁體中文化"></a>Disqus 留言版繁體中文化</h2></blockquote><p>Disqus 是國外的服務，本身提供的語言選項也僅提供簡體中文。如果想要使用繁體中文，還是能夠透過語法的方式設定。</p><ul><li>修改檔案：<strong>themes/next/layout/_third-party/comments/disqus.swig</strong></li></ul><p>找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">var</span> <span class="hljs-string">disqus_config</span> <span class="hljs-string">=</span> <span class="hljs-string">function()</span> &#123;<br>    <span class="hljs-string">this.page.url</span> <span class="hljs-string">=</span> &#123;&#123; <span class="hljs-string">page.permalink</span> <span class="hljs-string">|</span> <span class="hljs-string">json</span> &#125;&#125;<span class="hljs-string">;</span><br>    <span class="hljs-string">this.page.identifier</span> <span class="hljs-string">=</span> &#123;&#123; <span class="hljs-string">page.path</span> <span class="hljs-string">|</span> <span class="hljs-string">json</span> &#125;&#125;<span class="hljs-string">;</span><br>    <span class="hljs-string">this.page.title</span> <span class="hljs-string">=</span> &#123;&#123; <span class="hljs-string">page.title</span> <span class="hljs-string">|</span> <span class="hljs-string">json</span> &#125;&#125;<span class="hljs-string">;</span><br>    &#123;<span class="hljs-string">%</span> <span class="hljs-string">if</span> <span class="hljs-string">__(&#x27;disqus&#x27;)</span> <span class="hljs-type">!==</span> <span class="hljs-string">&#x27;disqus&#x27;</span> <span class="hljs-string">-%</span>&#125;<br>      <span class="hljs-string">this.language</span> <span class="hljs-string">=</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; __(&#x27;disqus&#x27;) &#125;&#125;</span>&#x27;</span><span class="hljs-string">;</span><br>    &#123;<span class="hljs-string">%</span> <span class="hljs-string">endif</span> <span class="hljs-string">-%</span>&#125;<br>  &#125;<span class="hljs-string">;</span><br></code></pre></div></td></tr></table></figure><p>如果你是非使用 Next 佈景主題，也可以試著複製這串語法其中一兩行，在你的 Hexo 尋找哪一個檔案有這串語法，基本上就修改那支檔案。</p><p>在 this.page.title 那行語法下加：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">this.language</span> <span class="hljs-string">=</span> <span class="hljs-string">&quot;zh_TW&quot;</span><span class="hljs-string">;</span> <span class="hljs-string">//</span> <span class="hljs-string">Disqus</span> <span class="hljs-string">顯示語言</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/mSxCdRt.png" alt="Disqus 繁體中文化"></p><p>如此一來就完成了，不過只有部分翻譯成繁體中文，還是有滿多地方是英文，就希望 Disqus 能夠盡快出完整版的繁體中文了！</p><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10273905">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 12：為 Hexo 裝設 Google Analytics，追蹤你的部落格流量（使用 Next 佈景主題）</title>
    <link href="/hexo30-12/"/>
    <url>/hexo30-12/</url>
    
    <content type="html"><![CDATA[<p>如果你曾經使用過一些 BSP 服務，基本上本身都會內建流量或人數統計的功能，幫助我們查看部落格近期人氣量，而這也是未來如果想使用部落格與他人合作的重要參考依據。但現在我們自行架設 Hexo，要怎麼也擁有這樣流量統計的功能呢？我們可以使用 Google Analytics 服務來幫助我們追蹤網站流量或讀者行為。</p><a id="more"></a><blockquote><h2 id="什麼是-Google-Analytics？"><a href="#什麼是-Google-Analytics？" class="headerlink" title="什麼是 Google Analytics？"></a>什麼是 Google Analytics？</h2></blockquote><p>Google Analytics（簡稱 GA）是一個能夠追蹤網站流量、網友在網站中行為甚至是轉換率（進行購買行為比率）的一個工具。</p><p>以電商網站為例，透過 GA 能夠追蹤網友行為。以跳出率（網友在該頁關閉的多寡）就能夠了解到，若該頁跳出率高，是否代表該頁面有些狀況，導致許多網友在該頁關閉了網站？或許這將會是影響電商網站轉換率的重要關鍵之一。</p><p>而透過 Google Analytics 還能夠去掌握網站的流量或是造訪人數。哪個頁面比較多人瀏覽，透過報表資料為網站進行改進。</p><blockquote><h2 id="如何申請-Google-Analytics？"><a href="#如何申請-Google-Analytics？" class="headerlink" title="如何申請 Google Analytics？"></a>如何申請 Google Analytics？</h2><p>官方網站：<a href="https://analytics.google.com/analytics/web/provision/#/provision">Google Analytics</a></p></blockquote><p>先登入 Google 後，來到 Google Analytics 首頁，點擊「開啟測量」。</p><p><img src="https://i.imgur.com/l7PVxln.png" alt="Google Analytics"></p><p>輸入使用者名稱後，點擊「下一步」。</p><p><img src="https://i.imgur.com/De6eE58.png" alt="帳戶設定"></p><p>資源名稱，可以輸入網站名稱。輸入完後點擊「下一步」。</p><p><img src="https://i.imgur.com/0Z3X20k.png" alt="資源設定"></p><p>可以大概輸入你是多少人經營這個網站、網站分類，至於如何將 GA 運用於商家，這個就看你認為 GA 能夠提供你什麼價值。設定完後點擊「建立」。</p><p><img src="https://i.imgur.com/Wnm4yo9.png" alt="提供商家相關資訊"></p><p>閱讀完後皆勾選接受，並點擊「我接受」。</p><p><img src="https://i.imgur.com/YRKArzJ.png" alt="服務條款"></p><p>點擊「全部取消勾選並儲存」或「儲存」，完成建立。</p><p><img src="https://i.imgur.com/qId9EEf.png" alt="我的電子郵件通訊"></p><blockquote><h2 id="取得並設定-Google-Analytics-追蹤碼"><a href="#取得並設定-Google-Analytics-追蹤碼" class="headerlink" title="取得並設定 Google Analytics 追蹤碼"></a>取得並設定 Google Analytics 追蹤碼</h2></blockquote><p>經過以上步驟代表已經建立了一個資源，再來要選擇平台。點擊「網站」。</p><p><img src="https://i.imgur.com/jZW5JSS.png" alt="選擇平台：網站"></p><p>輸入網站網址與串流名稱，串流名稱設定成網站名稱就好。設定好後點擊「建立串流」。</p><p><img src="https://i.imgur.com/voXF8TR.png" alt="輸入網站網址與串流名稱"></p><p>建立後會看到評估 ID（追蹤碼），請複製起來，到 Hexo 進行設定。</p><p><img src="https://i.imgur.com/edwibUk.png" alt="評估 ID"></p><p>如果你使用 Next 佈景主題，回到 Next 的 _config.yml 設定檔，找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Google Analytics</span><br><span class="hljs-attr">google_analytics:</span><br>  <span class="hljs-attr">tracking_id:</span> <span class="hljs-comment"># &lt;app_id&gt;</span><br>  <span class="hljs-comment"># By default, NexT will load an external gtag.js script on your site.</span><br>  <span class="hljs-comment"># If you only need the pageview feature, set the following option to true to get a better performance.</span><br>  <span class="hljs-attr">only_pageview:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><p>將剛剛複製的評估 ID 設定至 <strong>tracking_id</strong>。像是這樣：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">tracking_id:</span> <span class="hljs-string">G-2CYC62V0KT</span><br></code></pre></div></td></tr></table></figure><blockquote><h2 id="將追蹤碼埋入-Hexo"><a href="#將追蹤碼埋入-Hexo" class="headerlink" title="將追蹤碼埋入 Hexo"></a>將追蹤碼埋入 Hexo</h2></blockquote><p>在取得評估 ID 同一頁下方，有新增網頁內代碼，點擊全域網站代碼，會看到一段語法，請複製起來並回到 Hexo 修改檔案。</p><p><img src="https://i.imgur.com/oaP6vIU.png" alt="新增網頁內代碼"></p><p>修改檔案：<strong>themes/next/layout/_partials/head/head.swig</strong></p><p>將這段語法複製到檔案最後即可。</p><p><img src="https://i.imgur.com/7LRVZ0U.png" alt="查看過去 30 分鐘的使用者"></p><blockquote><h2 id="查看-Google-Analytics-報表"><a href="#查看-Google-Analytics-報表" class="headerlink" title="查看 Google Analytics 報表"></a>查看 Google Analytics 報表</h2></blockquote><p>這邊來稍微導覽一下 GA 後台，不過就不詳細導覽了，沒介紹的部分就請大家自己摸索或 Google 囉 XD</p><h3 id="Google-Analytics-分析-首頁"><a href="#Google-Analytics-分析-首頁" class="headerlink" title="Google Analytics (分析) 首頁"></a>Google Analytics (分析) 首頁</h3><p>首先是 Google Analytics (分析) 首頁，也就是剛剛看「查看過去 30 分鐘的使用者」的那頁。因為教學站剛剛架設所以沒什麼資料與內容，所以就直接用我的部落格當示範啦！應該學學 YouTube 在標題打上後台數據大公開才對（？）</p><p>這邊可以查看你最近使用者造訪數量以及跳出率等資訊。</p><p><img src="https://i.imgur.com/3ecyCyx.png" alt="Google Analytics (分析) 首頁"></p><h3 id="您的使用者常造訪那些網頁？"><a href="#您的使用者常造訪那些網頁？" class="headerlink" title="您的使用者常造訪那些網頁？"></a>您的使用者常造訪那些網頁？</h3><p>滑到首頁底部，有個「您的使用者常造訪那些網頁？」。這邊我滿常看的，會去看哪幾篇文章比較多人看，可以點擊下方「過去 7 天」選擇時間範圍。</p><p><img src="https://i.imgur.com/hMwbj07.png" alt="您的使用者常造訪那些網頁？"></p><h3 id="客層和興趣報表"><a href="#客層和興趣報表" class="headerlink" title="客層和興趣報表"></a>客層和興趣報表</h3><p>點擊左側選單的目標對象 —&gt; 客層 —&gt; 總覽，可以看到這裡有年齡層的分布，以我的部落格為例，年齡層大致上以年輕族群居多。</p><p><img src="https://i.imgur.com/QMYQ6jc.png" alt="客層和興趣報表：年齡層"></p><p>再來選擇年齡層圖表下方第二個圈圈按鈕則會顯示性別分布，基本上是男生略多於女生。</p><p><img src="https://i.imgur.com/FRMn8X9.png" alt="客層和興趣報表：性別"></p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>有了 Google Analytics 的追蹤，就能夠隨時掌握網站流量資訊，不管是日後合作、行銷策略或是了解部落格讀者都還滿有幫助的，大家可以好好挖掘 Google Analytics 提供的資訊。</p><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10272965">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 11：將你的 Hexo 部落格部屬到 Github Pages</title>
    <link href="/hexo30-11/"/>
    <url>/hexo30-11/</url>
    
    <content type="html"><![CDATA[<p>我相今天的篇章是大家期待已久的，因為經過前面十天的努力，今天終於要將我們的部落格公開在世人面前啦！不過今天的流程稍微多了一些，但只要照著下面一步一步操作我想是能夠上手的。</p><p>要公開到網路上，勢必需要有一個伺服器主機來放置我們的部落格，而我們所選擇使用的伺服器主機為 Github Pages，以下就來介紹它是什麼樣的服務以及好處。</p><a id="more"></a><blockquote><h2 id="什麼是-Github-Pages？為何選擇它？其有何限制？"><a href="#什麼是-Github-Pages？為何選擇它？其有何限制？" class="headerlink" title="什麼是 Github Pages？為何選擇它？其有何限制？"></a>什麼是 Github Pages？為何選擇它？其有何限制？</h2></blockquote><p>Github Pages 是 Github 提供的靜態網頁空間，它提供了 <strong>1GB 容量儲存空間以及每個月 100GB 流量</strong>，而且都是<strong>免費使用</strong>的，對於剛起步的 Hexo 部落格來說我想是滿適合的一個方案。</p><h3 id="Github-Pages-提供了什麼？"><a href="#Github-Pages-提供了什麼？" class="headerlink" title="Github Pages 提供了什麼？"></a>Github Pages 提供了什麼？</h3><ul><li>免費的靜態網頁空間</li><li>1GB 空間容量</li><li>100GB 月流量</li><li>提供一組 Github帳號.github.io 子網域</li><li>能夠使用 Git 部署並進行版本控制</li></ul><h3 id="Github-Pages-有什麼限制？"><a href="#Github-Pages-有什麼限制？" class="headerlink" title="Github Pages 有什麼限制？"></a>Github Pages 有什麼限制？</h3><p><strong>不過相對來說它還是有一些限制</strong>，比方說一小時內你只能<strong>提交 10 次更新版本</strong>，再來就是它只能存放<strong>靜態網頁</strong>、沒有提供資料庫，所以像是 WordPress 等使用 PHP 或是需要資料庫的動態程式就沒有辦法利用 Github Pages 所提供的免費空間。</p><p>不過我認為以 Hexo 來說還是值得一試的，雖然說一小時內只能提交 10 次版本，但是你可以先在本機上確認文章內容無誤後，在部署到空間上就好，不需要每更新幾個字就部署到空間上。另外 <strong>Hexo 是靜態網頁產生器</strong>，所以使用 Github Pages 是完全沒有問題的。</p><blockquote><h2 id="新增一個-Github-儲存庫"><a href="#新增一個-Github-儲存庫" class="headerlink" title="新增一個 Github 儲存庫"></a>新增一個 Github 儲存庫</h2></blockquote><h3 id="申請-Github-帳號"><a href="#申請-Github-帳號" class="headerlink" title="申請 Github 帳號"></a>申請 Github 帳號</h3><p>首先如果你要新增儲存庫，你必須要有一個 <a href="https://github.com/">Github</a> 帳號。如果你還沒有的話，那就<a href="https://github.com/signup?source=login">申請一個吧</a>！Github 帳號請務必好好取名，因為 Github Pages 會提供一組「你的 Github 帳號.github.io」的子網域。</p><h3 id="新增儲存庫"><a href="#新增儲存庫" class="headerlink" title="新增儲存庫"></a>新增儲存庫</h3><p>如果你本身已經有 Github 帳號或是剛辦好的，那就可以新增儲存庫了。首先來到已經為登入狀態的 Github 任一頁面，右上角會有個「+」按鈕，按下去後會出現下拉式選單，點擊第一個「New repository」。</p><p><img src="https://i.imgur.com/iuCXGcf.png" alt="點擊新增儲存庫"></p><p>此時請在你的 Reponsitory name 輸入你的 Github Pages 子網域，而你的 Github Pages 格式就如同前面所敘述為「你的 Github 帳號.github.io」。而且一個帳號僅有一組子網域。</p><p><img src="https://i.imgur.com/gJDSfqc.png" alt="填寫網址"></p><p>填寫完成往下滑按下「Create repository」後，如果看到以下畫面就代表成功囉！此時，右上角是否有看到一個 HTTPS 的網址？請將它複製起來，待會會用到。</p><p><img src="https://i.imgur.com/MXgtC5S.png" alt="儲存庫建立成功"></p><blockquote><h2 id="設定-Hexo-連結儲存庫"><a href="#設定-Hexo-連結儲存庫" class="headerlink" title="設定 Hexo 連結儲存庫"></a>設定 Hexo 連結儲存庫</h2></blockquote><p>部署前要先設定 Hexo 的 <code>_config.yml</code> 檔案中連接到 Github 儲存庫的相關設定，首先要找到 <code># Deployment</code> 這段（基本上預設會在檔案最下面）：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span> <span class="hljs-comment"># 使用 Git 部署</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/Github帳號/Github帳號.github.io.git</span> <span class="hljs-comment"># 你的儲存庫 clone</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span> <span class="hljs-comment"># 儲存庫分支</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">&quot;First Commit&quot;</span> <span class="hljs-comment"># Commit 訊息</span><br></code></pre></div></td></tr></table></figure><ul><li>type：部署類型</li><li>repo：儲存庫 clone</li><li>branch：儲存庫分支</li><li>message：Commit 訊息</li></ul><p>預設可能只有 type 而已，然而<strong>必須加上 repo、branch 等資訊才能進行部署</strong>（畢竟要設定部署的儲存庫嘛），message 不是必要的，不過我建議還是加，這樣整體在看的時候比較能夠一目了然每一次的部署是為了什麼而更新。</p><p>再來就是 <strong>冒號後必須空一個空白在接設定值！冒號後必須空一個空白在接設定值！冒號後必須空一個空白在接設定值！</strong> 非常重要所以粗體說三次，不然會無法部署哦～</p><blockquote><h2 id="清除暫存檔案"><a href="#清除暫存檔案" class="headerlink" title="清除暫存檔案"></a>清除暫存檔案</h2></blockquote><p>部署 Hexo 前我先說明一個指令 <code>hexo c</code>，因為有時候 Hexo 可能會記住之前的快取檔案而造成一些問題（比如網頁版面不一樣之類的），就可以先執行以下指令，以確保網站上線後能夠正常顯示。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">hexo c <span class="hljs-comment"># 清除快取</span><br></code></pre></div></td></tr></table></figure><p>不過我自己因為碰到網站顯示問題而執行此指令大概就兩次，一次是一開始不熟、再來一次我忘記是何時了 XD 總之就看情況使用吧。</p><blockquote><h2 id="見證奇蹟的一刻！部署你的第一個-Hexo-到網路上吧"><a href="#見證奇蹟的一刻！部署你的第一個-Hexo-到網路上吧" class="headerlink" title="見證奇蹟的一刻！部署你的第一個 Hexo 到網路上吧"></a>見證奇蹟的一刻！部署你的第一個 Hexo 到網路上吧</h2></blockquote><p>最後，就是見證奇蹟的一刻啦！！部署 Hexo 必須要安裝 <strong>Hexo-deployer-git</strong> Git 部署套件，因此需要執行以下指令安裝：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/HY98WgM.png" alt="安裝 Git 部署套件"></p><p>再來就要執行 <code>hexo d</code> Hexo 的部署指令，就會開始將我們前面產生的靜態網頁部署到 Github Pages 啦，當一切就緒後，大膽的執行下去吧！</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">hexo d <span class="hljs-comment"># 部署 Hexo</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/LolGDPC.png" alt="部署 Hexo"></p><p>如果執行後如圖這樣，恭喜你成功部署上去啦！回到 Github 儲存庫，可以看到檔案都存上去了。而部署的檔案，僅有產生出的靜態網頁。</p><p><img src="https://i.imgur.com/GCqRvan.png" alt="Hexo 檔案成功部署到 Github"></p><blockquote><h2 id="公開部落格頁面"><a href="#公開部落格頁面" class="headerlink" title="公開部落格頁面"></a>公開部落格頁面</h2></blockquote><p>此時要設定部署的部落格公開成能夠使網友進入的頁面，，儲存庫右上角有個 <strong>Settings</strong>，點進去。</p><p><img src="https://i.imgur.com/cEDScb2.png" alt="點擊 Settings"></p><p>往下滑到快接近底部時，可以看到稍微有點橘色的框框，請點擊 <strong>Check it out here</strong>。</p><p><img src="https://i.imgur.com/ba9CYIt.png" alt="還未公開頁面"></p><p>點擊後會重新整理頁面，此時就能夠看到剛剛設定的網址了！</p><p><img src="https://i.imgur.com/yQ6yDP0.png" alt="頁面公開成功"></p><p>點擊網址後，就成功跳轉到自己的部落格了啊！！總算是完成了這項創舉，是否感到開心與感動呢～</p><p><img src="https://i.imgur.com/KskXj9f.png" alt="部署到 Github 上的部落格"></p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>當初我自己試著部署的時候吃了滿多苦頭的 QQ，畢竟第一次總是會比較困難，然後其實自己也有點忘記當初是怎麼解決的了（？），不過就是 <code>_config.yml</code> 那裡有些設定沒有設定好，所以各個環節都非常重要啊！希望大家都能夠順利完成啊！</p><p>參考資料，大家可以參考一下～另外大家或許會覺得，為何有一個參考資料比較像是遇到錯誤而去找的解決方法呢？因為我忘記還要安裝 Hexo-deployer-git 套件了啊 XDD 畢竟我也只裝過一兩次而已，總是會忘記的 XDD 所以才要寫文章來恢復記憶啊（？）</p><p>最後恭喜大家走到今天這步啦！我也距離完賽更近一步了（？）未來二十幾天還會分享一些有關於 Hexo 的相關內容，再請大家敬請期待啦～</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://ithelp.ithome.com.tw/articles/10253277">Day 30：Deploy To GitHub Pages - iT 邦幫忙</a></li><li><a href="https://blog.csdn.net/qq_21808961/article/details/84476504">hexo d命令报错 ERROR Deployer not found: git</a></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10272520">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 10：為你的 Hexo 增加頁面：標籤、分類與自訂頁面</title>
    <link href="/hexo30-10/"/>
    <url>/hexo30-10/</url>
    
    <content type="html"><![CDATA[<p>昨天介紹新增文章，今天要來介紹新增頁面。這兩者有什麼差別呢？一般來說如果是跟網站有關的資訊、或是一些關於你的介紹，這種比較不適合發在一般文章的，就很適合建立一個頁面，並以 Next 佈景主題為例，設定能透過主選單連到頁面。</p><a id="more"></a><blockquote><h2 id="如何建立自訂頁面？"><a href="#如何建立自訂頁面？" class="headerlink" title="如何建立自訂頁面？"></a>如何建立自訂頁面？</h2></blockquote><p>建立頁面的指令格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">hexo new page <span class="hljs-string">&quot;頁面名稱（網址用）&quot;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/jeoBEJR.png" alt="建立 about 頁面"></p><p>以上圖範例為例，我建立了一個 about 頁面，打算利用這個頁面介紹我自己與這個網站，大家也可以依照使用情境建立頁面。</p><blockquote><h2 id="存放位置與頁面資訊"><a href="#存放位置與頁面資訊" class="headerlink" title="存放位置與頁面資訊"></a>存放位置與頁面資訊</h2></blockquote><p>有別於文章與草稿有各自不同的目錄存放，<strong>頁面檔案是獨立存放於一個目錄中的</strong>，像是我剛剛建立了 about 頁面，頁面存放位置於 ./source/about 內，而檔案名稱為 <code>index.md</code>。</p><p>因此如果你要將草稿建立成頁面，假設你的頁面叫做「message」，就要在 source 目錄內建立一個名為 message 的目錄，將草稿檔案移進去目錄後，將檔案名稱改為 <code>index.md</code> 即可。</p><h3 id="頁面資訊"><a href="#頁面資訊" class="headerlink" title="頁面資訊"></a>頁面資訊</h3><p>頁面預設的資訊僅有 title 以及 date，分別是頁面標題與時間，不過這邊我們可以加一個 <code>comments</code>，原因是若之後我們在 Hexo 增加文章留言功能，<strong>預設頁面是可以留言的</strong>，但有時候我們會希望頁面就是專門提供資訊，不開放留言，就可以增加這段語法。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">title: about<br>date: 2021-08-28 18:46:39<br>comments: <span class="hljs-literal">false</span> &lt;!-- 設定為 <span class="hljs-literal">false</span> 表示不開放留言 --&gt;<br></code></pre></div></td></tr></table></figure><p>接下來的內容，就一樣使用 Markdown 隨你打啦～後續一樣透過指令 <code>hexo g</code> 建立頁面就能看到成果了。</p><blockquote><h2 id="建立文章分類與標籤頁"><a href="#建立文章分類與標籤頁" class="headerlink" title="建立文章分類與標籤頁"></a>建立文章分類與標籤頁</h2></blockquote><p>而 Hexo 本身提供一些能夠<strong>連動網站資訊的頁面</strong>，例如<strong>文章分類</strong>與<strong>標籤頁</strong>，建立的方式就跟建立自訂頁面一樣：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 建立標籤頁</span><br>hexo new page tags<br><span class="hljs-comment"># 建立分類頁</span><br>hexo new page categories<br></code></pre></div></td></tr></table></figure><p>不過建立之後，我們必須再做一個動作，以標籤為例，我們開啟頁面後，一樣會看到預設的 title 與 date 資訊，<strong>此時如果要連接 Hexo 資訊，就要加上 <code>type</code> 資訊</strong>，並設定為 <code>tags</code>，範例如下：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh">title: 標籤<br>date: 2021-08-28 19:15:03<br><span class="hljs-built_in">type</span>: tags &lt;!-- 將頁面類型設定為 tags（標籤） --&gt;<br>comments: <span class="hljs-literal">false</span> &lt;!-- 設定頁面不開放留言 --&gt;<br></code></pre></div></td></tr></table></figure><p>於是，就可以在標籤頁看到所有標籤啦！</p><p><img src="https://i.imgur.com/NW7Zy9z.png" alt="標籤頁"></p><p>分類頁也是利用同樣的方式，增加 type 並設定為 <code>categories</code> 即可。</p><blockquote><h2 id="利用主選單連到頁面（以-Next-佈景主題為例）"><a href="#利用主選單連到頁面（以-Next-佈景主題為例）" class="headerlink" title="利用主選單連到頁面（以 Next 佈景主題為例）"></a>利用主選單連到頁面（以 Next 佈景主題為例）</h2></blockquote><p>因為是設定 Next 方面的內容，所以我們要開啟 ./themes/next/_config.yml 檔案並找到以下語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-home</span><br>  <span class="hljs-comment">#about: /about/ || fa fa-user</span><br>  <span class="hljs-comment">#tags: /tags/ || fa fa-tags</span><br>  <span class="hljs-comment">#categories: /categories/ || fa fa-th</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-archive</span><br>  <span class="hljs-comment">#schedule: /schedule/ || fa fa-calendar</span><br>  <span class="hljs-comment">#sitemap: /sitemap.xml || fa fa-sitemap</span><br>  <span class="hljs-comment">#commonweal: /404/ || fa fa-heartbeat</span><br></code></pre></div></td></tr></table></figure><p>我們只要把 <code>#tags</code>、<code>#categories</code> 解除註解即可，另外 Hexo 很貼心，連同 about 也一起加了 XD 一樣，將 <code>#about</code> 那一行解除註解即可。不過如果你的關於頁面不是設定成 about（或許可能是你的英文名字），那就改成你設定的名稱即可。</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>如此一來網站基本該有的內容都大致上完成了，雖然後續還有像是留言版的功能，不過這部分就先暫緩，畢竟要先上傳到網路上，才會有人留言嘛！（除非你要自言自語我也是沒意見啦 XD）</p><p>因此明天，我們就要將 Hexo 上傳到 Github Pages 上啦，屆時你的部落格就能夠呈現在網路上了。頁面建立好後，就等明天來見證這歷史的一刻吧（？）</p><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10271854">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 9：使用 Typora 發表你的第一篇 Hexo 文章</title>
    <link href="/hexo30-9/"/>
    <url>/hexo30-9/</url>
    
    <content type="html"><![CDATA[<p>今天我們正式要使用 Markdown 撰寫你的第一篇部落格文章啦！</p><a id="more"></a><blockquote><h2 id="用指令建立文章或草稿-md-檔"><a href="#用指令建立文章或草稿-md-檔" class="headerlink" title="用指令建立文章或草稿 .md 檔"></a>用指令建立文章或草稿 .md 檔</h2></blockquote><p>首先，打開 Git 輸入以下指令：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 指定部落格目錄</span><br><span class="hljs-built_in">cd</span> 部落格目錄<br><br><span class="hljs-comment"># 建立文章 .md 檔</span><br>hexo new <span class="hljs-string">&quot;文章名稱（網址用）&quot;</span><br><span class="hljs-comment"># 建立草稿 .md 檔</span><br>hexo new draft <span class="hljs-string">&quot;文章名稱（網址用）&quot;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://i.imgur.com/3kRRlYO.png" alt="hexo new"></p><!-- ![](https://i.imgur.com/tXt21xt.png) --><p>照著 Git 回傳的路徑（基本上會放置在 <code>./source/_post</code> 內 ），回到 VScode 查看左側目錄列表，就可以看到檔案已經新增，並且有附上一些文章必備資訊。</p><p><img src="https://i.imgur.com/4Vf9gu0.png" alt="VScode 目錄"></p><p>至於若是建立草稿（文章與頁面都可），可以看到建立的 .md 檔會放置在 <code>./source/_drafts</code> 內，存放在 <code>_drafts</code> 目錄內的檔案不會被建立成文章或是頁面，因此如果你想先建立檔案但不一定要先發佈，可以先建立成草稿，等到要發佈時，在移動到 _post 目錄內或是獨立建成一個頁面。（頁面部分會於明天說明）</p><p><img src="https://i.imgur.com/Q4Huxh6.png" alt="建立草稿文章"></p><blockquote><h2 id="使用-Typora-撰寫文章"><a href="#使用-Typora-撰寫文章" class="headerlink" title="使用 Typora 撰寫文章"></a>使用 Typora 撰寫文章</h2></blockquote><p>屆時我們可以利用 Typora 開啟這個 .md 檔，利用專門的 Markdown 編輯器可以幫助我們更省力於文章撰寫上。</p><p><img src="https://i.imgur.com/dM2436B.png" alt="使用 Typora 撰寫文章"></p><blockquote><h2 id="設定文章資訊"><a href="#設定文章資訊" class="headerlink" title="設定文章資訊"></a>設定文章資訊</h2></blockquote><p>再來我們可以看到預設檔案建立之後，會附帶一些資訊，預設有常見的 <code>title</code>、<code>date</code> 以及 <code>tags</code>，而我自己還會再加上 <code>categories</code>，那分別代表什麼呢？</p><ul><li>title 文章標題</li><li>date 文章建立日期 / 時間，預設會抓檔案建立日期</li><li>tags 文章標籤</li><li>categories 文章分類</li></ul><p>至於文章網址則會抓你的檔案名稱，所以如果你希望網址是英文呈現的話，就要想個英文名稱。</p><h3 id="設定範例"><a href="#設定範例" class="headerlink" title="設定範例"></a>設定範例</h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">---<br>title: 我的第一篇文章<br>date: 2021-08-27 14:30:40 &lt;!-- 預設即可 --&gt;<br>tags:<br><span class="hljs-bullet">-</span> [文章標籤一]<br><span class="hljs-bullet">-</span> [文章標籤二]<br>categories:<br><span class="hljs-bullet">-</span> [文章分類]<br>---<br></code></pre></div></td></tr></table></figure><p>標籤與文章分類我建議都使用 <code>- []</code> 包覆，因為其中分類有加中括號跟沒加會有不一樣的效果，這部分我們會於日後篇章再來說明這部分的差異。</p><blockquote><h2 id="開始撰寫文章啦！"><a href="#開始撰寫文章啦！" class="headerlink" title="開始撰寫文章啦！"></a>開始撰寫文章啦！</h2></blockquote><p>關於一般文章會使用到的 Markdown 撰寫可搭配昨天篇章「<a href="https://guiblogs.com/hexo30-8/">Day 8：先別急著撰寫文章，你聽過 Markdown 嗎？</a>」一起服用，雙重享受（？</p><p><del>所以今天這篇文章就到這裡結束了</del>（不是這樣的吧 XD）好啦還有，接下來的部分就會比較著重在 Typora 本身功能的設定，只要能夠善用，就能夠提升文章撰寫的效率。</p><h3 id="挑選一個順眼的編輯器主題"><a href="#挑選一個順眼的編輯器主題" class="headerlink" title="挑選一個順眼的編輯器主題"></a>挑選一個順眼的編輯器主題</h3><p>撰寫一篇文章需要花費時間大約是一至兩個小時，一個順眼的編輯器絕對相當重要啊！就如同許多編輯器都有提供多種不同的編輯器主題，Typora 本身也內建立了五個主題可讓我們做切換選擇，我自己平常是使用 Night 這個主題，圖下圖所示。大家也可以找個順眼的主題看看。</p><p><img src="https://i.imgur.com/J4PAK40.png" alt="編輯器主題"></p><h3 id="選取文字範圍按右鍵"><a href="#選取文字範圍按右鍵" class="headerlink" title="選取文字範圍按右鍵"></a>選取文字範圍按右鍵</h3><p><img src="https://i.imgur.com/lymLWme.png" alt="選取文字範圍按右鍵"></p><p>選取文字範圍按右鍵後，可以看到許多類似像所見即所得的工具列選項，當你點擊「B」，所選取文字範圍就會變成粗體。由左上到右下總共分別有：</p><ul><li>B 粗體</li><li><em>I</em> 斜體</li><li>&lt;/&gt; 程式碼區塊</li><li>🔗 鏈結<ul><li>必須先複製一個鏈結，按下它後所選取範圍就會產生鏈結</li></ul></li><li>雙逗號：引用區塊</li><li>有序清單（有標數字的清單）</li><li>無序清單（本清單即使此清單）</li><li><ul><li><input disabled="" type="checkbox"> 核取方塊</li></ul></li></ul><h3 id="選取文字範圍按右鍵：段落"><a href="#選取文字範圍按右鍵：段落" class="headerlink" title="選取文字範圍按右鍵：段落"></a>選取文字範圍按右鍵：段落</h3><p><img src="https://i.imgur.com/6pVmnus.png" alt="選取文字範圍按右鍵：段落"></p><p>這部分會自動幫我們產生出各級段落 # 字號。</p><h3 id="右鍵-—-gt-插入"><a href="#右鍵-—-gt-插入" class="headerlink" title="右鍵 —&gt; 插入"></a>右鍵 —&gt; 插入</h3><p><img src="https://i.imgur.com/3eoGEYy.png" alt="右鍵 ---&gt; 插入"></p><p>這裡可以插入一些像是圖片、註解等等資訊，不過我自己是很少用啦，當然大家也可以玩玩看。</p><h3 id="貼上截圖產生圖片"><a href="#貼上截圖產生圖片" class="headerlink" title="貼上截圖產生圖片"></a>貼上截圖產生圖片</h3><p>我自己做撰寫時是不太使用右鍵插入的方式，因為當你截圖並且目前已經複製那張圖片時，直接在 Typora 內貼上，它就會自動產生出圖片啦！</p><p><img src="https://i.imgur.com/Qm01rnY.png" alt="貼上截圖產生圖片"></p><p><code>![提示文字](圖片網址)</code> 便是圖片的 Markdown 語法，而使用此方式我們只須填上提示文字就好，檔案已經進行產生。不過如果覺得這路徑有點難找的話，按下上面工具列的「檔案」 —&gt; 「偏好設定」來到設定頁面，再來點選左邊選單的「圖片」就能夠進行圖片儲存路徑設定。</p><p><img src="https://i.imgur.com/jPR5T7T.png" alt="設定圖片儲存路徑"></p><p>不過我個人認為美中不足的點是它目前僅提供產生 .png 檔，不然其實 .jpg 的檔案大小會比較小，所以我自己都會特別用線上工具把圖片檔轉成 .jpg 後再上傳，只希望能夠盡快提供副檔名選項給我們選擇了 QQ</p><p>至於圖片空間的部分……因為我自己的方法需要使用到自己的網址比較不一樣，這邊我就不做分享。不過我自己在找相關資料時是有查到「<a href="https://pjchender.blogspot.com/2020/08/app-typora-imgur-for-mac.html">[App] Typora 自動上傳圖片到 imgur (for Mac)</a>」，不過我自己是沒有試過，各位可以試試看。</p><p>對了，如果覺得自動化有點複雜，也是可以直接使用 Imgur 提供的圖片上傳平台來上傳圖片。至於我自己使用的方法，目前預計會分享在 31 天之後的「彩蛋篇」，大家可以期待一下！</p><blockquote><h2 id="產生文章頁面"><a href="#產生文章頁面" class="headerlink" title="產生文章頁面"></a>產生文章頁面</h2></blockquote><p>OK，當文章編輯完成後，要如何產生文章呢？其實很簡單，執行 <code>hexo g</code> 指令產生頁面就好了，然後再執行 <code>hexo g</code> 產生虛擬伺服器就可以看到我們撰寫的文章囉！</p><blockquote><h2 id="文章太長怎麼辦？"><a href="#文章太長怎麼辦？" class="headerlink" title="文章太長怎麼辦？"></a>文章太長怎麼辦？</h2></blockquote><p>產生文章後回到首頁，發現整篇文章內容都顯示在首頁上。如果只想要顯示第一段內容，其他內容則引導讀者點擊標題或點閱讀全文進去瀏覽的話，該怎麼做呢？</p><p><img src="https://i.imgur.com/lSiN8mt.png" alt="文章太長怎麼辦？"></p><p>在想要截斷的地方（例如第一段結束），加入以下這段語法：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&lt;!-- more  --&gt;<br></code></pre></div></td></tr></table></figure><p>重新 <code>hexo g</code>、<code>hexo s</code> 後，回到首頁，就能看到首頁僅顯示第一段內容，並出現了「閱讀全文」按鈕。</p><p><img src="https://i.imgur.com/3HJPdO5.png" alt="加入閱讀全文按鈕"></p><blockquote><h2 id="刪除文章"><a href="#刪除文章" class="headerlink" title="刪除文章"></a>刪除文章</h2></blockquote><p>如果要刪除文章該怎麼辦呢？也很簡單，只要把文章 .md 檔案刪除就可以了。</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>撰寫完文章後，明天的篇章會是有關於 Hexo 文章分類、標籤與自訂頁面建立，大家再一起加油，後天就要將部落格部署到網路上啦～</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://orandigo.github.io/blog/2020/03/08/20200308-hexo/">Hexo 主題設定</a></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10271160">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 8：先別急著撰寫文章，你聽過 Markdown 嗎？</title>
    <link href="/hexo30-8/"/>
    <url>/hexo30-8/</url>
    
    <content type="html"><![CDATA[<p>相信有人已經迫不及待要撰寫文章了，不過在這之前，我們先來介紹一下 Markdown 這個標記語言。</p><a id="more"></a><blockquote><h2 id="什麼是-Markdown？"><a href="#什麼是-Markdown？" class="headerlink" title="什麼是 Markdown？"></a>什麼是 Markdown？</h2></blockquote><p>過去撰寫部落格，比方說無名小站或是其它 BSP 服務、WordPress 傳統編輯器，都有提供所見即所得模式，就如同 Word 的使用體驗，可以透過上方工具列選擇需要的文字大小、顏色、粗體或斜體、刪除線、……等多項功能，但是 Hexo 預設並無提供這樣的功能，取而代之的是使用 Markdown 來進行撰寫。</p><p>Markdown 是一個輕量級標記式語言，說到標記語言，能夠立即聯想到的就是 HTML，我們透過 <code>&lt;h1&gt;&lt;/h1&gt;</code> 代表 h1 標題、<code>&lt;p&gt;&lt;/p&gt;</code> 代表段落。Markdown 也是同樣的概念，但寫法又更加精簡，而且還能轉換成 HTML，因此很適合用於撰寫文章使用。</p><blockquote><h2 id="Markdown-有哪些標記？"><a href="#Markdown-有哪些標記？" class="headerlink" title="Markdown 有哪些標記？"></a>Markdown 有哪些標記？</h2></blockquote><p>這邊就先列舉幾個比較常見的：</p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><ul><li>h1 <code>#</code></li><li>h2 <code>##</code></li><li>h3 <code>###</code></li><li>h4 <code>####</code></li><li>h5 <code>#####</code></li><li>h6 <code>######</code></li></ul><h3 id="字體"><a href="#字體" class="headerlink" title="字體"></a>字體</h3><ul><li>粗體 <code>**字體**</code></li><li>斜體 <code>*字體*</code></li><li>粗體 <code>***字體***</code></li><li>斜體 <code>~~刪除線~~</code></li></ul><h3 id="區塊"><a href="#區塊" class="headerlink" title="區塊"></a>區塊</h3><ul><li><p>引用： <code>&gt;</code></p><ul><li>如果需要多行，可每一行自首加上 <code>&gt;</code></li></ul></li><li><p>程式碼區塊（一行） `` &lt;— 語法要加在中間</p></li><li><p>程式碼區塊（多行）</p><figure class="highlight autohotkey"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autohotkey">\```<br>    程式語法貼這裡<br>\```<br></code></pre></div></td></tr></table></figure><h3 id="ul-與-ol"><a href="#ul-與-ol" class="headerlink" title="ul 與 ol"></a>ul 與 ol</h3></li><li><p>ul <code>* ul</code></p></li></ul><ol><li>ol <code>1. ol</code> （中間空格不能省略）</li></ol><h3 id="鏈結與圖片"><a href="#鏈結與圖片" class="headerlink" title="鏈結與圖片"></a>鏈結與圖片</h3><p>鏈結 <code>[文字](網址)</code></p><p>圖片 <code>![提示文字](圖片網址)</code></p><p><strong>以上僅列出一些，若需了解更多可以前往 <a href="https://markdown.tw/">Markdown 語法說明</a> 查看更多資訊～</strong></p><blockquote><h2 id="使用-Typora-撰寫-Markdown"><a href="#使用-Typora-撰寫-Markdown" class="headerlink" title="使用 Typora 撰寫 Markdown"></a>使用 Typora 撰寫 Markdown</h2></blockquote><p>先前安裝 Hexo 前置作業那篇已經有請大家安裝 Typora 這套程式，今天撰寫 Markdown 時就能夠派上用場。</p><h3 id="設定-h1-標題標籤"><a href="#設定-h1-標題標籤" class="headerlink" title="設定 h1 標題標籤"></a>設定 h1 標題標籤</h3><p>基本上一個 # 字號代表的就是文章標題，所以一開始若要設定文章標題，可以這樣設定：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mark"># 文章標題<br></code></pre></div></td></tr></table></figure><p>打好字後，按下 Enter 鍵，可以看到其差異性：</p><p><img src="https://img.guiblogs.com/hexo30-7/write-markdown.jpg" alt="Typora 撰寫 Markdown 時，Enter 前後差異"></p><p>可以看到撰寫的 Markdown 透過 Typora 自動編譯成 h1 的形式，而此時如果我們儲存檔案，預設提供的檔案名稱就是我們所設定的標題。</p><p><img src="https://img.guiblogs.com/hexo30-7/save-file.jpg" alt="儲存檔案時，檔案名稱預設會是我們所設定的文章標題"></p><p>另外點擊左下方源碼的小 icon，可以進入原始碼模式，就能夠直接看到未經編譯過的 Markdown 語法囉！</p><p><img src="https://img.guiblogs.com/hexo30-7/code-mode.jpg" alt="Typora 原始碼模式"></p><p>接下來大家就來練習看看吧！其實當大家按下右鍵時，就會發現 Typora 也有提供類似所見即所得模式的工具列，但還是建議大家可以練習撰寫 Markdown，撰寫習慣之後，目前我自己是除了設定鏈結以外，都直接像上面那樣打標籤比較方便 XD</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>過去撰寫文件基本上都是使用 Word 或是 Google 文件，但使用過 Markdown 後，就直接回不去了啊！非常符合撰寫技術文件的單純需求，大家也趕緊來練習看看吧！</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://zh.wikipedia.org/zh-tw/Markdown">Markdown - 維基百科，自由的百科全書</a></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10270615">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 7：設定你的 Hexo 佈景主題：Next（下）</title>
    <link href="/hexo30-7/"/>
    <url>/hexo30-7/</url>
    
    <content type="html"><![CDATA[<p>由於篇幅太長，所以拆分成上下篇啦！經過昨天的一些設定，相信大家已經慢慢上手了。接著今天也要接續昨天沒有介紹到的設定。一起加油設定起來！！</p><a id="more"></a><blockquote><h2 id="網站-Favicon"><a href="#網站-Favicon" class="headerlink" title="網站 Favicon"></a>網站 Favicon</h2></blockquote><p>Favicon 就是在瀏覽器標題旁邊的小 Icon，Next 預設有提供一個 N 字樣的 Favicon，但身為一個可以識別自己網站的地方，當然是不要放過啦！</p><h3 id="產生-Favicon"><a href="#產生-Favicon" class="headerlink" title="產生 Favicon"></a>產生 Favicon</h3><p>至於 Favicon 的產生方式除了自行製作之外，網路上也有許多 Favicon 製作與產生器，可以嘗試看看哦～</p><h3 id="設定-Hexo-Favicon"><a href="#設定-Hexo-Favicon" class="headerlink" title="設定 Hexo Favicon"></a>設定 Hexo Favicon</h3><p>當 Favicon 製作好後就要設定到 Hexo 啦，首先一樣到 next 目錄下的 _config.yml，找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">favicon:</span><br>  <span class="hljs-attr">small:</span> <span class="hljs-string">/images/favicon-16x16-next.png</span><br>  <span class="hljs-attr">medium:</span> <span class="hljs-string">/images/favicon-32x32-next.png</span><br>  <span class="hljs-attr">apple_touch_icon:</span> <span class="hljs-string">/images/apple-touch-icon-next.png</span><br>  <span class="hljs-attr">safari_pinned_tab:</span> <span class="hljs-string">/images/logo.svg</span><br>  <span class="hljs-comment">#android_manifest: /images/manifest.json</span><br>  <span class="hljs-comment">#ms_browserconfig: /images/browserconfig.xml</span><br></code></pre></div></td></tr></table></figure><p>換成自己的圖示網址，或是放置到 ./themes/next/source/images 目錄內，在指定檔案名稱即可。（或是直接覆蓋原先檔案）</p><blockquote><h2 id="回到頂部按鈕"><a href="#回到頂部按鈕" class="headerlink" title="回到頂部按鈕"></a>回到頂部按鈕</h2></blockquote><p>在 ./themes/next/_config.yml 找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">back2top:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Back to top in sidebar.</span><br>  <span class="hljs-attr">sidebar:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Scroll percent label in b2t button.</span><br>  <span class="hljs-attr">scrollpercent:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><ul><li>將 sidebar 設定為 true：設定在側邊欄的個人資訊區塊中，Social Links 下，顯示回到頂部按鈕。</li><li>將 scrollpercent 設定為 true：回到頂部按鈕旁加上閱讀進度百分比。</li></ul><p><img src="https://i.imgur.com/gmDBmAA.png" alt="回到頂部按鈕"></p><blockquote><h2 id="閱讀進度條"><a href="#閱讀進度條" class="headerlink" title="閱讀進度條"></a>閱讀進度條</h2></blockquote><p>上一段剛好有介紹到閱讀進度數值，而這一段則是可以在讀者滑動的過程中，頂部或是底部有個進度條，隨著你的閱讀進度進行滑動。</p><p>在 ./themes/next/_config.yml 找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Reading progress bar</span><br><span class="hljs-attr">reading_progress:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># Available values: top | bottom</span><br>  <span class="hljs-attr">position:</span> <span class="hljs-string">top</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">&quot;#37c6c0&quot;</span><br>  <span class="hljs-attr">height:</span> <span class="hljs-string">3px</span><br></code></pre></div></td></tr></table></figure><ul><li>enable：設定是否開啟進度條，開啟則設定 true</li><li>position：設定進度條在頂部還是底部顯示</li><li>color：進度條背景顏色</li><li>height：進度條高度</li></ul><p><img src="https://i.imgur.com/S9Yd6aI.png" alt="閱讀進度條"></p><p>我設定個高度 10px 在底部顯示讓大家看比較清楚，目前閱讀進度 62%，進度條的寬度就會在可視範圍內寬度 62% 位置處。</p><p>大家也可以把高度設定為 100vh 來看看部落格被進度條整個蓋住的效果哦（笑）</p><blockquote><h2 id="語法區塊樣式"><a href="#語法區塊樣式" class="headerlink" title="語法區塊樣式"></a>語法區塊樣式</h2></blockquote><p>我們可以看到預設範例文章就有語法區塊的範例，但是我想改變呈現的樣式，該怎麼做呢？</p><p><img src="https://img.guiblogs.com/hexo30-6/codeblock.jpg" alt="預設語法區塊樣式"></p><p>找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">codeblock:</span><br>  <span class="hljs-comment"># Code Highlight theme</span><br>  <span class="hljs-comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br>  <span class="hljs-comment"># See: https://github.com/chriskempson/tomorrow-theme</span><br>  <span class="hljs-attr">highlight_theme:</span> <span class="hljs-string">normal</span><br>  <span class="hljs-comment"># Add copy button on codeblock</span><br>  <span class="hljs-attr">copy_button:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># Show text copy result.</span><br>    <span class="hljs-attr">show_result:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># Available values: default | flat | mac</span><br>    <span class="hljs-attr">style:</span><br></code></pre></div></td></tr></table></figure><p> highlight_theme 是整體區塊主題、copy_button 則是設定複製語法的按鈕位置與樣式。一樣，每個都嘗試套用看看，找到一個你滿意的語法區塊樣式吧！</p><blockquote><h2 id="留言區塊、GA-設定、……-還有其它"><a href="#留言區塊、GA-設定、……-還有其它" class="headerlink" title="留言區塊、GA 設定、…… 還有其它"></a>留言區塊、GA 設定、…… 還有其它</h2></blockquote><p>Next 留了非常多區塊讓我們可以直接將留言的功能或是 GA 代碼貼到指定的地方就可以直接運行，不過這些部分又牽涉到第三方服務，我們就留待之後再說明，請大家敬請期待 XD</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>坦白說為了寫這兩篇文章，讓我對 Next 有了更全面的認識啊！就像主選單使用絕對路徑是我突發奇想想說可不可以這樣，然後就成功了！結果寫到社群鏈結部分時，才發現似乎是相同概念的東西，社群鏈結都可以使用絕對路徑了，主選單當然也可以啊 XD</p><p>想想開始使用 Hexo 至今也差不多七個多月的時間，現在回頭來看這些收穫跟視野又不同了，所以剛開始用 Hexo 的各位也不用太過於慌張，每天進步一點點，或許沒什麼感覺，但回頭來看真的累積了很多啊！</p><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10269747">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 6：設定你的 Hexo 佈景主題：Next（上）</title>
    <link href="/hexo30-6/"/>
    <url>/hexo30-6/</url>
    
    <content type="html"><![CDATA[<p>昨天我們安裝了 Next 這個佈景主題，今天就要來介紹如何編輯設定 Next，以及 Next 提供了什麼樣的功能與選項給我們使用。</p><a id="more"></a><blockquote><h2 id="開啟設定檔"><a href="#開啟設定檔" class="headerlink" title="開啟設定檔"></a>開啟設定檔</h2></blockquote><p>我們要開啟的檔案是在 Hexo 根目錄下的 thems/next/_config.yml 這支檔案。不是根目錄的 _config.yml 哦！</p><p><img src="https://img.guiblogs.com/hexo30-6/config-yml.jpg" alt="開啟 Next 設定檔"></p><ul><li>根目錄下的 _config.yml：針對網站進行設定</li><li>thems/next/_config.yml：針對佈景主題進行設定</li></ul><blockquote><h2 id="Scheme-設定"><a href="#Scheme-設定" class="headerlink" title="Scheme 設定"></a>Scheme 設定</h2></blockquote><p>找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># ---------------------------------------------------------------</span><br><span class="hljs-comment"># Scheme Settings</span><br><span class="hljs-comment"># ---------------------------------------------------------------</span><br><br><span class="hljs-comment"># Schemes</span><br><span class="hljs-attr">scheme:</span> <span class="hljs-string">Muse</span><br><span class="hljs-comment">#scheme: Mist</span><br><span class="hljs-comment">#scheme: Pisces</span><br><span class="hljs-comment">#scheme: Gemini</span><br><br><span class="hljs-comment"># Dark Mode</span><br><span class="hljs-attr">darkmode:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><h3 id="選擇-Schemes"><a href="#選擇-Schemes" class="headerlink" title="選擇 Schemes"></a>選擇 Schemes</h3><p>Next 提供了四種 Scheme 給我們選擇，所以雖然同為 Next，但其實分別有四種不同的樣式可以提供我們選擇，以我的部落格 <a href="https://guiblogs.com/">Gui Blog - 網站的工具人</a> 為例，目前選擇使用的就是 Pisces 的 Scheme。</p><p>Next 預設 Scheme 為 Muse，此時如果要設定成其它 Scheme，只要將原本的 Muse 設定為註解，將選擇使用的 Scheme 解除註解就可以指定了。yml 檔的註解是使用 <code>#</code> 井字號來區隔。</p><p>這邊就不提供四種 Scheme 的展示圖了，讓各位動手嘗試看看！</p><h3 id="黑暗模式"><a href="#黑暗模式" class="headerlink" title="黑暗模式"></a>黑暗模式</h3><p>現在 Facebook、Instagram 都有提供黑暗模式，Next 也有黑暗這個模式 XD 將 <code>darkmode</code> 設定值改為 true，網站就會啟用黑暗模式了。</p><blockquote><h2 id="設定頁尾作者鏈結"><a href="#設定頁尾作者鏈結" class="headerlink" title="設定頁尾作者鏈結"></a>設定頁尾作者鏈結</h2></blockquote><p>在昨天的篇章有設定到作者名字，因此正常來說頁尾部分就會顯示你所設定的名稱。不過預設僅僅是一段文字，要怎麼設定成一個鏈結呢？</p><p><img src="https://img.guiblogs.com/hexo30-6/footer-author-text.jpg" alt="image-20210824164604042"></p><p>找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span><br><span class="hljs-attr">copyright:</span><br></code></pre></div></td></tr></table></figure><p>撰寫HTML a 鏈結語法，設定完成後就可以看到頁尾作者文字變成了鏈結。</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">copyright:</span> <span class="hljs-string">&quot;&lt;a href=&#x27;指定鏈結&#x27;&gt;你的名字&lt;/a&gt;&quot;</span><br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/hexo30-6/footer-author-link.jpg" alt="變更頁尾作者名字，順便設定成超鏈結"></p><blockquote><h2 id="主選單設置"><a href="#主選單設置" class="headerlink" title="主選單設置"></a>主選單設置</h2></blockquote><p><img src="https://img.guiblogs.com/hexo30-6/nav-item.jpg" alt="Next 主選單設置"></p><p>找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-home</span><br>  <span class="hljs-comment">#about: /about/ || fa fa-user</span><br>  <span class="hljs-comment">#tags: /tags/ || fa fa-tags</span><br>  <span class="hljs-comment">#categories: /categories/ || fa fa-th</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-archive</span><br>  <span class="hljs-comment">#schedule: /schedule/ || fa fa-calendar</span><br>  <span class="hljs-comment">#sitemap: /sitemap.xml || fa fa-sitemap</span><br>  <span class="hljs-comment">#commonweal: /404/ || fa fa-heartbeat</span><br></code></pre></div></td></tr></table></figure><p>基本上它的格式會是：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">分頁名稱:</span> <span class="hljs-string">路徑</span> <span class="hljs-string">||</span> <span class="hljs-string">Icon</span> <span class="hljs-string">圖示</span><br></code></pre></div></td></tr></table></figure><p>由於 Hexo 預設開啟的頁面為首頁以及 archives 歸檔頁，其它像是關於、標籤以及分類頁都需要我們額外新增頁面，因此在這裡就先不進行開啟，會於日後章節說明。</p><h3 id="新增自訂選單鏈結，也可以設定絕對路徑！"><a href="#新增自訂選單鏈結，也可以設定絕對路徑！" class="headerlink" title="新增自訂選單鏈結，也可以設定絕對路徑！"></a>新增自訂選單鏈結，也可以設定絕對路徑！</h3><p>主選單不一定只能連到網站本身的頁面，也可以透過設定絕對鏈結連到其它網站。這邊的範例就設定 URL 連到我正式的部落格，Icon 圖示則稍微偷偷用了目前尚未開啟的 about 的圖示（也可以換成其它 Icon），如下所示：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">前往</span> <span class="hljs-attr">Gui Blog:</span> <span class="hljs-string">https://guiblogs.com/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-user</span><br></code></pre></div></td></tr></table></figure><p>設定完之後就可以看到新增了新的選單鏈結，另外點選這個鏈結之後會以新分頁開啟，左邊兩個鏈結則會在本頁開啟。</p><p><img src="https://img.guiblogs.com/hexo30-6/add-item-link.jpg" alt="新增選單"></p><h3 id="選單樣式設定"><a href="#選單樣式設定" class="headerlink" title="選單樣式設定"></a>選單樣式設定</h3><p>找到以下這段語法：（主選單設置下方）</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">menu_settings:</span><br>  <span class="hljs-comment"># 是否要顯示 icon 圖示</span><br>  <span class="hljs-attr">icons:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 是否要顯示數值</span><br>  <span class="hljs-attr">badges:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><ul><li><code>icons</code> 控制選單是否要顯示圖示，若改為 <code>false</code> 主選單只會呈現我們所設定的文字，圖示則不會顯示。</li><li><code>badges</code> 可以理解成像是 Line 旁邊會顯示你有幾則未讀訊息，如果設定成 true：<ul><li>「歸檔」其實就是收錄你所有的文章，因此若 <code>badges</code> 設定為 true，就會在文字旁邊顯示你目前的文章數量。</li><li>未來若新增標籤、分類頁面並設定於主選單，在 <code>badges</code> 設定為 true 的情況之下，也會分別於文字旁分別顯示你目前的標籤數量以及分類數量。</li></ul></li></ul><p>一樣不附圖，請大家動手嘗試看看～（其實是懶癌發作 XD）</p><blockquote><h2 id="邊欄位置"><a href="#邊欄位置" class="headerlink" title="邊欄位置"></a>邊欄位置</h2></blockquote><p>如果你的 Scheme 是選擇 Pisces 或 Gemini 的話，就會直接看到文章列表旁邊的邊欄（如果是 Muse 跟 Mist 的話，可以看到左下角的方形內三條線的按鈕，點一下就會跑出邊欄了），預設是靠左的，但如果我希望它靠右該如何做到？</p><p>找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">sidebar:</span><br>  <span class="hljs-comment"># Sidebar Position.</span><br>  <span class="hljs-attr">position:</span> <span class="hljs-string">left</span><br>  <span class="hljs-comment">#position: right</span><br></code></pre></div></td></tr></table></figure><p><code>position</code> 的部分，將 left 那行註解並將 right 那行解除註解就可以看到邊欄變成在右邊了。</p><p>另外如果使用手機或是較小可視範圍的視窗查看的話，都是會直接消失的。這個部分我也還在看怎麼解決 QQ 如果有大神路過也可以幫我解答一下 &gt;&lt;</p><blockquote><h2 id="個人資訊區塊"><a href="#個人資訊區塊" class="headerlink" title="個人資訊區塊"></a>個人資訊區塊</h2></blockquote><h3 id="大頭貼"><a href="#大頭貼" class="headerlink" title="大頭貼"></a>大頭貼</h3><p>找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">avatar:</span><br>  <span class="hljs-comment"># Replace the default image and set the url here.</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-comment">#/images/avatar.gif</span><br></code></pre></div></td></tr></table></figure><p>把 url 改成大頭貼的網址就可以了。</p><h3 id="社群鏈結"><a href="#社群鏈結" class="headerlink" title="社群鏈結"></a>社群鏈結</h3><p>找到以下這段語法：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">social:</span><br>  <span class="hljs-comment">#GitHub: https://github.com/yourname || fab fa-github</span><br>  <span class="hljs-comment">#E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span><br>  <span class="hljs-comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span><br>  <span class="hljs-comment">#Google: https://plus.google.com/yourname || fab fa-google</span><br>  <span class="hljs-comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span><br>  <span class="hljs-comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span><br>  <span class="hljs-comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span><br>  <span class="hljs-comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span><br>  <span class="hljs-comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span><br>  <span class="hljs-comment">#Skype: skype:yourname?call|chat || fab fa-skype</span><br></code></pre></div></td></tr></table></figure><p>格式其實跟主選單很像，就是先名稱、網址，再來則是 Icon 圖示。</p><p>另外也有提供針對社群鏈結選單的樣式設定：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">social_icons:</span><br>  <span class="hljs-comment"># 是否開啟顯示 icon 功能</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 是否只顯示 icon，false 則只會顯示圖示</span><br>  <span class="hljs-attr">icons_only:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 若設定 true，滑動到社群鏈結時，會有轉場效果，鏈結不會硬生生轉色</span><br>  <span class="hljs-attr">transition:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><p>一樣效果請大家自己嘗試看看囉！另外有趣的一點是，<code>enable</code> 跟 icons_only 似乎是相互矛盾的設定（？）不過如果要顯示 Icon，<code>enable</code> 一定要設定 true 才行。因為我自己測試 <code>enable</code> 設定 false、<code>icons_only</code> 設定 true，也只會顯示文字，不會顯示 Icon。</p><blockquote><h2 id="未完待續！"><a href="#未完待續！" class="headerlink" title="未完待續！"></a>未完待續！</h2></blockquote><p>由於篇幅過長，所以就拆分成兩篇來寫啦～明天還有許多精彩的設定在等著大家，大家敬請期待囉！</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://tiida54.github.io/2018/01/05/3%E5%88%86%E9%90%98%E5%AE%8C%E6%88%90HexoBlog%E4%B8%BB%E9%A1%8CNext%E8%A8%AD%E5%AE%9A/">3分鐘完成HexoBlog主題Next設定</a></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10269050">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 5：Hexo 安裝完成後的設定密技，並且為 Hexo 換上新佈景！</title>
    <link href="/hexo30-5/"/>
    <url>/hexo30-5/</url>
    
    <content type="html"><![CDATA[<p>安裝好你的 Hexo 部落格後，部落格雖然已經有設定一些預設資料，但要將這些資料改成我們自己的資料嘛！因此今天的篇章就要來介紹安裝好後的 Hexo 有哪些可以設定的部分，並且為 Hexo 換上新佈景。</p><a id="more"></a><blockquote><h2 id="開啟設定檔"><a href="#開啟設定檔" class="headerlink" title="開啟設定檔"></a>開啟設定檔</h2></blockquote><p>由於 Hexo 是靜態網頁產生器，因此並非使用資料庫儲存 Hexo 的設定。而我們要設定 Hexo 的資訊的話，必須找到根目錄的 _config.yml 這支檔案。</p><p><img src="https://img.guiblogs.com/hexo30-5/open-config.jpg" alt="_config.yml"></p><blockquote><h2 id="設定網站資訊"><a href="#設定網站資訊" class="headerlink" title="設定網站資訊"></a>設定網站資訊</h2><p>接下來我們就要來設定網站資訊了，請找到 # site 的部分</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo</span> <span class="hljs-comment"># 你的部落格標題</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 你的部落格副標題</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 部落格簡介</span><br><span class="hljs-attr">keywords:</span> <span class="hljs-string">&#x27;關鍵字1&#x27;</span><span class="hljs-string">,</span> <span class="hljs-string">&#x27;關鍵字2&#x27;</span> <span class="hljs-comment"># 網站關鍵字，多個關鍵字用逗號隔開</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">John</span> <span class="hljs-string">Doe</span> <span class="hljs-comment"># 作者名字</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">en</span> <span class="hljs-comment"># 語言，繁體中文請設定 zh-TW</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 使用系統時間即可</span><br></code></pre></div></td></tr></table></figure><blockquote><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>任何有關設定檔案的設定值，在冒號後一定要加上一個空格在接設定值</li><li>設定完後請再次執行 hexo g、heox s，確保看得到最新設定哦</li></ul></blockquote><p>這邊來展示一下 language 設定前後的差別吧，可以看到邊欄標題的語言從英文變成中文，代表網站語系改成中文了。</p><p><img src="https://img.guiblogs.com/hexo30-5/change-langange.jpg" alt="Langange 設定"></p><blockquote><h2 id="URL-設定"><a href="#URL-設定" class="headerlink" title="URL 設定"></a>URL 設定</h2><p>找到 # URL 的部分</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">http://example.com</span> <span class="hljs-comment"># 你的正式部落格網址，可先略過，部署那一篇會提到</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span> <span class="hljs-comment"># 文章路徑</span><br><span class="hljs-comment"># 我個人的設定</span><br><span class="hljs-comment"># permalink: :title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 設置 false 則會永遠移除 index.html</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 設置 false 則會永遠移除 html</span><br><span class="hljs-comment"># 我個人的設定</span><br>  <span class="hljs-comment"># trailing_index: false</span><br>  <span class="hljs-comment"># trailing_html: false</span><br></code></pre></div></td></tr></table></figure><p>首先第一行的 url 要輸入的是你部署後的部落格網址，這個部分會再之後部署到 Github Pages 篇章中提到。</p><p>再來是 permalink 文章路徑，Hexo 預設使用網址後面加上年 / 月 / 日 / 文章標題來當作文章路徑，但其實我覺得這樣有點攏長，不如設定成網址後直接就是文章名稱，比較乾脆，網址比較短也比較有利於 SEO。</p><p>最後是 pretty_urls 的設定我都設定為 false，因為預設部落格首頁就是載入 index.html，但是使用 https://網址/ 跟 https://網址/index.html 卻都可以進入，雖然進入的頁面都一樣但是 SEO 判定上是不一樣的，因此會建議設定成 false，這樣訪客進入以 index.html 為後輟的網址時就會自動導向至 https://網址/ 的頁面。</p><blockquote><h2 id="載入文章檔案"><a href="#載入文章檔案" class="headerlink" title="載入文章檔案"></a>載入文章檔案</h2><p>找到 # Writing 的部分</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Writing</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <span class="hljs-comment"># 設定對應的文章原始編輯檔</span><br><span class="hljs-comment"># 我個人的設定</span><br><span class="hljs-comment"># new_post_name: :year-:month-:day-:title.md</span><br></code></pre></div></td></tr></table></figure><p>這邊是設定我要載入的文章，會對應到哪一個 md 檔案。之前預設是會載入到相同標題的檔案。不過在這邊我倒是比較希望可以增加日期，方便我做管理跟排序 XD 或許也能夠使用分類（我沒試過，各位有興趣可以嘗試），不過這部分是否要設定與否就看各位怎麼管理比較方便，就不強求一定要特別設置囉！</p><blockquote><h2 id="中文分類或標籤怎麼辦？在這裡設定！"><a href="#中文分類或標籤怎麼辦？在這裡設定！" class="headerlink" title="中文分類或標籤怎麼辦？在這裡設定！"></a>中文分類或標籤怎麼辦？在這裡設定！</h2><p>找到 # Category &amp; Tag 的部分：</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Category &amp; Tag</span><br><span class="hljs-attr">default_category:</span> <span class="hljs-string">uncategorized</span><br><span class="hljs-attr">category_map:</span><br>  <span class="hljs-string">中文分類:</span> <span class="hljs-string">english-category</span> <span class="hljs-comment"># 一個分類一列</span><br><span class="hljs-attr">tag_map:</span><br>  <span class="hljs-string">中文標籤:</span> <span class="hljs-string">english-tag</span> <span class="hljs-comment"># 一個標籤一列</span><br></code></pre></div></td></tr></table></figure><p>往後如果新增文章分類或是標籤是中文，因為預設網址就是會抓分類與標籤名稱，網址就會跟著是中文。因此若要改成是英文網址，就要透過以上範例方式，即可將中文網址改為英文。不過這個部分不用一開始就設定，之後新增分類或標籤有設定到中文名稱時再設定都沒問題。（不過標籤我是沒有特地設定其英文就是了）</p><blockquote><h2 id="更換佈景主題"><a href="#更換佈景主題" class="headerlink" title="更換佈景主題"></a>更換佈景主題</h2></blockquote><p>本次 Hexo 系列主題中，我們使用的佈景主題為 Nexo，這個主題目前看下來還滿多人使用的，資源相對較多，所以很推薦剛入手的新手來使用。首先我們需要下載這個佈景主題，我們需要使用指令指定到部落格根目錄後，輸入以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next<br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/hexo30-5/download-next.jpg" alt="下載 Hexo 佈景主題：Next"></p><p>下載完後找到 # Extensions，並進行以下設置：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">next</span> <span class="hljs-comment">#landscape</span><br></code></pre></div></td></tr></table></figure><p>Hexo 的預設主題是 landscape，我們將它註解後在前面加上 next，修改完後重新 hexo g、hexo s，回到部落格：</p><p><img src="https://img.guiblogs.com/hexo30-5/demo-next.jpg" alt="Next 佈景主題樣式"></p><p>當你看到這個畫面後，就代表成功更換為 Next 佈景主題囉！</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>明天我們就要設定佈景主題的 _config.yml，日後如果我們要設定跟網站有關的參數就會設定今天的這個檔案，但假如是跟 Next 相關的設定，就會設定 Nexo 目錄底下的 _config.yml 喔！這點需要特別跟大家說一下 XD</p><p>另外今天的設定修改主要是我自己有做的更新，各位如果有任何想知道其它部分怎麼改的，可以在留言跟我說唷，我再隨時將內容補上去～</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://hsiangfeng.github.io/hexo/20190517/2562079032/">Hexo Url優化(SEO)</a></li><li><a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10268369">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 4：透過 npm、Hexo 指令在本機端安裝你的 Hexo 部落格</title>
    <link href="/hexo30-4/"/>
    <url>/hexo30-4/</url>
    
    <content type="html"><![CDATA[<p>當前置必要安裝工具用好後，就可以在本機搭建 Hexo 部落格啦！安裝過程會使用到指令，所以我們要打開昨天安裝的 Git 。如果你對指令沒有很熟沒關係，我會一步步說明。</p><a id="more"></a><blockquote><h2 id="下載-Hexo-套件包"><a href="#下載-Hexo-套件包" class="headerlink" title="下載 Hexo 套件包"></a>下載 Hexo 套件包</h2></blockquote><p>要執行的指令為：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">$npm install -g hexo-cli<br></code></pre></div></td></tr></table></figure><p>npm 是一個內建於 Node.js 的套件管理系統，使用 JavaScript 所撰寫，可以想像成是 play 商店以及 Apple Store 那樣，將我們需要使用的套件（App）下載至本機使用。這個動作就是要下載 Hexo 套件回自己電腦，使電腦能夠搭建 Hexo 部落格。</p><blockquote><h2 id="安裝-Hexo"><a href="#安裝-Hexo" class="headerlink" title="安裝 Hexo"></a>安裝 Hexo</h2></blockquote><p><img src="https://img.guiblogs.com/hexo30-4/hexo-install.jpg" alt="安裝 Hexo"></p><p>首先我們要建立一個資料夾，可以設定在你的桌面或是 C 槽或 D 槽。不過這個資料夾非常重要，因為往後部落格的資料以及部署、設定，都會利用此資料夾，所以請保存好喔～</p><p>我是在 C 槽建立一個 30blog 的資料夾，做為 Hexo 目錄。建立好後，要使用指令指定這個目錄。指令是這樣執行的：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">cd &#x2F;c&#x2F;30blog<br></code></pre></div></td></tr></table></figure><p>開啟後，會看到截圖上的黃色字「~」變成我們剛剛設定的目錄，就代表位置已經指定到這個目錄。再來我們要初始化這個資料夾為 Hexo 用。指令是這樣執行的：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">hexo init<br></code></pre></div></td></tr></table></figure><p>再來進行安裝：</p><figure class="highlight plain"><figcaption><span>install</span></figcaption><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs npm">npm install<br></code></pre></div></td></tr></table></figure><p>如此一來，安裝就告一段落了。</p><blockquote><h2 id="搭建完成！看看自己的部落格"><a href="#搭建完成！看看自己的部落格" class="headerlink" title="搭建完成！看看自己的部落格"></a>搭建完成！看看自己的部落格</h2></blockquote><p>當你進行到這步時，恭喜你已經成功在自己的電腦上搭建好一個 Hexo 了。接下來有兩個指令，將在你日後發表文章、編輯文章或頁面以及樣式時大量運用。</p><h3 id="產生靜態網頁"><a href="#產生靜態網頁" class="headerlink" title="產生靜態網頁"></a>產生靜態網頁</h3><p>上次提到 Hexo 是一個靜態網頁產生器，要理解它我們可以從理解 Hexo 的運作原理講起。首先，我們可以看到目前 Hexo 目錄的內容：</p><p><img src="https://img.guiblogs.com/hexo30-4/hexo-directory.jpg" alt="Hexo 目錄"></p><p>這些都是 Hexo 的程式檔、編輯檔，而 source 裡面放置了文章、頁面。但是這些編輯檔都不是常見的 HTML，因此我們必須執行這個指令：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">hexo g<br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/hexo30-4/hexo-g.jpg" alt="產生 Hexo 靜態網頁"></p><p>此時我們可以看到執行後，多了一個 public 目錄，點擊進去後，會發現裡面有一些內容，這是 Hexo 剛搭建時會有的預設文章。</p><p>之後我們提到將網站部署到空間上時，就是會部署 public 內的內容上去，所以網友看到的就會是你產生出的靜態網頁。</p><p><img src="https://img.guiblogs.com/hexo30-4/hexo-public.jpg" alt="Hexo 產生的靜態網頁目錄"></p><h3 id="利用虛擬伺服器在本機預覽部落格"><a href="#利用虛擬伺服器在本機預覽部落格" class="headerlink" title="利用虛擬伺服器在本機預覽部落格"></a>利用虛擬伺服器在本機預覽部落格</h3><p>通常部署之前，我們就要先在本機檢查好內容才會部署到空間上，此時 Hexo 本身就有提供虛擬伺服器的功能，我們只需執行以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">hexo s<br></code></pre></div></td></tr></table></figure><p>執行代碼後會出現以下訊息：</p><p><img src="https://img.guiblogs.com/hexo30-4/hexo-s.jpg" alt="開啟 Hexo 伺服器"></p><p>其中我們可以看到兩個關鍵訊息：</p><ol><li>網址部分，大家可以看到「<a href="http://localhost:4000」這串網址，是">http://localhost:4000」這串網址，是</a> Hexo 預設伺服器網址以及埠號。</li><li>目前是開啟虛擬伺服器階段，如果要要關閉或是因為需要輸入指令而終止，點擊 Ctrl+C 就可輸入指令，但此時開設的伺服器就會連不上。</li></ol><p><img src="https://img.guiblogs.com/hexo30-4/hexo-complete.jpg" alt="Hexo 搭建完成"></p><p>你的第一個 Hexo，就此成功搭建在自己的本機上啦！</p><h3 id="如果埠號被占用怎麼辦？"><a href="#如果埠號被占用怎麼辦？" class="headerlink" title="如果埠號被占用怎麼辦？"></a>如果埠號被占用怎麼辦？</h3><p>如果你因為其他需求，剛好已經使用了 4000 這個埠號該怎麼辦呢？此時只要在原先的 <code>hexo s</code> 指令後加幾個字：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">hexo s -p 6789<br></code></pre></div></td></tr></table></figure><p>可以看到原先執行環境的網址部號已經被改變囉！</p><p><img src="https://img.guiblogs.com/hexo30-4/hexo-s-p.jpg" alt="指定埠號開啟伺服器"></p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>當初在架設 Hexo 時有在 Hackmd 上做指令筆記，結果真的要打成文章時，整個失意 QQ 或甚至是當初並沒有搞定其意思，雖然說現在也還沒很懂所有指令的意思就是了 XD 但透過寫文章以及參閱網路上各類資訊，再度讓我重回記憶。所以寫部落格真是一件非常高 CP 的事情啊！以下附上我參考的一些文章內容與資訊～</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://ed521.github.io/2019/07/hexo-install/">使用 GitHub Pages + Hexo 來架設個人部落格</a></li><li><a href="https://zh.wikipedia.org/wiki/Node.js">Node.js - 維基百科，自由的百科全書</a></li><li><a href="https://blog.yucheng.me/post/hexo-website-setup/">Hexo 網站架設</a></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10267313">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 3：安裝 Hexo 前置作業：Node.js、Git、網頁編輯器 VS code、文章編輯器 Typora</title>
    <link href="/hexo30-3/"/>
    <url>/hexo30-3/</url>
    
    <content type="html"><![CDATA[<p>在架設 Hexo 之前，有些前置作業要先進行。其中由於 Hexo 是使用 Node.js 撰寫，並且需要使用指令安裝 Hexo，因此需要安裝 Node.js 跟 Git。另外，如果要更擅於日後部落格的設定以及文章撰寫，今天還會推坑 VScode 以及 Typora 這兩個工具，就請大家繼續看下去囉！</p><a id="more"></a><blockquote><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>下載位置：<a href="https://nodejs.org/zh-tw/download/">下載 | Node.js</a></p></blockquote><p><img src="https://img.guiblogs.com/hexo30-3/nodejs-download.jpg" alt="下載 | Node.js"></p><p>版本部分會分 LTS 以及目前版本（最新版本），由於最新版本剛出可能會有比較不穩定的狀況，因此通常會建議先安裝已經釋出一段時間的成熟版本，相對較為穩定。</p><p>再來選擇相對應的作業系統下載並安裝，就可以了。</p><blockquote><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>下載位置：<a href="https://git-scm.com/downloads">Git - Downloads</a></p></blockquote><p><img src="https://img.guiblogs.com/hexo30-3/git-download.jpg" alt="Git - Downloads"></p><p>基本上頁面上的電腦螢幕會判斷你使用的作業系統，給你相對應的安裝程式。如果沒有的話也可以透過旁邊鏈結選擇你所使用的作業系統下載安裝程式。</p><p>一樣下載後進行安裝，安裝完後能夠順利開啟，並像以下截圖那樣的話，就安裝完成囉！</p><p><img src="https://img.guiblogs.com/hexo30-3/git.jpg" alt="Git"></p><blockquote><h2 id="網頁編輯器-Visual-Studio-Code"><a href="#網頁編輯器-Visual-Studio-Code" class="headerlink" title="網頁編輯器 Visual Studio Code"></a>網頁編輯器 Visual Studio Code</h2><p>下載位置：<a href="https://code.visualstudio.com/download">Download Visual Studio Code</a></p></blockquote><p><img src="https://img.guiblogs.com/hexo30-3/vscode-download.jpg" alt="Download Visual Studio Code"></p><p>雖然如果你是網頁工程師基本上都應該有這個，不過我還是稍微介紹了一下。這是款現在還滿夯的網頁編輯器，有非常豐富的擴充套件可以使用，使用者也非常多。不過如果你本身有慣用的網頁編輯器，可以直接使用你原先慣用的就好。</p><p>老樣子，下載後安裝，能開啟就完成。不過你下載後可能會發現是英文版的，要如何變成中文版呢？</p><p><img src="https://img.guiblogs.com/hexo30-3/vscode-chinese-traditional.jpg" alt="VS code 安裝中文化套件"></p><p>有看到編輯器左側選單嗎？從上到下選第五個，四個方塊右上角那塊分離的那個，可進入延伸模組頁，安裝擴充功能。然後搜尋截圖上的繁體中文語言套件，安裝後重新開啟應該就能夠中文化了。</p><blockquote><h2 id="文章編輯器-Typora"><a href="#文章編輯器-Typora" class="headerlink" title="文章編輯器 Typora"></a>文章編輯器 Typora</h2><p>下載位置：<a href="https://typora.io/#download">Typora — a markdown editor, markdown reader.</a></p></blockquote><p><img src="https://img.guiblogs.com/hexo30-3/typora-download.jpg" alt="Typora — a markdown editor, markdown reader."></p><p>其實使用這款編輯器至寫文時間為止也不過一兩個月的時間，不過真的大推啊 XDD，使用一段時間過後 Google 一下相關資料才發現原來早已是許多人撰寫 Markdown 語言的首選了，身為已經入坑很深很深的我決定就放到鐵人賽一起推薦大家入坑啦！之後「Day 7：使用 Typora 發表你的第一篇 Hexo 文章」再來詳細介紹一下。</p><p>老樣子，下載後安裝，結束。開啟後會是長這樣子的：</p><p><img src="https://img.guiblogs.com/hexo30-3/typora.jpg" alt="Typora"></p><p>Typora 的 Markdown 模式：</p><p><img src="https://img.guiblogs.com/hexo30-3/typora-markdown.jpg" alt="Typora Markdown 模式"></p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>一開始看到這麼多工具或多或少會有點複雜 XDD 不過一步一步照著做，就能夠慢慢地將這些環境裝設起來，接下來就能夠開始搭建起你的第一個 Hexo 部落格囉！敬請期待明天的章節～</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://ed521.github.io/2019/07/hexo-install/">[教學] 使用 GitHub Pages + Hexo 來架設個人部落格</a><ul><li>當初是看這篇文章知道需要 Node.js 與 Git，裡面雖然也有 Hexo 架設教學，但還是希望大家等我明天文章 XD</li></ul></li><li><a href="https://www.youtube.com/watch?v=zQMG3xm7nEg&list=PLqivELodHt3jqh6ZJjJRWF-RqyaaOupJJ&index=4&t=4487s">阿莫斯の兔偶斯 : 網頁設計工具有哪些? | 網頁教學 | 網頁設計軟體 | 網頁開發</a><ul><li>會知道 Typora 就是從這部影片～</li></ul></li><li><a href="https://free.com.tw/typora/">Typora 免費極簡 Markdown 編輯器，讓寫作無負擔（Mac）</a><ul><li>文章提到僅有 Mac 版，不過目前官網上也有 Windows 以及 Linux 可以下載囉～</li></ul></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10266720">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 2：挑選 Hexo 作為工程師技術部落格</title>
    <link href="/hexo30-2/"/>
    <url>/hexo30-2/</url>
    
    <content type="html"><![CDATA[<p>來到鐵人賽第二天，今天我們來聊聊 Hexo 這個架設工具。</p><blockquote><h2 id="Hexo-是什麼？"><a href="#Hexo-是什麼？" class="headerlink" title="Hexo 是什麼？"></a>Hexo 是什麼？</h2></blockquote><p>Hexo 是利用 Node.js 所撰寫而成的部落格程式，我們能夠利用 Hexo 產生出靜態網頁。沒錯！就是靜態網頁，透過指定的 Hexo 指令，可以產生出靜態頁面以及文章的編輯檔案，再透過編譯就能夠邊溢出對應的 HTML 檔案。</p><a id="more"></a><p>這邊來列出幾點我認為有感的優點：</p><h3 id="支援-Markdown-撰寫"><a href="#支援-Markdown-撰寫" class="headerlink" title="支援 Markdown 撰寫"></a>支援 Markdown 撰寫</h3><p>如果你不知道這是什麼，之後鐵人賽會有一篇是專門介紹這個標記語言。基本上用過之後我就回不去了，以前撰寫文件都是透過 Word 或是 Google 文件，但使用 Markdown 撰寫文件只要記得幾個標記就能夠呈現不同的標題、段落、……等等，所以我覺得支援 Markdown 這點很優。</p><h3 id="一鍵部署"><a href="#一鍵部署" class="headerlink" title="一鍵部署"></a>一鍵部署</h3><p>雖然一開始使用指令都很不習慣，而且非常難記，但其實 Hexo 會用到的指令也就大部分常用的這些了，所以多用幾次就大概能記住了。而且非常的簡易，不會需要用到太難的東西，而且指令也不會太長。</p><h3 id="輕量級"><a href="#輕量級" class="headerlink" title="輕量級"></a>輕量級</h3><p>Hexo 是輕量級的靜態網頁產生器，所以不會占用太多的空間跟消耗過多的資源，很適合用於架設技術部落格的單純需求。</p><p>還有更多特點是我沒有介紹的，可以參考 <a href="https://hexo.io/zh-tw/">Hexo 官網</a>，有更詳細的資訊。</p><blockquote><h2 id="Hexo-跟-WordPress-的差別？"><a href="#Hexo-跟-WordPress-的差別？" class="headerlink" title="Hexo 跟 WordPress 的差別？"></a>Hexo 跟 WordPress 的差別？</h2></blockquote><p>世界上最廣為人知的我想還是 WordPress，許多就算是非工程領域的也能夠透過 WordPress 輕鬆擁有一個部落格網站，甚至於是形象網站。而 Hexo 跟 WordPress 的差別，在於剛剛所提到的 Hexo 是透過編譯成為靜態網站，而 WordPress 則是動態網站，因此需要連結資料庫儲存內容。</p><p>建立方面，WordPress 有分 BSP 服務的「wordpress.com」以及自行架設或是虛擬主機快速安裝包的「wordpress.org」，對於非工程背景的人來說，透過網路的豐富教學就能夠很容易的搭建起自己的 WordPress 部落格。Hexo 則需要透過指令安裝，安裝後在透過指令將網頁部署至儲存空間，因此對於非工程背景的人來說，又是要學習的一部分。</p><blockquote><h2 id="我該選擇-Hexo-還是-WordPress？"><a href="#我該選擇-Hexo-還是-WordPress？" class="headerlink" title="我該選擇 Hexo 還是 WordPress？"></a>我該選擇 Hexo 還是 WordPress？</h2></blockquote><p>我目前是使用 Hexo，主要是因為我過去使用過 WordPress，想來點不一樣的。再來若你是工程師，如果會使用 Hexo 就確保你有用過指令，以我來說在架設 Hexo 之前，我對指令基本上是完全不熟的，甚至指令就是我踏入 Hexo 滿大的一個檻（身為本科生我感到慚愧 QQ）。但在架設與經營的過程中，不斷與指令相處，慢慢的也就愈來愈熟悉。</p><p>再來 Hexo 輕量級的特性吸引著我，WordPress 的強大使它能夠成為一個 CMS 系統，不過對我而言頂多可能僅使用到文章、頁面或是一些外掛。還有一個重點，因為 Hexo 是靜態網頁產生器，能夠使用免費的 GitHub Pages 來當作儲存空間！（GitHub Pages 僅能架設靜態網頁）</p><p>不過 WordPress 還是非常好的，對於非工程背景、想要簡單入手，甚至是早已經懂得 Git 指令的操作，其實都還是很推薦可以玩玩看 WordPress，這款系統的強大還是值得我們深入研究。</p><blockquote><h2 id="除了-Hexo-還有其它靜態網頁產生器？"><a href="#除了-Hexo-還有其它靜態網頁產生器？" class="headerlink" title="除了 Hexo 還有其它靜態網頁產生器？"></a>除了 Hexo 還有其它靜態網頁產生器？</h2></blockquote><p>有的，還包含像是 Hugo、Jekyll 等靜態網站產生器，不過因為我只使用過 Hexo，我也只是看了網路上的文章覺得使用 Hexo 對我而言好像比較順手，因此我就不多做評論。可參考以下文章：</p><ul><li><a href="https://raychiutw.github.io/2019/Static-Site-Generator-Comparison/">靜態網站產生器大比拚</a></li><li><a href="https://zhuanlan.zhihu.com/p/368407566">静态博客框架jekyll、hexo和hugo三者之间的区别与差异</a></li></ul><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>其實我使用 Hexo 架設部落格至今也就差不多半年時間，所以不敢說對於這些有很專業的見解或觀念，不過我會盡可能利用我所知經驗，將我會的內容或資訊撰寫下來，希望能夠幫助到也想架設部落格的人。若內容有不太正確的地方，再請路過的前輩大神們指教了！</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://ithelp.ithome.com.tw/articles/10236855">(2) 試著學 Hexo - 什麼是 Hexo</a></li><li><a href="https://www.dazhuanlan.com/flyingrobot/topics/1616326">Hexo+Github搭建轻量级个人博客</a></li></ul><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10266046">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day 1：為什麼工程師要建立自己的技術部落格？</title>
    <link href="/hexo30-1/"/>
    <url>/hexo30-1/</url>
    
    <content type="html"><![CDATA[<p>大家好我是 Gui，一名剛於私立科大資管系畢業的社會新鮮人，這是我第一次參與 IT 鐵人賽，既緊張又害怕受傷害（誤），其實過去一直都知道有這個賽事，受到不少鐵人賽文章的幫助，在無數的夜晚幫助我完成了無數的 code（？），很開心這一次總算跟到鐵人賽的賽事了！（<del>雖然沒學生獎勵可領感到難過</del>）</p><a id="more"></a><blockquote><h2 id="先來一段我自己的心路歷程吧！"><a href="#先來一段我自己的心路歷程吧！" class="headerlink" title="先來一段我自己的心路歷程吧！"></a>先來一段我自己的心路歷程吧！</h2></blockquote><h3 id="起因源自於我想要做一個-side-project"><a href="#起因源自於我想要做一個-side-project" class="headerlink" title="起因源自於我想要做一個 side project"></a>起因源自於我想要做一個 side project</h3><p>年初還是大學生的我，發現自己的作品並不是相當的足夠、大學專題也不太好成為一個獨立的作品（因為我的專題是維護實驗室裡的好幾個使用 Joomla 架設的網站），作品不夠怎麼辦？那就是趕快生出一個作品或是 side project 啊！但才疏學淺的我一時之間也不知道該做什麼東西啊 XD 只知道我有許多 WordPress 以及 Joomla 的維護修改與開發經驗，過去都是用為了 Meeting 報告而製作的 PowerPoint 記錄下來，偶爾翻閱並感慨之中的成長歷程。</p><h3 id="念頭"><a href="#念頭" class="headerlink" title="念頭"></a>念頭</h3><p>其實我一直都有架設部落格來撰寫的想法，在我小學時剛碰網路的時候，我就使用過無名小站跟 Yahoo!奇摩部落格，反倒是長大後一直遲遲沒有實際去行動。有其中一部分原因是怕寫的東西不夠好、甚至於是錯誤的觀念，深怕撰寫出來的東西會誤導別人。</p><p>但後來我還是決定將部落格架設起來了。開始一項新挑戰時，或多或少會擔心未知的狀況，但如果沒有行動也不會不知道結果，<del>況且還不確定一開始有沒有人會看你的部落格呢</del>，不需要過於緊張。不過在發布一篇筆記之前我自己通常會在參考許多網路資訊，檢查觀念是否正確，也會參考別人的講法。當然偶爾可能還是會有小錯誤，但其實公開在網路上，如果有更有經驗的高手路過你的部落格，或許也會提供你一些指教，這也是一種交流的機會。</p><h3 id="將我所會的透過文章展示出來"><a href="#將我所會的透過文章展示出來" class="headerlink" title="將我所會的透過文章展示出來"></a>將我所會的透過文章展示出來</h3><p>前面有提到我的專題很難獨立成一個作品，想要做 side project 一時也不知道要做什麼，但我後來認為部落格其實也是一種 side project，而且在寫文章的過程中，就能夠把你所會的東西寫出來，我就能夠把我在大學所學習到的資訊、做在網站上的功能實作方式用文字呈現出來，也是一種證明自己有這些技能的方式。</p><blockquote><h2 id="為自己的學習歷程找到容身之處"><a href="#為自己的學習歷程找到容身之處" class="headerlink" title="為自己的學習歷程找到容身之處"></a>為自己的學習歷程找到容身之處</h2></blockquote><p>過往我查看學習歷程是透過一份又一份的 PowerPoint 簡報，但很有可能經歷過時間的累積慢慢地堆在電腦內的某一處，偶爾想到才會點開來看。偶爾會有些學弟妹或是朋友會來問我一些問題，但許多資訊都是簡報內的內容，我就在想如果能夠把這些資訊分享到網路上面，是不是就能夠幫助到更多人呢？也不會浪費我所會的這些資訊。</p><h3 id="公開到網路會對自己的筆記更為謹慎"><a href="#公開到網路會對自己的筆記更為謹慎" class="headerlink" title="公開到網路會對自己的筆記更為謹慎"></a>公開到網路會對自己的筆記更為謹慎</h3><p>現代人非常忙碌，做完筆記不一定有時間重新閱覽，更不用說整理了。因此透過發佈到部落格前的架構整理，是最好的複習方式。以我自己為例，在作筆記時因為有時間壓力，通常只會記下我不會或是我自己懂得內容，但如果要公開到網路上，除了要整理成別人也聽得懂的資訊，前面也提到我們都不想誤導網友，就會更加注意內容的正確性，如此一來便能夠全然的在複習這篇文章的內容。</p><h3 id="你的筆記可以幫助到更多人"><a href="#你的筆記可以幫助到更多人" class="headerlink" title="你的筆記可以幫助到更多人"></a>你的筆記可以幫助到更多人</h3><p>在我的學習路途中，許多資訊其實都是透過這寫有在寫部落格的人他們的文章獲得的，他們不一定是教學，有的甚至就是他們的學習筆記，所以把這些資訊分享出來，能夠受益更多人。</p><blockquote><h2 id="結語：使用-Hexo-架設你的技術部落格"><a href="#結語：使用-Hexo-架設你的技術部落格" class="headerlink" title="結語：使用 Hexo 架設你的技術部落格"></a>結語：使用 Hexo 架設你的技術部落格</h2></blockquote><p>雖然這一篇是以我這個程式人思考，為何工程師需要架設技術部落格，但如果你是其他職業類別的人我都覺得能夠嘗試，將自己的心路歷程分享出來，讓網路資訊的連結更加強大，更多人因為你的文章而受到幫助。</p><p>接下來的一個多月，利用 Hexo 打造你的技術部落格吧！</p><blockquote><p>本篇文章同步發布於 <a href="https://ithelp.ithome.com.tw/articles/10265194">iT 邦幫忙</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IT 鐵人賽</tag>
      
      <tag>2021 iThome 鐵人賽：30 天利用 Hexo 打造技術部落格</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SITCON 2021 學生計算機年會，我的參與初體驗</title>
    <link href="/SITCON-2021/"/>
    <url>/SITCON-2021/</url>
    
    <content type="html"><![CDATA[<p>學生時代有非常多的校內活動，雖然就讀資管系，卻是到了大四才有意識到想參與年會這一件事情。於是緊盯著四月初的搶票日期，也順利地搶到了票。</p><a id="more"></a><blockquote><h2 id="由實體轉為線上"><a href="#由實體轉為線上" class="headerlink" title="由實體轉為線上"></a>由實體轉為線上</h2></blockquote><p>本來年會時間是訂在 2021/05/29，不過卻剛好遇到疫情爆發而導致最後延至 09/04 以線上形式來舉行。其實感到滿可惜的，畢竟是第一次參與這樣的大型年會就遇到這樣的事情。</p><p>不過我相信不管是實體或是線上，主辦單位還是非常努力地將活動舉辦到最好，時間一直在走，很快地就到了活動當天。</p><blockquote><h2 id="活動當天…"><a href="#活動當天…" class="headerlink" title="活動當天…"></a>活動當天…</h2></blockquote><p><img src="https://img.guiblogs.com/SITCON-2021/SITCON-2021-Live.jpg" alt="SITCON 2021 線上議程"></p><p>當天有點忙，除了要寄一封掛號信外，因為參與六角學院網頁切版班的作業還沒寫完，所以基本上只能邊切版、旁邊開著平板一邊收看（聽）直播 QQ</p><p>雖然注意力會被稍微分散，不過還是從中學習到許多內容。</p><blockquote><h2 id="我有印象的線上議程"><a href="#我有印象的線上議程" class="headerlink" title="我有印象的線上議程"></a>我有印象的線上議程</h2><p>議程共筆文件，可以看到網友紀錄的內容：<a href="https://hackmd.io/@SITCON/2021/%2F%40SITCON%2FB1mXZo0ZF">SITCON 2021 共同筆記</a></p></blockquote><h3 id="我沒有網頁開發基礎，最後卻完成一份專案？"><a href="#我沒有網頁開發基礎，最後卻完成一份專案？" class="headerlink" title="我沒有網頁開發基礎，最後卻完成一份專案？"></a>我沒有網頁開發基礎，最後卻完成一份專案？</h3><p>雖然我走網站開發這段路一陣子了，但是這場議程我認為還是滿有價值的。</p><h4 id="提問的藝術"><a href="#提問的藝術" class="headerlink" title="提問的藝術"></a>提問的藝術</h4><ul><li>要先說明自己已經做了尋找解決方法的努力，但還是不清楚<ul><li>避免被當成伸手牌</li></ul></li><li>不要把社群當成 debug 的機器<ul><li>主要還是問一些方向的問題</li></ul></li><li>最後當然還是最基本的：時時保持禮貌</li></ul><p>坦白說我過去比較少去提問，所以提問經驗不算多（？）不過幸好看起來我不管是該寫的或是不該寫的，在提問內容內都有正確的呈現（啊我就怕被罵啊 XD）</p><blockquote><p>此議程共筆文件：<a href="https://hackmd.io/@SITCON/2021/%2F%40SITCON%2FBkvqzoRWt">請點我</a></p></blockquote><h3 id="PHP-是世界上最棒的語言，但我做了一個比它更棒的！"><a href="#PHP-是世界上最棒的語言，但我做了一個比它更棒的！" class="headerlink" title="PHP 是世界上最棒的語言，但我做了一個比它更棒的！"></a>PHP 是世界上最棒的語言，但我做了一個比它更棒的！</h3><p>PHP 作為我的主力程式語言，這場議程當然是一定要參加的！</p><p>整場根本超 High，而且使我笑到語無倫次。據敘述就是用「([+.^])」七種字元來編寫與執行 PHP 的工具。</p><p>總之我不會解釋啦，直接去看 GitHub 吧… —&gt; <a href="https://github.com/splitline/PHPFuck">PHPFuck: ([+.^])</a></p><p>看以下截圖就知道當天為何會這麼 High 了（截圖取自 GitHub）</p><p><img src="https://img.guiblogs.com/SITCON-2021/PHPFuck.jpg" alt="PHPFuck: ([+.^])"></p><h3 id="Web-Security-領航之路"><a href="#Web-Security-領航之路" class="headerlink" title="Web Security 領航之路"></a>Web Security 領航之路</h3><p>看到這一段時只能說我還太嫩了（嘆）還有許多內容要學習啊！議程中提供了許多的資源讓我們能夠利用。</p><p>網站安全很重要，畢竟使用的人多、儲存的資料也多時，就會有相對應的風險。大家可以看到共筆文件，有提到網路基礎的部分。前陣子在學習這方面知識點時有一些體悟，所以大家可以嘗試了解一下。</p><p>下次我再將這方面的筆記分享出來 XD</p><blockquote><p>此議程共筆文件：<a href="https://hackmd.io/@SITCON/2021/%2F%40SITCON%2FHyVfmj0WF">請點我</a></p></blockquote><h3 id="Lightning-Talk-閃電秀"><a href="#Lightning-Talk-閃電秀" class="headerlink" title="Lightning Talk 閃電秀"></a>Lightning Talk 閃電秀</h3><p>印象很深刻的部分，也算是整場議程的壓軸。限時三分鐘內要將想表達的內容說完，非常的刺激 XD</p><p>我對零基礎資工系學生挑戰大學畢業成為 Googler 的分享者印象很深刻，除了演講內容非常精彩又活潑 XD，他的學習歷程我覺得真的猛，超級認真，雖然我也是有往前走，但覺得他的努力程度更甚於我啊！</p><p>坦白說我對自己並不算是很有自信，不過看到他的努力使我告訴自己該更加努力。人家都這麼努力了，與其我要在這邊沒自信，那還不快繼續努力呢 XD？畢竟自信的提升某種程度也是透過不斷的自我提升而來的啊！</p><blockquote><p>此議程共筆文件：<a href="https://hackmd.io/@SITCON/2021/%2F%40SITCON%2FHyQ2ZjAbY">請點我</a></p></blockquote><blockquote><h2 id="Gather-線上年會會場"><a href="#Gather-線上年會會場" class="headerlink" title="Gather 線上年會會場"></a>Gather 線上年會會場</h2></blockquote><p><img src="https://img.guiblogs.com/SITCON-2021/SITCON-2021-Gather.jpg" alt="Gather 線上年會會場"></p><p>其實我只有輸入名字進入會場，然後就沒了，<del>因為我再趕作業 QQ</del>（總之應該要更早完成作業啊～～）</p><p>截圖是我為了打這篇文章時特別連進去截圖的（還好空間都還在 XD）紀念一下。</p><p>不過我目前是 MOPCON 2021 的志工，工作內容就是佈置與規劃 Gather 場地，希望我能給力幫忙的完成佈置 XD</p><blockquote><h2 id="SITCON-小天使計畫"><a href="#SITCON-小天使計畫" class="headerlink" title="SITCON 小天使計畫"></a>SITCON 小天使計畫</h2></blockquote><p>雖然第一次參加，不過我參與了小天使計劃。跟三位初心者配對，並互相交流資訊領域方面的議題，也讓我們可以一起參與 SITCON。</p><p><del>不過粗心的我在活動結束後才看到配對信件 XDD</del>，只能說悲劇真的太多了（嘆）還有其中一位是主動密我的 QQ，不過後來也是有跟初心者聯絡並加到聯絡方式，雖然在活動錯過了 XD，但相信未來會有更多在資訊議題方面的交流！</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>或許是第一次參加年會、剛好又改線上、<del>第一次參加六角線上課程所以作業進度不佳，導致邊參與年會邊寫作業</del>，從前面的敘述真的滿克難的，希望下次能夠順利參與啦 XD</p><p>學習到許多，或許不是技術相關（畢竟一次塞這麼多技術我也記不完 XD），但視野真的擴大了。體認在這塊領域發展，還有很多需要學習的、自身還有許多不足的地方該提升，該更加努力了！</p><p>期待下一場年會！</p>]]></content>
    
    
    <categories>
      
      <category>學習</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SITCON</tag>
      
      <tag>Conference</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>六角學院網頁切版直播班，我的上課心得</title>
    <link href="/hex-web-layout-training/"/>
    <url>/hex-web-layout-training/</url>
    
    <content type="html"><![CDATA[<p>如果你有長期在追蹤我的部落格就會發現，我近期發表的文章基本上都是跟 CSS 相關的。主要原因是我參加了六角學院的網頁切版直播班，那些都是我的課堂筆記。雖然我的筆記還沒全部補完 QQ 不過就先來發表一下我參與六角學院切版班的心得吧。</p><a id="more"></a><blockquote><h2 id="當初為何選這門課？"><a href="#當初為何選這門課？" class="headerlink" title="當初為何選這門課？"></a>當初為何選這門課？</h2></blockquote><p>當初我已經參與了六角舉辦的 Bootstrap 5 體驗營以及程式體驗營，那時就有看到切版班在招募學員，不過我一開始沒有報名。後來加開我才報名的 XD</p><p>主要是程式體驗營時邊看課程邊做筆記，雖然看起來都會了，但是真的會了嗎？還是自以為會了，真正要做出一個作品時又卡了，因此最後就決定花錢來買了課程。</p><blockquote><h2 id="遊戲化課程設計"><a href="#遊戲化課程設計" class="headerlink" title="遊戲化課程設計"></a>遊戲化課程設計</h2></blockquote><p>六角將整個課程以類似遊戲化破關的方式進行，以網頁切版直播班為例，報到、八週主線任務以及心得任務（就是你現在看到的這一篇 XD），每完成一項就會增加 10 分，課程結束後結算，屆時會根據你達到多少分，給出相對應的獎賞。</p><h3 id="影音課程"><a href="#影音課程" class="headerlink" title="影音課程"></a>影音課程</h3><p>雖然是直播班，不過六角還是有提供一些基礎的影音課程，適課程進度會再陸續補充一些內容。因為我之前有取得六角舉辦的程式體驗營影音課程觀看權，基本上很多都看過，複習時也感到輕鬆自在 XD</p><p>不過，血汗的還在後面呢 …</p><h3 id="直播課程"><a href="#直播課程" class="headerlink" title="直播課程"></a>直播課程</h3><p>每週五是大家的集合時間，課程的主要老師 - 六角學院校長會親自授課，不過因為較為基礎的內容都會事先提供影音課程，所以通常老師所講內容會比較偏向同學們通常會遇到的問題，其中也會讓同學問問題，因此能夠在這個時段即時與校長互動與交流。</p><blockquote><h2 id="地獄般的作業"><a href="#地獄般的作業" class="headerlink" title="地獄般的作業"></a>地獄般的作業</h2></blockquote><h3 id="主線任務"><a href="#主線任務" class="headerlink" title="主線任務"></a>主線任務</h3><p>直播課程開始後，每週會有個主線任務，基本就是要切出一個網頁出來，這也是最血汗的部分 XD</p><p>這是第一週的作業，只有一頁，也沒有 RWD，非常的單純。</p><p><img src="https://img.guiblogs.com/hex-web-layout-training/week1-task.jpg" alt="第一週主線任務"></p><p>這是第八週的作業，這一次設計稿含 RWD 總共有 30 頁，非常之狂 QQ</p><p><img src="https://img.guiblogs.com/hex-web-layout-training/week8-task.jpg" alt="第八週主線任務"></p><p>詳細可以到我 GitHub 看作品，我就不貼給大家了，因為我根本還沒完成啊 XDD 然後今天要提交作業，我只能先提交現在的版本上去了（嘆）然後趁助教批給前在趕工一下 XD</p><h3 id="每日任務"><a href="#每日任務" class="headerlink" title="每日任務"></a>每日任務</h3><p>這是我滿喜歡的一個服務，主線任務最少都要切出一個完整網頁，需要使用的知識也較多。</p><p>而每日任務則是將每週進度切分成一個個小題目，讓學員每天花 10 - 15 分鐘的時間，練習一個小知識點，每天進步一點點，回頭卻發現已經學習了許多。我覺得比起主線任務，每日任務的學習壓力小很多啊 XDD（但也是因為主線任務有時間壓力啦）</p><p><img src="https://img.guiblogs.com/hex-web-layout-training/daily-task.jpg" alt="每日任務"></p><h3 id="努力還是有收穫的（？）"><a href="#努力還是有收穫的（？）" class="headerlink" title="努力還是有收穫的（？）"></a>努力還是有收穫的（？）</h3><p>第一週老師下了個挑戰：前三位在五分鐘內完成 kata 作業（想知道Kata 是什麼<a href="https://en.wikipedia.org/wiki/Kata_(programming)">可參考這篇</a>），就會贈書，我發現自己好像有機會能夠達成，馬上就來嘗試看看。最終…</p><p><img src="https://img.guiblogs.com/hex-web-layout-training/kata-award.jpg" alt="Kata 獎勵"></p><p>拿到了這本「金魚都能懂的 CSS 選取器」，這本幫助了無數次在夜晚撰寫作業的我啊（感動 + 淚崩）</p><blockquote><h2 id="遇到問題怎麼辦？"><a href="#遇到問題怎麼辦？" class="headerlink" title="遇到問題怎麼辦？"></a>遇到問題怎麼辦？</h2></blockquote><p>六角有很強大的助教團，除了批改學員的作業以外，再來就是在第四週開始，每週一到五下午一時到五時的每日助教服務，幫助學員在撰寫作業的過程中如果遇到問題，能夠在短時間內獲得助教的回復。</p><p>另外我很喜歡六角的互助風氣，同學遇到問題時，不只是助教會回答，校長跟幾個大神還有同學根本像是住在 Slack 似的，都會一起幫忙同學解決問題。</p><blockquote><h2 id="成果發表會"><a href="#成果發表會" class="headerlink" title="成果發表會"></a>成果發表會</h2></blockquote><p>是的，努力了兩個多月的時間，六角也會為學員舉辦成果發表會，讓課程內的同學能夠藉由分享自己的經歷，與其他同學交流。</p><p><img src="https://img.guiblogs.com/hex-web-layout-training/presentation.jpg" alt="成果發表會"></p><h3 id="我也報名了！"><a href="#我也報名了！" class="headerlink" title="我也報名了！"></a>我也報名了！</h3><p>再來就是我不知道哪根筋不對去報名了，結果到了發表會當日我還有很多地方沒完成啊（GG… ）不過怎麼能臨陣脫逃呢？成發有大神技術的精彩演說，當然也要有北爛的演說（不是啦）是我如何安排學習、利用什麼心態學習的。</p><p>另外也秉持著「我就爛」，反正也就這樣了啦，相信會更好的態度 XD</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><h3 id="上完課我學習到什麼？"><a href="#上完課我學習到什麼？" class="headerlink" title="上完課我學習到什麼？"></a>上完課我學習到什麼？</h3><p>原先最基本的 SCSS 或是 Bootstrap 都會使用，不過更進階的設計模式或是開發就不太會了，命名部分也是不太知道怎麼命名。</p><p>我認為我的成長有：</p><ol><li>校長非常強調 Emmet 的刻意練習，我對 Emmet 的掌握度提升了。</li><li>讓我更理解如何更精準進行排版，1px 不差。</li><li>如何更有效率運用通用類別，並且為它們進行命名。</li><li>了解 Bootstrap 更深層的應用。</li><li>善用設計模式設計 CSS，並且搭配 Bootstrap、SCSS 實作。</li></ol><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>上完這門課我自己是感到不後悔的，雖然一開始覺得說我這懂一些觀念的來上會不會太基礎，但是完全不會，只會切版切到懷疑人生 XD</p><p>然後我接續報名 JavaScript 直播班了…希望上完課我的肝還是新鮮的（Q</p>]]></content>
    
    
    <categories>
      
      <category>學習</category>
      
    </categories>
    
    
    <tags>
      
      <tag>網頁</tag>
      
      <tag>切版</tag>
      
      <tag>上課心得</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sass / SCSS 筆記：如何利用變數管理重複設定值？</title>
    <link href="/sass-variable/"/>
    <url>/sass-variable/</url>
    
    <content type="html"><![CDATA[<p>使用 Sass / SCSS 管理 CSS 內容，除了能夠撰寫巢狀式語法架構外，還有像是變數、Mixin 等功能，可以幫助我們管理重複的 CSS 設定值或是語法，不但能夠優化 CSS 空間，也能夠增加日後開發的方便性。這篇文章就先來探討 Sass / SCSS 的「<strong>變數</strong>」。</p><a id="more"></a><blockquote><h2 id="什麼是變數？"><a href="#什麼是變數？" class="headerlink" title="什麼是變數？"></a>什麼是變數？</h2></blockquote><p>在 Sass / SCSS 以及其它程式語言的世界裡，都是很好用而且非常重要的存在，變數就好比說，<strong>它是一個容器（例如碗），你可以命名這個容器的用途（比如小明的碗），可以在裡面裝一些東西。（例如白米飯）</strong>，而在 Sass / SCSS 與其它程式語言，就會利用變數來放置程式計算邏輯、或是一些會被利用的數值或是字串。</p><blockquote><h2 id="在-Sass-SCSS-變數該如何宣告？"><a href="#在-Sass-SCSS-變數該如何宣告？" class="headerlink" title="在 Sass / SCSS 變數該如何宣告？"></a>在 Sass / SCSS 變數該如何宣告？</h2></blockquote><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SCSS"># Sass 範例<br>$變數名稱: 設定值<br># SCSS 範例<br>$設定名稱: 設定值;<br></code></pre></div></td></tr></table></figure><p>基本上可以看到 Sass 與 SCSS 指定變數的差別在於 Sass 不用且不能加分號，而 SCSS 寫法則與 CSS 一樣，需要用分號區隔前後屬性。這部分說明，可以回去複習上一篇「<a href="https://guiblogs.com/">更便利於撰寫與管理 CSS 的工具 - Sass / SCSS，如何使用、編譯？</a>」。</p><p>除了以上差異之外，基本上兩者宣告方式大同小異，首先要設定變數名稱，並<strong>在變數名稱前加上 <code>$</code> 字號</strong>，其實這個概念很像是設定類別選擇器樣式那樣，會在類別名稱前加上 <code>.</code> 作為區隔。</p><p>設定完變數名稱後，後面會加上冒號與空格，再填入設定值，如此以來就完成了變數的宣告與指定值。</p><blockquote><h2 id="來段「顏色」與「字體大小」的範例吧"><a href="#來段「顏色」與「字體大小」的範例吧" class="headerlink" title="來段「顏色」與「字體大小」的範例吧"></a>來段「顏色」與「字體大小」的範例吧</h2></blockquote><p>以前我們可能是這樣設計 CSS 的：</p><p><strong>CSS</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-class">.header</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><span class="hljs-selector-class">.subTitle</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.btn-pink</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>    <br>&#125;<br><span class="hljs-selector-class">.footer</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>HTML</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>  Lorem ipsum dolor sit amet.<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;subTitle&quot;</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-pink&quot;</span>&gt;</span>按鈕<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>  Lorem ipsum dolor sit amet.<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>我希望網站主視覺是粉紅色、按鈕與副標題文字大小要有 20px。但萬一老闆或是客戶突然想要改變顏色跟文字大小，雖然說現在編輯器都有尋找與取代功能，但是當有成千上萬個設定值要修改時，還是會覺得很麻煩吧？</p><p>這時使用變數的好處來了。此時，你就能利用 Sass / SCSS 變數將語法改寫成這樣：</p><p><strong>Sass / SCSS</strong></p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SCSS"># Sass 範例<br><br><span class="hljs-variable">$primary</span>: pink<br><span class="hljs-variable">$font-lg</span>: <span class="hljs-number">20px</span><br><br>.header <br>    background-color: <span class="hljs-variable">$primary</span><br>.subTitle <br>    font-size: <span class="hljs-variable">$font-lg</span><br>.btn-secondary<br>    background-color: <span class="hljs-variable">$primary</span><br>    font-size: <span class="hljs-variable">$font-lg</span><br>.footer<br>    background-color: <span class="hljs-variable">$primary</span><br><br># SCSS 範例<br><br><span class="hljs-variable">$primary</span>: pink;<br><span class="hljs-variable">$font-lg</span>: <span class="hljs-number">20px</span>;<br><br><span class="hljs-selector-class">.header</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$primary</span>;<br>&#125;<br><span class="hljs-selector-class">.subTitle</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-variable">$font-lg</span>;<br>&#125;<br><span class="hljs-selector-class">.btn-secondary</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$primary</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-variable">$font-lg</span>;<br>    <br>&#125;<br><span class="hljs-selector-class">.footer</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$primary</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>HTML</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- HTML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>  Lorem ipsum dolor sit amet.<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;subTitle&quot;</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 將 btn-pink 改為 btn-secondary --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-secondary&quot;</span>&gt;</span>按鈕<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><br>  Lorem ipsum dolor sit amet.<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>如此一來，我只要更改變數的設定值，我就能夠瞬間更改所有套用此變數的屬性，是不是方便了許多？</p><p>我有寫一個範例放置在 codePen 上，大家可以點擊「<a href="https://codepen.io/guitimliu/pen/dyRPdxV">Sass / SCSS 變數範例</a>」來動手操作看看。當然，還有許多不同的使用情境可以運用到變數，大家也可以思考還有哪部分能夠利用變數最佳化 CSS 語法。</p><blockquote><h2 id="宣告變數請盡可能寫在前面"><a href="#宣告變數請盡可能寫在前面" class="headerlink" title="宣告變數請盡可能寫在前面"></a>宣告變數請盡可能寫在前面</h2></blockquote><p><strong>Sass / SCSS 的編譯方式是由上而下編譯的</strong>，因為這個特性，我們必須把變數放置在使用變數之前。以下列這個錯誤例子來舉例：</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs SCSS"># SCSS 範例<br><span class="hljs-selector-class">.btn-secondary</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$orange</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$orange</span>;<br>&#125;<br><span class="hljs-variable">$orange</span>: orange;<br></code></pre></div></td></tr></table></figure><p>這邊就不舉例 Sass 範例了，大家去嘗試這個範例的話可以發現是跑不動的，原因是 Sass / SCSS 由上而下編譯時，.btn-secondary 雖然想要取得 $orange 的設定值，但因為<strong>此時還沒有編譯到 $orange 這個變數</strong>，因此這時是無法取得 $orange 的設定值的。</p><p>因此在使用變數時，<strong>請盡可能將變數宣告移至最前面</strong>，如此一來比較能夠確保所宣告的變數在使用時，已經都被 Sass / SCSS 編譯器進行編譯。</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>其實這是我第二次寫這篇文章了，本來是星期四或五要發佈，結果一個 GG，電腦當機！！然後 Typora（線下 Markdown）不但沒記錄到存檔，內容還直接給我通通不見……我直接整個無言 QQ（而且我還隨時都在按 Ctrl + S 儲存啊！！）</p><p>無奈之餘還是要將文章給發出來啊，所以大家如果看到這篇，還請多多支持啦，這是我用淚水刻出來的文章（QQ</p><p>雖然難過，不過我自己是覺得這篇寫得比上一次還好（自己說 XD），頓時也沒這麼難過了（？）下一篇就會提到 Mixin 的部分了，敬請期待囉，也希望電腦給力點啊！</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Sass</tag>
      
      <tag>SCSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更便利於撰寫與管理 CSS 的工具 - Sass / SCSS，如何使用、編譯？</title>
    <link href="/css-sass-scss/"/>
    <url>/css-sass-scss/</url>
    
    <content type="html"><![CDATA[<p>CSS 在網頁上的需求愈來愈多，但是在愈寫愈多的情況下，預設的 CSS 語法可能無法滿足，管理上也比較不易，而今天要介紹的 Sass / SCSS 就能夠幫助我們更方便於 CSS 的撰寫與管理。</p><a id="more"></a><blockquote><h2 id="什麼是-Sass-SCSS？有什麼特點？"><a href="#什麼是-Sass-SCSS？有什麼特點？" class="headerlink" title="什麼是 Sass / SCSS？有什麼特點？"></a>什麼是 Sass / SCSS？有什麼特點？</h2></blockquote><p>基本上 Sass / SCSS 有以下特點：</p><ul><li>巢狀式樣式</li><li>利於切分各個樣式檔案</li><li>有變數功能</li><li>有類似於像是 function 的功能 mixin，有助於減少重複多個語法，也能更善於撰寫 RWD 網頁</li><li>其中 SCSS 也支援純 CSS 寫法</li></ul><p>以上幾個特點能，夠使 CSS 增加可維護性。不過如果要使用 Sass / SCSS 語法還必須搭配編譯軟體，再透過軟體將 Sass / SCSS 由上而下編譯成網頁看得懂的 css 檔案，因為在引入上網頁並看不懂 Sass / SCSS 檔案。</p><blockquote><h2 id="如何編譯-Sass-SCSS-語法？"><a href="#如何編譯-Sass-SCSS-語法？" class="headerlink" title="如何編譯 Sass / SCSS 語法？"></a>如何編譯 Sass / SCSS 語法？</h2></blockquote><p>這邊有兩個編譯器可以跟大家介紹：</p><ul><li>Prepros</li><li>VS code 擴充套件：Live Sass Compiler</li></ul><p>不過這一篇呢我打算使用 Prepros 來編譯（我用過 Live Sass Compiler 了，所以趁機會來試試 Prepros ），當然大家如果對 Live Sass Compiler 有興趣也可以上網 Google 一下資料～</p><blockquote><ul><li>軟體名稱：Prepros</li><li>軟體下載：<a href="https://prepros.io/downloads">Download Prepros 7</a>，目前提供 MacOS、Windows、Debian Linux 三種作業系統下載使用。</li></ul></blockquote><p>下載完執行後可以看到以下畫面：</p><p><img src="http://img.guiblogs.com/css-sass-scss/prepros-home.jpg" alt="Prepros"></p><p>此時我們將要編譯的專案目錄直接拖曳到 Prepros 內：</p><p><img src="https://img.guiblogs.com/css-sass-scss/import-project.jpg" alt="拖曳專案到 Prepros"></p><p>拖曳後就能看到 Prepros 內有預設的 index.html 以及 style.scss 兩支檔案，而後我們使用 VS code 開啟，可以看到預設是只有 scss 的樣式檔，沒有 CSS 檔案：</p><p><img src="https://img.guiblogs.com/css-sass-scss/project.jpg" alt="project 僅有 style.scss 樣式設定檔"></p><p>此時當我們輸入值並按下儲存後，自動產生出了 style.css 檔案：</p><p><img src="https://img.guiblogs.com/css-sass-scss/compile-demo.jpg" alt="Prepros 編譯過程"></p><p>我們將 style.css 打開並放置於右側，發現語法跟左邊是一模一樣的！原因是因為 Prepros 能夠偵測到專案裡面的 Sass / SCSS 是否有更動，如果有更動的話就會在相對應的 CSS 進行直接更動，但如果找不到相對應的則直接建立一個 css 檔案，例如這個範例。因此當我現在針對 style.scss 作任何更動，儲存之後右邊的 CSS 就會跟著變動。</p><blockquote><h2 id="巢狀寫法示範：原始-CSS-怎麼寫？"><a href="#巢狀寫法示範：原始-CSS-怎麼寫？" class="headerlink" title="巢狀寫法示範：原始 CSS 怎麼寫？"></a>巢狀寫法示範：原始 CSS 怎麼寫？</h2></blockquote><p>首先我們先來看要達成的效果圖：</p><p><img src="https://img.guiblogs.com/css-sass-scss/demo-example.jpg" alt="希望達成的效果圖"></p><p>我希望 h2 的「title」字樣大小為 36px、副標題使用 <code>&lt;span&gt;&lt;/span&gt;</code> 標籤包住為 16px，鏈結顏色使用紅色，傳統 CSS 可以這麼寫：（基本上實務 CSS 語法不會這樣下，僅提供示範用）</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-class">.products</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.products</span> <span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">36px</span>;<br>&#125;<br><span class="hljs-selector-class">.products</span> <span class="hljs-selector-tag">h2</span> <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>&#125;<br><span class="hljs-selector-class">.products</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="這邊會遇到什麼問題？"><a href="#這邊會遇到什麼問題？" class="headerlink" title="這邊會遇到什麼問題？"></a>這邊會遇到什麼問題？</h3><ul><li>光是 .products 就重複下了四次</li><li>萬一之後要改類別名，豈不就要改四次？</li></ul><p>因此，我們試著使用 Sass / SCSS 的巢狀特性來改善這個問題。</p><blockquote><h2 id="巢狀寫法示範：SCSS"><a href="#巢狀寫法示範：SCSS" class="headerlink" title="巢狀寫法示範：SCSS"></a>巢狀寫法示範：SCSS</h2></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-class">.products</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    h2 &#123;<br>        <span class="hljs-selector-tag">font-size</span>: 36<span class="hljs-selector-tag">px</span>;<br>        <span class="hljs-selector-tag">span</span> &#123;<br>            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-selector-tag">a</span> &#123;<br>        <span class="hljs-attribute">color</span>: red;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我們可以發現以下幾點改變：</p><ul><li>本來四個獨立的 CSS 選取器設定，合併成一個，並且下面有不同的分層</li><li>.products 第一層本身除了要設定為 Flex 特性外，也能夠同時設定 .products 下一層的 h2、a 標籤樣式</li><li>至於第二層仍然可以在往下一層設定樣式，因此 h2 標籤除了有字體大小設定外，也針對下一層 span 設定字體大小</li></ul><p>這樣就能夠非常方便的進行樣式管理，另外巢狀不只針對標籤，就算 .products 下一層有類別選擇器也是能夠使用巢狀方式來做設定的。不過要跟大家提醒，一般來講巢狀語法不超過四層是最為洽當的。</p><blockquote><h2 id="巢狀寫法示範：Sass"><a href="#巢狀寫法示範：Sass" class="headerlink" title="巢狀寫法示範：Sass"></a>巢狀寫法示範：Sass</h2></blockquote><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss"><span class="hljs-selector-class">.products</span> <br>    <span class="hljs-attribute">display</span>: flex<br>    h2<br>        font-size: <span class="hljs-number">36px</span><br>        span <br>            font-size: <span class="hljs-number">16px</span><br>    a <br>        color: red<br></code></pre></div></td></tr></table></figure><p>Sass 的寫法省略了 <code>&#123;&#125;</code> 括號以及 <code>;</code> 分號，至於要怎麼判斷分隔呢？像是我要針對 .products 設定 Flex，可以看到範例該行語法距離前段為一個 tab 鍵的距離，至於對於 h2 與 a 標籤的設定則為 2 個 tab 鍵、針對 span 的第三層要 3 個 tab 鍵，以此類堆。</p><p>因此 Sass 的寫法更強調階層的寫法，CSS 與 SCSS 如果在階層上沒這麼整齊，只要能透過括號跟分號都還是能分辨；但如果是 Sass 該對齊沒對齊的部分就會報錯囉！另外如果加上括號跟分號也是會報錯的，所以 Sass 的寫法是比較嚴謹的，這個部分要稍微留意一下。</p><blockquote><h2 id="如果報錯會發生甚麼事？怎麼解決？"><a href="#如果報錯會發生甚麼事？怎麼解決？" class="headerlink" title="如果報錯會發生甚麼事？怎麼解決？"></a>如果報錯會發生甚麼事？怎麼解決？</h2></blockquote><p>此時我想把鏈結顏色改成藍色，但是不小心在 Sass 語法加上了分號，可以發現按下儲存後右邊並沒有編譯成功，這就代表我們寫錯了。但當然這是我們故意犯錯，但是在寫 code 的過程中難免會發生連我們自己都不知道問題出在哪個錯誤，我們該怎麼 debug 呢？</p><p><img src="https://img.guiblogs.com/css-sass-scss/compile-error.jpg" alt="Prepros 編譯錯誤"></p><p>此時我們可以進入 Prepros 主程式並點擊 Logs，這裡記錄了歷史編譯紀錄，不管是成功還是失敗都會記錄；因此我們就能夠在這裡尋找編譯錯誤的原因，進而將錯誤修正。</p><p><img src="https://img.guiblogs.com/css-sass-scss/prepros-logs.jpg" alt="編譯錯誤後至 Prepros Logs 查看原因"></p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>Sass / SCSS 的特點當然不只這樣，上面也提到了變數、切分樣式表、mixin，為了避免篇幅過長下次再來介紹，各位也可以練習看看哦～</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://tw.alphacamp.co/blog/css-preprocessor-sass-scss">CSS preprocessor 與 Sass/SCSS 基本語法介紹</a>（Sass / SCSS 是個 CSS 預處理器，有關預處理器可看這篇介紹）</li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Sass</tag>
      
      <tag>SCSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RWD 響應式網頁設計該注意的 UI 細節</title>
    <link href="/rwd-ui/"/>
    <url>/rwd-ui/</url>
    
    <content type="html"><![CDATA[<p>早期只有電腦上網時期，只要針對電腦設計網頁即可。然而行動上網的普及，也促成了 RWD 的發展。然而設計響應式網頁時，並不是單純讓視窗大小能夠維持不跑版這麼簡單，還有更深入的設計細節。</p><a id="more"></a><blockquote><h2 id="動線設計：並非所有內容都要全部塞到網頁內容"><a href="#動線設計：並非所有內容都要全部塞到網頁內容" class="headerlink" title="動線設計：並非所有內容都要全部塞到網頁內容"></a>動線設計：並非所有內容都要全部塞到網頁內容</h2></blockquote><h3 id="PC-版"><a href="#PC-版" class="headerlink" title="PC 版"></a>PC 版</h3><ul><li>網頁左邊可能會有選單、廣告，右邊會有內容，最下面有頁尾。</li></ul><h3 id="Mobile-版"><a href="#Mobile-版" class="headerlink" title="Mobile 版"></a>Mobile 版</h3><ul><li>如果依照 PC 版邏輯設計，在手機上的顯示會是：選單、廣告、內容、頁尾。</li><li>對使用者會有一個問題：我想看內容，卻要先依序看選單、廣告，才能看到內容。</li><li>因此在 Mobile 不一定要顯示全部內容，像是廣告就可以隱藏或是放到下面。</li></ul><blockquote><h2 id="斷點時機：設計多欄式佈局的必要觀念"><a href="#斷點時機：設計多欄式佈局的必要觀念" class="headerlink" title="斷點時機：設計多欄式佈局的必要觀念"></a>斷點時機：設計多欄式佈局的必要觀念</h2></blockquote><ul><li>如果段落文字寬度太長，使用者眼睛要一直左右滑動。</li><li>但如果段落文字寬度太短，可能沒看個幾個字就要換行，會打擾思緒，眼睛要不斷往下。</li></ul><h3 id="盲點範例"><a href="#盲點範例" class="headerlink" title="盲點範例"></a>盲點範例</h3><ul><li>PC 版單欄式但文字太長。<ul><li>建議可兩欄或是調整段落文字寬度。</li></ul></li><li>PC 轉 pad 直接從兩欄變成單欄，導致文字段落太長。<ul><li>建議一樣維持兩欄，不過寬度都可以調整。</li></ul></li></ul><blockquote><h2 id="點擊範圍：設計讓人好點選的元素"><a href="#點擊範圍：設計讓人好點選的元素" class="headerlink" title="點擊範圍：設計讓人好點選的元素"></a>點擊範圍：設計讓人好點選的元素</h2></blockquote><ul><li>一個好的設計稿或是美感佳的網頁，也要兼顧使用者體驗。</li><li>如果點擊範圍太小，很可能點不太到或甚至於點擊到其它事件。</li></ul><h3 id="設計建議"><a href="#設計建議" class="headerlink" title="設計建議"></a>設計建議</h3><ul><li>一般來講手指點擊範圍建議設在 44px，iPhone 設定介面的按鈕便是這個高度。</li></ul><blockquote><h2 id="少即是多：避免資訊量爆炸"><a href="#少即是多：避免資訊量爆炸" class="headerlink" title="少即是多：避免資訊量爆炸"></a>少即是多：避免資訊量爆炸</h2></blockquote><h3 id="PC-版-1"><a href="#PC-版-1" class="headerlink" title="PC 版"></a>PC 版</h3><ul><li>由於螢幕較大，以文章列表為例，可以顯示較多資訊。</li><li>Ex. 縮圖 + 標題 + 局部內文 + 其它說明。</li></ul><h3 id="Mobile-版-1"><a href="#Mobile-版-1" class="headerlink" title="Mobile 版"></a>Mobile 版</h3><ul><li>由於螢幕較小，以呈現重要資訊為主，避免資訊量爆炸。</li><li>Ex. 只呈現縮圖 + 標題。</li></ul><blockquote><h2 id="載具特性：使用者行為-touch、hover-傻傻分不清楚"><a href="#載具特性：使用者行為-touch、hover-傻傻分不清楚" class="headerlink" title="載具特性：使用者行為 touch、hover 傻傻分不清楚"></a>載具特性：使用者行為 touch、hover 傻傻分不清楚</h2></blockquote><ul><li>PC 板使用滑鼠控制，因此有 hover 滑動效果以及 active 點擊效果</li><li>平板以及行動裝置只有點擊行為，因此這部分要注意</li><li>Ex. PC 版選單滑到即可呈現子選單，由於觸控裝置利用手指控制，所以須做成點擊效果</li></ul><blockquote><h2 id="斷點元素：只有手機才會顯示的功能與-Layout-切換"><a href="#斷點元素：只有手機才會顯示的功能與-Layout-切換" class="headerlink" title="斷點元素：只有手機才會顯示的功能與 Layout 切換"></a>斷點元素：只有手機才會顯示的功能與 Layout 切換</h2></blockquote><h3 id="PC-版-2"><a href="#PC-版-2" class="headerlink" title="PC 版"></a>PC 版</h3><ul><li>以選單為例：由於寬度夠寬，所以可以直接呈現所有選單鏈結在 header</li></ul><h3 id="pad-版以及-Mobile-版"><a href="#pad-版以及-Mobile-版" class="headerlink" title="pad 版以及 Mobile 版"></a>pad 版以及 Mobile 版</h3><ul><li>由於裝置寬度較小可能無法顯示所有選單，會做成麵包選單</li><li>pad 寬度雖然可能剛好足夠，但如果選單一多可能就不夠了，所以也能做成麵包選單</li><li>麵包選單指須要點擊按鈕才會顯示選單</li></ul><h3 id="操作方式"><a href="#操作方式" class="headerlink" title="操作方式"></a>操作方式</h3><ul><li>PC 版：顯示選單、隱藏麵包選單</li><li>pad 版以及 Mobile 版：隱藏選單、顯示麵包選單<ul><li>打開麵包選單後，顯示選單並隱藏麵包選單按鈕，改成顯示關閉麵包選單按鈕「X」</li><li>按下關閉麵包選單按鈕後隱藏選單跟關閉按鈕，顯示麵包選單按鈕</li></ul></li></ul><h3 id="利用-CSS-控制"><a href="#利用-CSS-控制" class="headerlink" title="利用 CSS 控制"></a>利用 CSS 控制</h3><ul><li>Layout 切換可利用 CSS 控制：</li></ul><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block; <span class="hljs-comment">/* 顯示區塊並設定成擁有區塊元素效果的行內元素 */</span><br>    <span class="hljs-attribute">display</span>: none; <span class="hljs-comment">/* 隱藏區塊 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>網頁除了好看，使用者的視覺與互動感受，都是要兼顧的，因此並不單單只是裝置大小的差異。尤其是現在主流是行動上網，對於手機版面的設計更要下比較多功夫啊！一起加油吧～</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li>六角學院網頁切版直播班</li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>RWD</tag>
      
      <tag>UI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原來已經 12 年了，這條路佔了我超過一半的人生</title>
    <link href="/web-12y/"/>
    <url>/web-12y/</url>
    
    <content type="html"><![CDATA[<p>今天不寫技術，來點回顧。還記得大三上的期中專題報告，我在簡報上是這麼寫的：</p><p><img src="https://img.guiblogs.com/web-12y/meeting-ppt.jpg" alt="小時候的你，有過夢想嗎？"></p><a id="more"></a><blockquote><h2 id="8-月是我的啟蒙月"><a href="#8-月是我的啟蒙月" class="headerlink" title="8 月是我的啟蒙月"></a>8 月是我的啟蒙月</h2></blockquote><p>我第一次接觸網路是在小學三年級，因為那時候學校開始有了電腦課，所以就要求家裡辦網路給我，後來回到家終於不在只有彈珠台可以玩了（感動）。有了網路後，一開始就是上上網，覺得很新奇。第一個想法就是想架設出自己的網站！不過想也知道那時候我連 Yahoo! 奇摩帳號都不會申請了（想申請但一直失敗 QQ），更何況是架設網站呢 XD</p><p>後來靠了家人的幫助下，申請了 Yahoo! 奇摩帳號後，我記得那天是 2008 年 8 月 13 日，畢竟是啟蒙日嘛！隔天我就在 Yahoo! 奇摩部落格創立了自己第一個部落格，這也就開始了我寫文章的第一個序幕。</p><blockquote><h2 id="我還是想架設網站，而不是寄人籬下"><a href="#我還是想架設網站，而不是寄人籬下" class="headerlink" title="我還是想架設網站，而不是寄人籬下"></a>我還是想架設網站，而不是寄人籬下</h2></blockquote><p>寫了一段時間的部落格，也陸續碰了許多 BSP 服務，像是無名小站、天空部落、樂多日誌、… 等，我心中還是有個想要自己架設網站的想法，但是在 2008 / 2009 年時代，這方面的網路資源並不像現在這麼多，尤其那時候我才國小，懂得知識量又更少，坦白說對我而言是滿難的。</p><p>後來誤打誤撞的情況之下碰了電腦裡 Frontpage 所見即所得模式的網站編輯器，做出了個框架頁出來，但是因為我還不會上傳到網頁空間，只能當有客人來家裡時，我會炫耀我會寫網站（？），結果好景不長，後來電腦故障重灌，所有資料不見，而且重灌後也沒有 Frontpage 了……</p><blockquote><h2 id="後來我用了-Publisher-編輯網站，並上傳我的第一個網站"><a href="#後來我用了-Publisher-編輯網站，並上傳我的第一個網站" class="headerlink" title="後來我用了 Publisher 編輯網站，並上傳我的第一個網站"></a>後來我用了 Publisher 編輯網站，並上傳我的第一個網站</h2></blockquote><p>其實我也忘記是不是 publisher 了，因為重灌後沒有 Frontpage，我就隨意地在 office 找了一個軟體，後來就發現了 Publisher 的提示訊息有「網頁」我就使用了……，但其實它是一個桌面出版應用軟體，所以我用於網站開發上是比較怪怪的 XD 但我還是慢慢地排出了許多我想達到的樣式。</p><p>那時候有一種軟體程式叫做「動態網頁模組」，其中有個功能是可以開放會員上傳檔案成為網頁網址。後來我有找了一個用動態網頁模組架設網站的系統註冊，在裡面上傳我的檔案，然後………….. 2009 年 8 月 15 日（距今 12 年啊！），我的第一個上傳到網路的網頁就誕生了，也開啟了我的網站架設之路。</p><blockquote><h2 id="當然，這不是終點，所以努力到現在"><a href="#當然，這不是終點，所以努力到現在" class="headerlink" title="當然，這不是終點，所以努力到現在"></a>當然，這不是終點，所以努力到現在</h2></blockquote><p>雖然正常來講架一個網頁，還是會找一些能夠自主控制的空間來架設，而不是類似這種檔案上傳系統（雖然說上傳後還真的變成可以瀏覽的網頁），不過對我而言這是一個突破，第一次將自己撰寫的網站上傳到網路上，對於一個小學生而言很感動啊！後續也陸續接觸了 Xoops、WordPress（那時版本是 2.8 XD 最近出到 5.8 了），後來升上高職也選了資處科、一路到大學的資管系畢業，到現在還在這一塊領域努力，回想過去還滿感慨的。</p><blockquote><p>小學時買的書，那時還是 WordPress 2.8</p><p><img src="https://img.guiblogs.com/web-12y/blog-book.jpg" alt="BLOG 架站王"></p></blockquote><blockquote><h2 id="未來我們還會持續相遇"><a href="#未來我們還會持續相遇" class="headerlink" title="未來我們還會持續相遇"></a>未來我們還會持續相遇</h2></blockquote><p>這算是第一次在部落格內講述自己的心路歷程，這篇是部落格的第 21 篇文章，雖然只是小小的網站，不過仍然希望能夠紀錄我的學習歷程，路過的網友也能從這裡學到一些資訊。可能是某個夜晚寫著 code 時，因為我的內容給了你一些幫助。我想未來也會持續努力，希望你我都能夠在這塊領域持續深耕！</p>]]></content>
    
    
    <categories>
      
      <category>學習</category>
      
    </categories>
    
    
    <tags>
      
      <tag>網站架設</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>運用 CSS 媒體查詢語法開發 RWD 響應式網頁</title>
    <link href="/css-media-rwd/"/>
    <url>/css-media-rwd/</url>
    
    <content type="html"><![CDATA[<p>隨著時代的進步，上網的載具愈來愈方便，從早期的電腦，到後來的平板、手機，甚至於是超大型螢幕，已經不止傳統的 1024 * 768 解析度螢幕。而這麼多變的螢幕大小，正考驗著網頁開發者的功夫啊！因為這樣也衍生出了所謂的 RWD 響應式網頁設計，讓網頁在不同的裝置或視窗大小呈現不同的顯示方式。</p><a id="more"></a><blockquote><h2 id="RWD-的特點"><a href="#RWD-的特點" class="headerlink" title="RWD 的特點"></a>RWD 的特點</h2></blockquote><ol><li>能夠自適應於不同裝置或是視窗的大小。</li><li>不會出現 x 軸滾輪。（一般來講只有平常最常見的垂直滾輪，不能有水平滑動的滾輪，不然就不是 RWD）</li></ol><p>可以參考「<a href="https://www.cadiis.com.tw/blog/rwd-web-design-infographic">什麼是RWD響應式網頁設計？圖解說明讓你3分鐘搞懂手機版網站</a>」這篇有更詳盡的解說。</p><blockquote><h2 id="設計-RWD-頁面起手式"><a href="#設計-RWD-頁面起手式" class="headerlink" title="設計 RWD 頁面起手式"></a>設計 RWD 頁面起手式</h2></blockquote><p>首先，必須在 <code>&lt;head&gt;&lt;/head&gt;</code> 加上以下這段語法，如果是用 VScode 的 Emmet 功能基本上預設就會有：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>這段語法代表的是網頁寬度要等於裝置的寬度，畫面初始縮放比例為 100%。使用此段語法就能確保網頁在不同寬度的裝置都能夠正常呈現網頁排版與內容。</p><blockquote><h2 id="媒體查詢語法"><a href="#媒體查詢語法" class="headerlink" title="媒體查詢語法"></a>媒體查詢語法</h2></blockquote><p>媒體查詢可以知道用戶的裝置資訊，可用來查詢視區寬高以及裝置寬高。根據 W3Schools 有以下媒體類型：</p><ul><li>all 所有裝置</li><li>print 印表機列印輸出</li><li>screen 一般電腦螢幕</li><li>speech 朗讀式裝置</li></ul><p>如果是針對一般螢幕通常是會使用 screen，使用方式如下：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width:</span> <span class="hljs-number">991px</span>) &#123;<br>    <span class="hljs-comment">/* CSS 語法 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>以上例子就是針對 screen 這個媒體類型，在小於並包含 991px 的裝置大小之下，所呈現的 CSS 語法。不過其實媒體類型是可以省略的，如果省略效果就會是「all 所有裝置」。範例如下：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width:</span> <span class="hljs-number">767px</span>) &#123;<br>    <span class="hljs-comment">/* CSS 語法 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>以上範例就是不限任何裝置，在包含 767px 寬度以下，所要呈現的 CSS 語法。</p><blockquote><h2 id="利用媒體查詢設計響應式網頁"><a href="#利用媒體查詢設計響應式網頁" class="headerlink" title="利用媒體查詢設計響應式網頁"></a>利用媒體查詢設計響應式網頁</h2></blockquote><p><strong>CSS</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-comment">/* CSS Reset 省略 */</span><br><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: auto;<br>&#125;<br><span class="hljs-selector-class">.wrap</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">margin</span>: auto;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>&#125;<br><span class="hljs-selector-class">.item</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">24%</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width:</span> <span class="hljs-number">991px</span>) &#123;<br>    <span class="hljs-selector-class">.item</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">48%</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width:</span> <span class="hljs-number">767px</span>) &#123;<br>    <span class="hljs-selector-class">.item</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">98%</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>HTML</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://fakeimg.pl/300x300/eee&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Nobis, omnis.<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://fakeimg.pl/300x300/eee&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        Dolore harum in dignissimos, quo expedita commodi rerum aliquid soluta.<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://fakeimg.pl/300x300/eee&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        Expedita quisquam molestiae quae culpa id hic in consequuntur. Consequuntur.<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://fakeimg.pl/300x300/eee&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        Fuga cumque excepturi exercitationem suscipit et eveniet libero repellat maiores.<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="避免圖片過大破版：img-必做設定"><a href="#避免圖片過大破版：img-必做設定" class="headerlink" title="避免圖片過大破版：img 必做設定"></a>避免圖片過大破版：img 必做設定</h3><p>呈現在網頁上的圖片，基本上會建議要呈現多大、圖片大小就設定成一樣，是最節省資源又不失品質的體驗。但有時我們無法決定圖片的大小是如何，如果圖片太大的話，就會造成網頁破版。</p><p>因此在此範例中，會先將圖片最大訂在 100%，這樣不管圖片大小如何在網頁上的呈現寬度都會是區塊的 100%。</p><h3 id="外容器除了設定-width，還要設定-max-width"><a href="#外容器除了設定-width，還要設定-max-width" class="headerlink" title="外容器除了設定 width，還要設定 max-width"></a>外容器除了設定 width，還要設定 max-width</h3><p>width 跟 max-width 的差別在於，width 是我設定目前這個區塊的寬度為多少，而 max-width 則是這個區塊的寬度最寬僅能到多少。</p><p>以這個範例來說，我預設設定了 1200 px，在比 1200px 大的螢幕裝置上，區塊都會呈現 1200px 的寬度。但如果是在平板或是手機螢幕寬度小於 1200px 的情況下，寬度就不會呈現到 1200px，而是最寬也只會等於使用裝置大小的可視寬度，如此就能確保區塊會在可視範圍內呈現。</p><h3 id="瀏覽器會依照裝置大小呈現不同的-CSS-語法"><a href="#瀏覽器會依照裝置大小呈現不同的-CSS-語法" class="headerlink" title="瀏覽器會依照裝置大小呈現不同的 CSS 語法"></a>瀏覽器會依照裝置大小呈現不同的 CSS 語法</h3><p>這篇就不懶惰了（？來附上幾張截圖吧 XDDD 首先第一張就是最原始的大於 1200px 的 14吋筆電所顯示的畫面，可以看到我使用 <code>margin: auto;</code> 讓外容器水平居中於網頁時，左右都還是有一些空隙。</p><p><img src="https://img.guiblogs.com/css-media-rwd/1.jpg" alt="可視範圍寬度大於 1200px，左右都還有空隙"></p><p>再來這個階段，可以看到都還有背景我撰寫這篇文章的編輯器，就代表瀏覽器視窗已經縮小。此時瀏覽器視窗寬度已經小於 1200px，如果照著外容器設定寬度為 1200px 並沒有其它的情況之下，是會出現 x 軸滾輪的。但是因為我有設定 <code>width: 100%;</code>，在外容器寬度大於裝置寬度時，最大寬度也只能呈現裝置寬度的 100%，因此不會出現 x 軸滾輪。</p><p><img src="https://img.guiblogs.com/css-media-rwd/2.jpg" alt="可視範圍寬度小於 1200px 但也不會出現 x 軸"></p><p>此時可視範圍寬度已經小於 991px，此時大多介於平板裝置的螢幕大小。此時就會引入 <code>@media (max-width: 991px)</code> 的 CSS 語法設定。可以看到 Chrome 右下角的開發人員工具，原本的 <code>width: 24%;</code> 被符合條件的媒體查詢的 <code>width: 48%;</code> 覆蓋，因此現在一行僅會顯示兩個 .item 區塊。</p><p><img src="https://img.guiblogs.com/css-media-rwd/3.jpg" alt="可視範圍寬度小於 991px"></p><p>再來就是可視範圍寬度小於 767px 的呈現啦，此時可以看到原先兩項 width 設定都被覆蓋掉了，取而代之的是 <code>@media (max-width: 767px)</code> 內的 width 設定。</p><p><img src="https://img.guiblogs.com/css-media-rwd/4.jpg" alt="可視範圍寬度小於 767px"></p><blockquote><h2 id="手機優先：從行動裝置開始設計網頁排版"><a href="#手機優先：從行動裝置開始設計網頁排版" class="headerlink" title="手機優先：從行動裝置開始設計網頁排版"></a>手機優先：從行動裝置開始設計網頁排版</h2></blockquote><p>上述範例都是從電腦裝置的角度，由大螢幕慢慢設計至小螢幕。然而現在手機上網的比率其實是比較多的，如果我們都是從大螢幕開始進行設計，媒體查詢的特性是有符合條件式就會引入裡面的 CSS 內容渲染至網頁上，因此如果要到最小尺寸螢幕，以上述範例來講要先載入大螢幕樣式、平板樣式最後才會載入手機樣式，對於行動裝置使用者有較多資源消耗。</p><p>另外 Google 在 2016 年陸續開始宣布針對搜尋引擎，啟用行動優先索引，因此網頁如果從手機開始進行設計，會有利於 SEO 優化。BootStrap 就是使用行動裝置優先的方式設計。</p><p>Google 相關政策以及對於 SEO 的影響可參考『<a href="https://www.bnext.com.tw/article/56878/google-mobile-first-indexing">9月流量恐失血！Google搜尋排名改採「行動優先索引」，SEO該怎麼因應？</a>』。    </p><h3 id="利用-min-width-設計行動裝置優先的-RWD"><a href="#利用-min-width-設計行動裝置優先的-RWD" class="headerlink" title="利用 min-width 設計行動裝置優先的 RWD"></a>利用 min-width 設計行動裝置優先的 RWD</h3><p>由於行動裝置優先是從小裝置寫到大裝置，因此設置媒體查詢的斷點時，要從原本的 <code>max-width</code> 改成 <code>min-width</code>，先撰寫最小裝置的 CSS 樣式設定後，在透過 <code>min-width</code> 的方式慢慢將條件式的可視範圍往上加，就能撰寫行動裝置優先的 RWD 設計。</p><p><strong>CSS</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-comment">/* CSS Reset 省略 */</span><br><span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: auto;<br>&#125;<br><span class="hljs-selector-class">.wrap</span> &#123;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br><span class="hljs-selector-class">.item</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">98%</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width:</span> <span class="hljs-number">768px</span>) &#123;<br>    <span class="hljs-selector-class">.wrap</span> &#123;<br>        <span class="hljs-attribute">display</span>: flex;<br>        <span class="hljs-attribute">justify-content</span>: space-between;<br>        <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    &#125;<br>    <span class="hljs-selector-class">.item</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">48%</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width:</span> <span class="hljs-number">992px</span>) &#123;<br>    <span class="hljs-selector-class">.wrap</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.item</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">24%</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>這邊我們將原先從電腦螢幕開始設計的 CSS 改寫成行動裝置優先，有做以下修正：</p><ul><li>設定在初始 .wrap 的寬度 1200px 改移到可視範圍寬度最低為 992px 以上時才設定在 .wrap</li><li>由於手機預設一行一個 .item，因此一開始可不用到 Flex 的語法，因此移到可視範圍寬度最低為 768px 時，一行需要呈現 2 個 .item 時使用</li><li>其餘設定在屬性內的 <code>max-width</code> 則不用變動，因為最寬可視範圍以及最寬圖片寬度一樣只能到 100% 才符合 RWD</li></ul><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>運用這些語法就能夠大概的開發一個響應式網頁了，但其實開發響應式網頁並沒有想像中那麼簡單，有非常多眉角需要注意與優化，要同時考量不同裝置的使用者體驗、確保每個裝置都要能夠正常呈現排版，其實是很不容易的事情（近期接案生活嘔心瀝血的經歷），持續學習與實作才能戰勝 RWD 啊！</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://www.youtube.com/watch?v=czkmXTkjCDM">金魚都能懂網頁設計入門 : 媒體查詢 - 鐵人賽第二十天</a></li><li><a href="https://www.youtube.com/watch?v=0FayRAu1du0">金魚都能懂網頁設計入門 : RWD入門 - 鐵人賽第二十一天</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10203671">Day6 如何做出響應式網頁(RWD)？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>RWD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有哪幾種指定 CSS 樣式的方式？權重又是什麼？能吃嗎？</title>
    <link href="/css-specificity/"/>
    <url>/css-specificity/</url>
    
    <content type="html"><![CDATA[<p>網站的開發當中，若要設定 CSS，我們除了能夠針對網頁的標籤、class 進行指定，其實還有其它方式都能夠指定 CSS 樣式至我們希望呈現樣式的區塊，至於有那些呢，這篇文章就會來提到。</p><p>另外選用不同的方式，也會有不同的差異，這部分就會關心到 CSS 一種叫做「權重」的觀念，而它又牽涉到語法撰寫先後的問題，我們也會於後面來介紹。</p><a id="more"></a><blockquote><h2 id="指定-CSS-樣式的方式"><a href="#指定-CSS-樣式的方式" class="headerlink" title="指定 CSS 樣式的方式"></a>指定 CSS 樣式的方式</h2></blockquote><h3 id="星號，全域選擇器"><a href="#星號，全域選擇器" class="headerlink" title="* 星號，全域選擇器"></a><code>*</code> 星號，全域選擇器</h3><p>此種指定方式權重為 0 分，實作方法如下：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* CSS */</span><br>* &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>星號代表的是整個 html 標籤，因此星號內的設定會套用到整個 HTML 標籤，如有要使用可放置於 CSS 前面位置，也看過有大神使用 <code>*</code> 來做 CSS Reset。</p><p>另外必須要特別提起的是，<code>*</code> 跟 <code>body</code> 標籤是不一樣的，雖然平常我們會利用 <code>body</code> 設計網站最基本或通用的樣式，但 <code>body</code> 的設定，套用範圍僅為該層以及子層（若設定具有繼承性的情況之下），但星號是整個 HTML 標籤的預設值都會被改變，所以請小心使用。</p><h3 id="標籤選擇區"><a href="#標籤選擇區" class="headerlink" title="標籤選擇區"></a>標籤選擇區</h3><p>此種指定方式權重為 1 分，實作方式如下：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* CSS */</span><br><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>: pink;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>此方式就是針對某一種標籤進行設定樣式動作，例如指定 h1 標籤（標題）顏色都是藍色、指定 a 標籤（鏈結）顏色都是粉紅色。</p><p>另外若針對標籤進行設定，我們得知標籤選擇器的權重為 1 分，比起星號的 0 分較高，因此前面 <code>*</code> 的設定會被覆蓋，例如我設定 <code>h1</code> 以及 <code>a</code> 標籤顏色後，原先的橘色設定都會被這兩個標籤的 CSS 設定覆蓋，但此時 <code>p</code> 標籤因為沒有進行任何設定，所以顏色就還是會維持星號的橘色哦！</p><p>不過這時就會遇到一個問題了，又不一定每個標籤的顏色永遠都一樣，像是文字色彩、文字大小、……，每個地方都很可能有不同的呈現，就不太能利用標籤選擇器來解決了。因此就會用到類別選擇器來解決這個問題。</p><h3 id="類別選擇器"><a href="#類別選擇器" class="headerlink" title="類別選擇器"></a>類別選擇器</h3><p>此種指定方式權重為 10 分，實作方式如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- CSS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    p &#123;<br>        font-size: 16px;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.fz-2</span> &#123;</span><br>        font-size: 20px;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.fz-3</span> &#123;</span><br>        font-size: 24px;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-comment">&lt;!-- HTML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fz-2&quot;</span>&gt;</span>lorem<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fz-3&quot;</span>&gt;</span>lorem<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>此時相信聰明的各位知道了權重的特性，權重分數愈大就會蓋住權重分數較小的部分，因此使用類別選擇器就能夠覆蓋住前面使用星號以及標籤選擇器設定的樣式。</p><p>使用此種方式需要再指定的標籤上加上 <code>class=&quot;類別名&quot;</code> 的設定值，設定完後要到 CSS 設定針對此類別名稱的 CSS 樣式。且若使用類別選擇器指定樣式，在 CSS 內要在類別名稱錢加上 <code>.</code> 來做為跟標籤選擇器的區別。</p><p>因此使用類別選擇器就能夠針對不同的情境顯示不同的樣式了，而在實務上基本上也以設定標籤選擇器以及類別選擇器指定樣式為最大宗，但其實還有其它種設定方式，就繼續看下去吧！</p><h3 id="ID-選擇器"><a href="#ID-選擇器" class="headerlink" title="ID 選擇器"></a>ID 選擇器</h3><p>此種指定方式權重為 100 分，實作方式如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- CSS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-id">#fz-3</span> &#123;</span><br>        font-size: 24px;<br>    &#125;<br>    p &#123;<br>        font-size: 16px;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.fz-2</span> &#123;</span><br>        font-size: 20px;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-comment">&lt;!-- HTML --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fz-2&quot;</span>&gt;</span>lorem<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fz-2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fz-3&quot;</span>&gt;</span>lorem<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>指定方式的部分如同 class 那樣，在 HTML 增加一個 <code>id</code> 屬性，而在 CSS 設定樣式部分則是在 ID 前面加上 <code>#</code> 井字號，以此跟標籤選擇器還有類別選擇器作區別。使用 ID 選擇器後，雖然此範例第二個 p 段落同時有標籤、類別以及 ID 三種選擇器的設定，但因為 ID 選擇器的權重有 100 分，因此字體大小仍然為 24px。</p><p>基本上實務上不太會利用 ID 選擇器來指定樣式，除了分數過高難以讓後續覆蓋之外，而且一個網頁只能有同一個 ID 選擇器（class 可多個、ID 僅能一個），其實也不難理解為何只能有一個 ID，畢竟 ID 也可以類比成這段語句在網頁上的一種唯一識別（像是身份證字號或是地址）。</p><p>因此什麼時候會使用到 ID 呢？就是錨點，例如我們可以點擊鏈結，到網頁指定的區域。像我們就可以設定一個鏈結到達 id 設定為 fz-3 的區域。因為今天的主題是權重，所以這部分改天可以再寫一篇。</p><h3 id="inline-style"><a href="#inline-style" class="headerlink" title="inline style"></a>inline style</h3><p>此種指定方式權重為 1000 分，實作方式如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 72px;&quot;</span>&gt;</span><br>    lorem<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>此種指定方式是直接在 HTML 標籤內下 CSS 語法，就能讓位於此段落區塊下面的內容設定成字體大小 72px。利用此種設定方式，因為權重比起前面所介紹的選擇器都還高分，所以就會呈現這裡的設定。</p><p>基本上也不太會使用此種方式設定樣式，會去設定的情況是為了要跟後端連接，比如像是募資網站會見到的進度條，就會將目前募資進度數值傳到 style，再由這裡呈現目前的進度。</p><h3 id="大魔王來襲！-important"><a href="#大魔王來襲！-important" class="headerlink" title="大魔王來襲！!important"></a>大魔王來襲！<code>!important</code></h3><p>此種指定方式權重為 10000 分，實作方式如下：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">color</span>: red <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>之所以叫他大魔王就是沒人比它高分了，指定為 <code>!important</code> 之後基本上可以無視其他選擇器的 <code>color</code> 設定了，因為都會以這裡的設置為主，所以基本上平常不太可能使用此設定值，不然後面怎麼改都改不動 XD</p><blockquote><h2 id="覆蓋樣式設定：先看權重，在看先後"><a href="#覆蓋樣式設定：先看權重，在看先後" class="headerlink" title="覆蓋樣式設定：先看權重，在看先後"></a>覆蓋樣式設定：先看權重，在看先後</h2></blockquote><p>我們先來整理一下前面所提到的選擇器以及權重分數：</p><ul><li><code>*</code> 星號：0 分（看情況使用）</li><li>標籤選擇器：1 分</li><li>類別選擇器：10 分</li><li>ID 選擇器：100 分（不建議設定樣式用）</li><li>inline style：1000 分（不建議設定樣式用）</li><li><code>!important</code>：10000 分（不建議設定樣式用）</li></ul><p>之所以會建議平常使用標籤選擇器與類別選擇器，是因為後續在覆蓋上會比較好覆蓋。但為何要覆蓋呢？可能會有幾種情境：</p><ul><li>網站預設文字為 16px，因此設定 <code>body</code> 為16px，但我希望有些字體能夠比較大</li><li>RWD 中，我希望電腦呈現的某區塊，在手機的又設定一個比較小的大小</li></ul><p>這時候就會出現覆蓋的情形了。但是會怎麼覆蓋呢？基本上前面我們已經知道了權重的概念，但如果遇到了兩個同樣的屬性設定、但權重一樣的情形該會呈現哪一種設定值呢？這時候就會以樣式設定的先後順序來決定，此時比較後面設定的樣式就會覆蓋前面設定的。直接來段範例吧！</p><h3 id="情境一：標籤在前、類別選擇器在後"><a href="#情境一：標籤在前、類別選擇器在後" class="headerlink" title="情境一：標籤在前、類別選擇器在後"></a>情境一：標籤在前、類別選擇器在後</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    a &#123;<br>        color: pink;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.a</span> &#123;</span><br>        color: red;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>鏈結<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>答案我想很清楚就會是紅色的，因為類別選擇器權重較大。</p><h3 id="情境二：類別選擇器在前、標籤選擇器在後"><a href="#情境二：類別選擇器在前、標籤選擇器在後" class="headerlink" title="情境二：類別選擇器在前、標籤選擇器在後"></a>情境二：類別選擇器在前、標籤選擇器在後</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.a</span> &#123;</span><br>        color: red;<br>    &#125;<br>    a &#123;<br>        color: pink;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>鏈結<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>此情境答案一樣是紅色，雖然 a 標籤的設定在後，但因為先看權重才會看先後，所以還是類別選擇器贏喔！</p><h3 id="情境三：兩個類別選擇器"><a href="#情境三：兩個類別選擇器" class="headerlink" title="情境三：兩個類別選擇器"></a>情境三：兩個類別選擇器</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.a</span> &#123;</span><br>        color: red;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.b</span> &#123;</span><br>        color: pink;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a b&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>鏈結<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>此情境答案就會變成是粉紅色了。因為兩種權重都是 10 分，所以後面會蓋掉前面。</p><h3 id="情境四：CSS-順序跟-HTML-類別擺放順序不一樣"><a href="#情境四：CSS-順序跟-HTML-類別擺放順序不一樣" class="headerlink" title="情境四：CSS 順序跟 HTML 類別擺放順序不一樣"></a>情境四：CSS 順序跟 HTML 類別擺放順序不一樣</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.a</span> &#123;</span><br>        color: red;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.b</span> &#123;</span><br>        color: pink;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;b a&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>鏈結<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>大家可以注意到 a 標籤內的類別擺放順序不一樣了，但是答案一樣是粉紅色喔！因為權重只看 CSS 樣式設定，不看你 HTML 類別的設定順序 XD</p><h3 id="情境五：來個變化題吧！"><a href="#情境五：來個變化題吧！" class="headerlink" title="情境五：來個變化題吧！"></a>情境五：來個變化題吧！</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    a &#123;<br>        color: red;<br>    &#125;<br>    b &#123;<br>        color: pink;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a b&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>鏈結<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>此題答案不知道大家有沒有想對呢？答案會是紅色，因為可以看到 CSS 設定的是針對 a 標籤跟 b 標籤，而不是類別選擇器哦！所以答案會是針對 a 標籤設定的紅色。</p><h3 id="情境六：選擇器權重還能夠相加"><a href="#情境六：選擇器權重還能夠相加" class="headerlink" title="情境六：選擇器權重還能夠相加"></a>情境六：選擇器權重還能夠相加</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.wrap</span> <span class="hljs-selector-tag">p</span> &#123;</span><br>        color: orange;<br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.text</span> &#123;</span><br>        color: blue;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>        lorem<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>這題你的答案是什麼呢？這題的答案會是橘色哦！計算如下：</p><ul><li>.wrap 為 10 分 + p 段落 1 分 = 11 分</li><li>.text 為 10 分</li></ul><p>所以 11 分大於 10 分的情況下，就會是橘色獲勝啦！所以選擇器的權重是能夠相加的 XD 想不到吧！</p><blockquote><h2 id="使用逗點指定樣式給多個選擇器"><a href="#使用逗點指定樣式給多個選擇器" class="headerlink" title="使用逗點指定樣式給多個選擇器"></a>使用逗點指定樣式給多個選擇器</h2></blockquote><p>另外最後還需要介紹的是使用逗點來指定樣式給多個選擇器，因為有些樣式可能多個選擇器都會套用到，就會使用逗點來去做指定。至於常使用嗎？CSS Reset 會利用到這個技巧，至於平常是否會使用，其實我也不知道 XD 反正知道有這個技巧，就記錄下來。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">ol</span> &#123;<br>    <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>此語法能夠同時清除 ul 以及 ol 前面的項目符號以及編號，就不用分開設定了！另外需要注意的是他們的權重都是 1 分唷，不會因為同時設定而增加成 2 分。</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>這篇我沒有附上截圖，開放讓大家自己動手做做看、親自體驗，相信會有更多收穫！（<del>迷之聲：其實是懶癌發作 XDDDDDD</del>）另外撰寫這篇文章也讓我對於星號的使用有了進一步的認識與了解，相關資料我也放在下方，大家也可以點開看看哦！</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://ithelp.ithome.com.tw/articles/10196454">Day20：小事之 CSS 權重 (css specificity)</a></li><li><a href="https://sites.google.com/site/yutingnote/qian-taihtml-css-js/cssxinghao">CSS 星號 *</a></li><li><a href="https://selflearningsuccess.com/css-specificity/">CSS權重(specificity)：熟悉這6個樣式級別，讓你的樣式被採用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>選擇器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flex 強大排版術：align-items、align-content 傻傻分不清楚？align-self 又是什麼？</title>
    <link href="/flex-align/"/>
    <url>/flex-align/</url>
    
    <content type="html"><![CDATA[<p>前面發了兩篇的 Flex 排版技術文章、也提到了許多主軸的排版方式，今天就要來介紹交錯軸 <code>align-items</code>。不過我在學習 Flex 時，發現到除了 <code>align-items</code> 之外，竟然還有 <code>align-content</code>、<code>align-self</code> 這些屬性，對於我這個小小新手來說整個傻傻分不清楚啊！所以，今天就來一起整理一下思緒吧！</p><a id="more"></a><blockquote><h2 id="我們先來釐清一下這三者的差別"><a href="#我們先來釐清一下這三者的差別" class="headerlink" title="我們先來釐清一下這三者的差別"></a>我們先來釐清一下這三者的差別</h2></blockquote><p>在進入探討之前，先來簡單敘述一下這三者代表的是什麼，有些基本概念，再來了解或許會比較好理解：</p><ul><li>align-items：當交錯軸只有一行時的對齊方式</li><li>align-content：交錯軸為多行時的的整體對齊方式</li><li>align-self：交錯軸個別項目的對齊方式</li></ul><blockquote><h2 id="交錯軸整體對齊：align-content"><a href="#交錯軸整體對齊：align-content" class="headerlink" title="交錯軸整體對齊：align-content"></a>交錯軸整體對齊：align-content</h2></blockquote><p>其實此篇文章我本來是從 align-items 開始撰寫，不過愈是撰寫就感覺愈來愈卡，後來決定先撰寫 align-content 再來介紹 align-items，感覺會比較順暢 XD</p><h3 id="Demo-語法"><a href="#Demo-語法" class="headerlink" title="Demo 語法"></a>Demo 語法</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item-1&quot;</span>&gt;</span><br>        Lorem ipsum dolor sit amet consectetur adipisicing elit. Hic, nulla!<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Fuga dicta dolorum vel accusantium ea illum corrupti debitis esse ducimus possimus.<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ex quo esse placeat id. Consectetur, libero rerum! Eveniet placeat laudantium atque voluptatibus soluta doloremque tempora praesentium officia. Autem ad repellat eum?<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ex quo esse placeat id. Consectetur, libero rerum! Eveniet placeat laudantium atque voluptatibus soluta doloremque tempora praesentium officia. Autem ad repellat eum?<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ex quo esse placeat id. Consectetur, libero rerum! Eveniet placeat laudantium atque voluptatibus soluta doloremque tempora praesentium officia. Autem ad repellat eum?<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ex quo esse placeat id. Consectetur, libero rerum! Eveniet placeat laudantium atque voluptatibus soluta doloremque tempora praesentium officia. Autem ad repellat eum?<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>CSS</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-comment">/* CSS Reset 語法省略 */</span><br><span class="hljs-selector-class">.wrap</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">960px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;<br>    <span class="hljs-attribute">margin</span>: auto;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>    <span class="hljs-attribute">align-content</span>: stretch（預設值） | flex-start | center | flex-end | space-between | space-around | space-evenly<br>&#125;<br><span class="hljs-selector-class">.item</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">30%</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-selector-class">.item-1</span> &#123;<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="align-content-stretch（預設值）"><a href="#align-content-stretch（預設值）" class="headerlink" title="align-content: stretch（預設值）"></a>align-content: stretch（預設值）</h3><p>首先，若一開始我們沒有設定 align-content 值，那它就會使用 align-content 的預設值 stretch，這個設定值不但會讓子層的項目等高，而且所有行的高度會剛好切齊父層高度（100vh 使容器高度等於裝置螢幕可視高度），所以我們看第一行的 item 雖然字數不同，但也仍然等高。</p><p><img src="https://img.guiblogs.com/flex-align/align-content-stretch.jpg" alt="align-content-stretch"></p><h3 id="align-content-flex-start-center-flex-end-space-between-space-around-space-evenly"><a href="#align-content-flex-start-center-flex-end-space-between-space-around-space-evenly" class="headerlink" title="align-content: flex-start | center | flex-end | space-between | space-around | space-evenly"></a>align-content: flex-start | center | flex-end | space-between | space-around | space-evenly</h3><p>那如果設定 align-content 為其它屬性呢？雖然 item 依然等高，不過是等於字數推擠出最高的項目高度。接著就會依照每個設定值，呈現不同的對齊方式。這五項設定值我想如果有看過上一篇「<a href="https://guiblogs.com/css-flex-2/">Flex 強大排版術：主軸對齊怎麼做？為何都擠在同一排？相應屬性一次解說！</a>」就很清楚了，就跟主軸對齊 justify-content 的設定值一樣。（還沒看過的可以先回顧）</p><p><img src="https://img.guiblogs.com/flex-align/align-content.jpg" alt="align-content"></p><blockquote><h2 id="交錯軸單行對齊：align-items"><a href="#交錯軸單行對齊：align-items" class="headerlink" title="交錯軸單行對齊：align-items"></a>交錯軸單行對齊：align-items</h2></blockquote><p>首先要在 .wrap 增加 align-items 屬性：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS">align-items: stretch（預設） | flex-start | center | flex-end | baseline<br></code></pre></div></td></tr></table></figure><p>上述 align-content 所呈現出的效果，都是預設值 stretch 的效果，所以我們可以看到所有項目都是等高的。那如果設定其它項目呢？</p><p><img src="https://img.guiblogs.com/flex-align/align-items.jpg" alt="align-items"></p><p>如果 align-items 設定為 flex-start、center、flex-end 這幾個值，會分別對齊於交錯軸該行的起點、居中以及終點，這部分我想看到現在的各位已經能夠理解。至於 baseline，我們可以看見第一個 item-1 有設定了 padding-top 推擠 20px，因此 item-1 的文字呈現是從頂部向下 20px 開始，而 baseline 的效果就是對齊子層物件內容物的基線，也就是文字。</p><blockquote><h2 id="指定物件對齊：align-self"><a href="#指定物件對齊：align-self" class="headerlink" title="指定物件對齊：align-self"></a>指定物件對齊：align-self</h2></blockquote><p>這是一個不聽話的屬性（？），之所以不聽話是因為就算父層已經設定了 align-items 指定物件在該行的對齊方式，但我們可以使用 align-self 這個屬性指定其中一個物件的對齊方式。這個屬性有別於其它是設定在父層，這個屬性是要設定在指定要有特殊對齊方式的物件。我們以 .item-1 為範例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-class">.item-1</span> &#123;<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">align-self</span>: flex-start | center | flex-end | stretch;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以看到僅有 .item-1 物件分別依照設定值，呈現出起點對齊、居中對齊、終點對齊以及 stretch 的等高效果（會等同於該行最高物件）。</p><p><img src="https://img.guiblogs.com/flex-align/align-self.jpg" alt="align-self"></p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>為了打這一篇坦白講真了受益良多，之前都搞不太清楚 align-items 與 align-content 的差異，為了打這篇文章我找了網路上許多資訊（有一些是因為不知道該如何解釋，或是怕解釋錯誤而找 QQ），我會放在參考資料，看完這篇也可以透過以下鏈結來看這些資訊，相信會有更多收穫！</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://www.youtube.com/watch?v=_nCBQ6AIzDU">玩轉 CSS FLEX | CSS教學 | 網頁教學 | 網頁設計</a></li><li><a href="https://www.youtube.com/watch?v=lmBM7_OTDBQ">CSS3 Flex 完整教學</a></li><li><a href="https://wcc723.github.io/css/2017/07/21/css-flex/">圖解：CSS Flex 屬性一點也不難</a></li><li><a href="https://w3c.hexschool.com/flexbox/87d66dc4">align-items 屬性介紹</a></li><li><a href="https://w3c.hexschool.com/flexbox/c3847835">align-self 屬性介紹</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Flex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Logo 不只能用 img，來試試 background 圖片取代文字技巧！</title>
    <link href="/picture-replace-text/"/>
    <url>/picture-replace-text/</url>
    
    <content type="html"><![CDATA[<p>一般來說新手時期在設置 Logo 時都會使用 HTML 的 img 標籤將圖片展示出來，不過其實除了 img 之外，還能夠使用 background 背景圖片，並使用圖片取代文字的技巧來設置 Logo。</p><blockquote><h2 id="什麼是圖片取代文字？"><a href="#什麼是圖片取代文字？" class="headerlink" title="什麼是圖片取代文字？"></a>什麼是圖片取代文字？</h2></blockquote><p>圖片取代文字技巧，是一個區塊中，設置該區塊的背景圖片，在隱藏其文字只顯示背景的一種方式。其實文字都還在，只是我們透過一些方式讓文字不會顯示在網頁中。</p><a id="more"></a><p>使用此種方式其實是有助於 SEO 的，雖然文字在我們肉眼已經隱藏了，但是搜尋引擎仍然能夠利用爬蟲爬到 HTML 語法（只有 CSS 將它隱藏），所以人能夠只看到 Logo、但搜尋引擎能夠透過文字辨別該區塊是做什麼用的。</p><blockquote><h2 id="圖片取代文字技巧-CSS-語法"><a href="#圖片取代文字技巧-CSS-語法" class="headerlink" title="圖片取代文字技巧 CSS 語法"></a>圖片取代文字技巧 CSS 語法</h2></blockquote><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span>Web Logo<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.logo</span> &#123;<br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(./images/logo.png);<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">101%</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">white-space</span>: nowrap;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="範例說明"><a href="#範例說明" class="headerlink" title="範例說明"></a>範例說明</h3><ul><li><code>text-indent</code> 屬性為首行縮排，而設定為 101% 後，文字就會被移到區塊之外</li><li><code>overflow</code>  屬性部分，可參考「<a href="https://www.webtech.tw/info.php?tid=28">CSS overflow 屬性用法讓你掌握控制捲軸效果</a>」此篇文章<ul><li>將此屬性設定為 hidden，就可以讓超出範圍的部分被隱藏</li></ul></li><li><code>white-space:nowrap;</code> 能夠將文字強制不換行，因為如果文字換行的話，<code>text-indent</code> 的特性是只有首行縮排，第二行就會回到區塊內了 </li></ul><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>當然我相信這個技巧其實也不只適用在 Logo，所以大家可以依照情境，來去使用這項技巧。</p><p>這項技巧雖然好用，但就是經常忘記 XDD 所以特別寫成筆記，讓我未來可以直接進行複習，不過我覺得這一篇目前沒有寫到很好，最近比較忙，後續比較有空後再來好好優化一下此篇文章！</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flex 強大排版術：主軸對齊怎麼做？為何都擠在同一排？相應屬性一次解說！</title>
    <link href="/css-flex-2/"/>
    <url>/css-flex-2/</url>
    
    <content type="html"><![CDATA[<p>上一篇 Flex 筆記文章介紹了它的主軸與交錯軸觀念，今天要來介紹的是主軸的對齊，就像文字有所謂的靠左對齊、置中對齊、靠右對齊或是分散對齊，Flex 的排版方式也能夠達成這樣的效果。</p><a id="more"></a><blockquote><h2 id="設定主軸對齊的-CSS-屬性：justify-content"><a href="#設定主軸對齊的-CSS-屬性：justify-content" class="headerlink" title="設定主軸對齊的 CSS 屬性：justify-content"></a>設定主軸對齊的 CSS 屬性：<code>justify-content</code></h2></blockquote><p>設定 Flex 主軸對齊，就要利用 <code>justify-content</code> 這個 CSS 屬性，其共有以下設定值：</p><ul><li><code>justify-content: flex-start;</code> 靠主軸的起點對齊</li><li><code>justify-content: flex-end;</code> 靠主軸的終點對齊</li><li><code>justify-content: center;</code> 靠主軸的中間對齊</li><li><code>justify-content: space-between;</code> 區塊內的首、尾物件會貼其餘兩邊，其它平均分配</li><li><code>justify-content: space-around;</code>  首尾物件與兩邊會有一些空間，其它物件則平均分配於主軸，但首尾與兩邊的空間會比較小</li><li><code>justify-content: space-evenly;</code> 與上述基本相同，唯一差別在於首尾物件與兩邊的間隔空間與其它間隔空間一模一樣</li></ul><p>我想用文字述說應該不是很懂（而且我目前也想不太到有更好的說法 XD），那就來附圖示範吧！</p><h3 id="範例程式碼"><a href="#範例程式碼" class="headerlink" title="範例程式碼"></a>範例程式碼</h3><p>這邊我寫了個範例程式碼，背景色我設定成粉紅色、裡面使用 ul 新增三個 li 物件，並設定為橘色背景，方便大家觀察設定不同主軸對齊的狀況。</p><p><strong>CSS</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* CSS Reset 省略 */</span><br><br><span class="hljs-selector-class">.wrap</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">960px</span>;<br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br><span class="hljs-selector-class">.products</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: 【設定值：flex-start | flex-end | center | space-between | space-around | space-evenly】;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><span class="hljs-selector-class">.item</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;<br>    <span class="hljs-attribute">background-color</span>: orange;<br>&#125;<br><span class="hljs-selector-class">.item</span> <span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">max-width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>HTML</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;products&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://fakeimg.pl/250x250/aaa&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>標題一<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Laborum deleniti dolore dignissimos, enim ullam corrupti reprehenderit explicabo non molestiae suscipit.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://fakeimg.pl/250x250/aaa&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>標題二<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Laborum deleniti dolore dignissimos, enim ullam corrupti reprehenderit explicabo non molestiae suscipit.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://fakeimg.pl/250x250/aaa&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>標題三<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Laborum deleniti dolore dignissimos, enim ullam corrupti reprehenderit explicabo non molestiae suscipit.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="flex-start"><a href="#flex-start" class="headerlink" title="flex-start"></a>flex-start</h3><p>首先是最預設的 flex-start，就如同最一開始那樣對對齊於主軸起點，所以就算沒有特別設定也會是 flex-start。</p><p><img src="https://img.guiblogs.com/css-flex-2/flex-start.jpg" alt="flex-start"></p><h3 id="flex-end"><a href="#flex-end" class="headerlink" title="flex-end"></a>flex-end</h3><p>再來，就是 flex-end，會對齊於主軸的終點。</p><p>另外可注意的一點是，儘管在畫面上是靠右對齊，但是他的順序一樣是從左到右依序顯示標題一、標題二、標題三，因為我們的主軸是從左到右，只是我希望它的對齊是靠結尾對齊，所以在這樣的設定下達成了靠右對齊，但順序依然是從左到右。</p><p><img src="https://img.guiblogs.com/css-flex-2/flex-end.jpg" alt="flex-end"></p><h3 id="center"><a href="#center" class="headerlink" title="center"></a>center</h3><p>再來就是居中的效果，它在這邊達成了水平置中的效果，不過其實更精確地說，它是從主軸的起點到終點的平均做了對齊。</p><p><img src="https://img.guiblogs.com/css-flex-2/center.jpg" alt="center"></p><h3 id="space-between"><a href="#space-between" class="headerlink" title="space-between"></a>space-between</h3><p>這個設定值會將一系列物件的首尾對齊與兩邊，其餘物件則會均分對齊。</p><p><img src="https://img.guiblogs.com/css-flex-2/space-between.jpg" alt="space-between"></p><h3 id="space-around"><a href="#space-around" class="headerlink" title="space-around"></a>space-around</h3><p>此設定值也是會均分物件，但是兩旁會保留一些空間。</p><p><img src="https://img.guiblogs.com/css-flex-2/space-around.jpg" alt="space-around"></p><h3 id="space-evenly"><a href="#space-evenly" class="headerlink" title="space-evenly"></a>space-evenly</h3><p>此設定值與 <code>space-around</code> 一樣會保留兩邊空間，差別是此設定值所有分隔空間相等，與上一項設定值的兩旁保留空間較小有所差別。</p><p><img src="https://img.guiblogs.com/css-flex-2/space-evenly.jpg" alt="space-evenly"></p><blockquote><h2 id="flex-direction-與-justify-content-的關係"><a href="#flex-direction-與-justify-content-的關係" class="headerlink" title="flex-direction 與 justify-content 的關係"></a>flex-direction 與 justify-content 的關係</h2></blockquote><p>剛剛我們有示範了靠左、右以及置中對齊的效果，但我們就可以稱呼它就是所謂的「XX 對齊」嗎？其實這些設定都是附著在所謂的主軸上面的，所以假設今天透過 flex-direction 改變主軸流向，就會有不同的結果。</p><h3 id="範例一：主軸流向從右到左、並靠終點對齊"><a href="#範例一：主軸流向從右到左、並靠終點對齊" class="headerlink" title="範例一：主軸流向從右到左、並靠終點對齊"></a>範例一：主軸流向從右到左、並靠終點對齊</h3><p>此範例因為將主軸設定為從右到左，所以起點會變成右邊、終點為左邊，如果設定靠終點對齊，就會呈現靠左對齊效果。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-class">.products</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: row-reverse;<br>    <span class="hljs-attribute">justify-content</span>: flex-end;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/css-flex-2/row-reverse-flex-end.jpg" alt="主軸流向從右到左、並靠終點對齊"></p><h3 id="範例二：主軸流向從上到下、並設定-center"><a href="#範例二：主軸流向從上到下、並設定-center" class="headerlink" title="範例二：主軸流向從上到下、並設定 center"></a>範例二：主軸流向從上到下、並設定 center</h3><p>由於主軸設成從上到下，起點變成頂部、終點為底部，而 <code>justify-content</code> 對齊是針對主軸做對齊設置，因此主軸線變成垂直，所設定之 center 也會變成垂直對齊，所以針對 <code>justify-content</code> 所做的居中設置不一定也不會說它就是水平對齊喔！</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-class">.products</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: column;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">1200px</span>; <span class="hljs-comment">/* 特別設定成 1200px 以呈現出垂直置中效果 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/css-flex-2/column-center.jpg" alt="主軸流向從上到下、並設定 center"></p><blockquote><h2 id="為什麼物件都會擠在同一排？"><a href="#為什麼物件都會擠在同一排？" class="headerlink" title="為什麼物件都會擠在同一排？"></a>為什麼物件都會擠在同一排？</h2></blockquote><p>知道了 <code>justify-content</code> 各對齊方式後，使我們更容易進行排版，但是當物件一多後，就會發現通通都擠在一起了，而且我們可以從下方 CSS 發現，不管 .item 寬度設定成多大，但是所有物件卻都不會跑到外面。</p><p><img src="https://img.guiblogs.com/css-flex-2/nowrap.jpg" alt="nowrap 導致物件擠在同一排"></p><p>預設情況，如果物件寬度已經超過外容器，Flex 會將這些物件等比例縮放，所以不論是塞了多少個物件、針對物件設定多大的寬度，它仍舊會擠在同一排，因此我們要設定一項 CSS 屬性：<code>flex-wrap: wrap;</code>。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-class">.products</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><span class="hljs-selector-class">.item</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">250px</span>;<br>    <span class="hljs-attribute">background-color</span>: orange;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/css-flex-2/wrap.jpg" alt="wrap 使物件能夠自動排列到下一行"></p><p><code>flex-wrap</code> 這項屬性預設值原為 <code>nowrap</code>，若將屬性設定為 <code>wrap</code>，多出來的部分物件便可自動另起一行進行排列，如此以來所有物件就不會擠在同一行。</p><p>另外 flex-wrap 還有一項屬屬性設定值為 <code>flex-wrap: wrap-reverse;</code>，就如同 <code>flex-direction</code> 內的 <code>row-reverse</code> 與 <code>column-reverse</code> 那樣反轉原先順序，原先由上而下的排列會變成由下而上。不過也不常用到此設定就是了 XD</p><p><img src="https://img.guiblogs.com/css-flex-2/wrap-reverse.jpg" alt="wrap-reverse"></p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>Flex 技術使網頁排版更加方便且簡易，透過主軸的對齊設定與 flex-wrap 的搭配，已經能排出我們經常看到許多網站的版面。但其實 Flex 有更多可以挖掘的部分，像是先前所提及的交錯軸，將會於下一篇進行介紹。再請大家拭目以待！</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Flex</tag>
      
      <tag>flex-direction</tag>
      
      <tag>justify-content</tag>
      
      <tag>flex-wrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flex 強大排版術：flex-direction 如何應用？主軸、交錯軸附圖解說！</title>
    <link href="/css-flex/"/>
    <url>/css-flex/</url>
    
    <content type="html"><![CDATA[<p>網頁排版技術非常多，包含 <code>float</code>、<code>inline-block</code>、<code>Flex</code> 或是 <code>grid</code> 等等，其中 Flex 是現今滿常見的排版技術，使用這個技術，也能夠較為輕鬆地達到所謂的水平垂直置中，那要如何使用這項技術呢？這篇文章就來說明 Flex 其中一個屬性 <code>flex-direction</code>。</p><a id="more"></a><blockquote><h2 id="為何要使用-Flex？"><a href="#為何要使用-Flex？" class="headerlink" title="為何要使用 Flex？"></a>為何要使用 Flex？</h2></blockquote><p>我想大家應該都有網購的經驗吧？就算沒有，我相信你也瀏覽過購物商城相關網站，商城內的商品在網頁上排排呈現，一行就有四到五個商品、接著有好幾行、可能又有好幾頁。剛好最近想買 Plain-me 的水桶包，所以就逛了一下 Plain-me 網站，就拿來當範例吧！（對了，這不是業配，我還要花錢去買 XDD）</p><p><img src="https://img.guiblogs.com/css-flex/plain-me-web.jpg" alt="Plain-me 網站：4*2 商品成列方式"></p><p>可以看到這裡有一個 4*2 的商品陳列方式，假設我今天有四個商品，想以水平方式呈現在網站上，該怎麼做呢？我先來寫一段示範吧：</p><p><strong>HTML</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;subTitle&quot;</span>&gt;</span>商品列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;products&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://fakeimg.pl/250x250/#777&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;商品&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Lorem, ipsum.<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://fakeimg.pl/250x250/#777&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;商品&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Lorem, ipsum.<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://fakeimg.pl/250x250/#777&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;商品&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Lorem, ipsum.<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://fakeimg.pl/250x250/#777&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;商品&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Lorem, ipsum.<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>CSS</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-comment">/* CSS Reset 語法（省略） */</span><br><br><span class="hljs-selector-class">.wrap</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;<br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">8px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>這邊我們使用 .wrap 這個外容器包住裡面的副標題以及商品列表，並稍微設定了一下樣式，可以看到 Demo 為：</p><p><img src="https://img.guiblogs.com/css-flex/block.jpg" alt="li 預設為區塊元素"></p><p>這時候就會問號：咦？怎麼不會水平排列呢？</p><p>這部分可以參考我上次寫的文章「<a href="https://guiblogs.com/web-pattern/">網頁版型控制不能不知道的事！區塊與行內元素、盒模型與容器</a>」，有提到區塊元素的概念，因為 li 是一個區塊元素，所以會盡可能佔滿整個版面，因此儘管整個 li 並沒有這麼寬，仍然會排列至下一行。</p><h3 id="加入-Flex：讓區塊排列於主軸"><a href="#加入-Flex：讓區塊排列於主軸" class="headerlink" title="加入 Flex：讓區塊排列於主軸"></a>加入 Flex：讓區塊排列於主軸</h3><p>我們希望四個 li 能夠水平排列於一行，因此我們需要在 li 的父層加一段 CSS：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs CSS"><span class="hljs-selector-class">.products</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.products</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>; <span class="hljs-comment">/* 加這一段是讓每個商品（li）間推擠出空格 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/css-flex/flex.jpg" alt="設定為 flex 後，li 就能依照主軸進行排列"></p><p>原本由上而下排列的眾多區塊元素們，竟然水平排列了！之所以會達成這個效果，主要是因為在 li 的父層加入 <code>display: flex;</code> 語法後，讓子層能夠依照主軸進行排列，這時候諸位可能會問：什麼是主軸呢？其實除了主軸，Flex 還有一個交錯軸的概念，接下來我們來介紹這兩個又是怎麼運作的。</p><p>不過為何要使用 Flex 呢？其實其它技術當然也是可以用於排版，但使用 Flex 可以非常快速且方便的進行排版，如果是初學者學習，我會非常推薦以 Flex 作為練習排版的起手式。</p><blockquote><h2 id="Flex-主軸與交錯軸的概念"><a href="#Flex-主軸與交錯軸的概念" class="headerlink" title="Flex 主軸與交錯軸的概念"></a>Flex 主軸與交錯軸的概念</h2></blockquote><p>Flex 分為所謂的主軸以及交錯軸，那這兩個又是什麼東西呢？我們可以想像成：假設有一家 OK 便利商店（為什麼是 OK 呢？因為以下俯視圖是想像我家附近 OK 畫出來的 XD），收銀檯前有三道走道，就像是這樣：</p><p><img src="https://img.guiblogs.com/css-flex/flex-direction.jpg" alt="用便利商店看 Flex 資訊流向"></p><p>我們可以看到，我們買好商品後，無論如何目的就是要前往收銀檯結帳，<del>除非你想當小偷</del>，不然一般來講從俯視圖來看，<strong>「從左到右」就是我們的主要流程</strong>，但同時基本上商店也會規畫一條可用於排隊的走道，以這間便利商店為例，<strong>商店內有三條走道，而他們訂走道一為排隊區域</strong>。</p><h3 id="用這張圖來看網頁"><a href="#用這張圖來看網頁" class="headerlink" title="用這張圖來看網頁"></a>用這張圖來看網頁</h3><p>從上述邏輯也可以套用到我們的網頁上，一般來講我們看網頁的順序都是從左看到右，排版陳列方式也常是由左到右，而上述使用 Flex 的範例也能幫助我們將 li 由左到右排列，這就很像是主軸的概念，主軸就是代表我們的版面通常是從哪裡開始、到哪裡結束。而交錯軸的概念就像是超商圖內的走道一、走道二、走道三，可以決定這項資訊我希望他們水平排列，但要排在網頁上面位置、中間區域又或是接近底部。</p><blockquote><h2 id="透過-flex-direction-改變資訊流向"><a href="#透過-flex-direction-改變資訊流向" class="headerlink" title="透過 flex-direction 改變資訊流向"></a>透過 <code>flex-direction</code> 改變資訊流向</h2></blockquote><p>但有時候網頁的留下又不一定是由左而右，就像超商的走向也不一定像是我上述所說的那樣（這樣舉例好像不太對 XDD）沒關係我相信你懂我（<del>自以為咧</del>），於是透過 <code>flex-direction</code> 這項 CSS 屬性，可以做到改變 Flex 資訊流向，進而改變 Flex 主軸。</p><p>接下來我們一樣來示範一下設定 <code>flex-direction</code> 的效果，它的設定值分為以下四種：</p><ul><li><code>flex-direction: row;</code> 從左到右（預設）</li><li><code>flex-direction: row-reverse;</code> 從右到左</li><li><code>flex-direction: column;</code> 從上到下</li><li><code>flex-direction: column-reverse</code> 從右到左</li></ul><p>同樣的如果我們要對 li 進行作用，要將語法撰寫在父層的位置：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.products</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: row | row-reverse | column | colymn-reverse;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="從左到右-flex-direction-row"><a href="#從左到右-flex-direction-row" class="headerlink" title="從左到右 flex-direction: row;"></a>從左到右 <code>flex-direction: row;</code></h3><p>首先我們來示範一下 <code>flex-direction: row;</code> 從左到右，並且為商品設定商品名稱來 Demo 給大家看，可以看到跟原本並無差別，因為資訊流預設就是從左到右，所以一般也不會特別去設定。</p><p><img src="https://img.guiblogs.com/css-flex/row.jpg" alt="從左到右 flex-direction: row;"></p><h3 id="從右到左-flex-direction-row-reverse"><a href="#從右到左-flex-direction-row-reverse" class="headerlink" title="從右到左 flex-direction: row-reverse;"></a>從右到左 <code>flex-direction: row-reverse;</code></h3><p>再來我們看從右到左的 <code>row-reverse</code>，設定後我們可以看到商品這行除了變成靠右對齊，重點是商品一到商品四也是從右到左，因為我們讓資訊流設定從右邊到左邊。</p><p>不過更精確的說法應該是：現在主軸的開始我們設定為右邊，因為是從主軸的開始來去排列，所以就會靠右對齊。（難道也可以對齊主軸的結尾嗎？其實也可以，不過就留待下一次再說，挖個坑 XD）</p><p><img src="https://img.guiblogs.com/css-flex/row-reverse.jpg" alt="從右到左 flex-direction: row-reverse;"></p><h3 id="從上到下-flex-direction-column"><a href="#從上到下-flex-direction-column" class="headerlink" title="從上到下 flex-direction: column;"></a>從上到下 <code>flex-direction: column;</code></h3><p>資訊流或是主軸就只能是水平走向嗎？當然不是，我們可以使用 column、column-reverse 等設定值，將主軸設定成垂直走向，同時原本的水平走向就會變成交錯軸。</p><p>將設定值設為 <code>column</code>，就能夠讓主軸由上而下排列：</p><p><img src="https://img.guiblogs.com/css-flex/column.jpg" alt="從上到下 flex-direction: column;"></p><h3 id="從下到上-flex-direction-column-reverse"><a href="#從下到上-flex-direction-column-reverse" class="headerlink" title="從下到上 flex-direction: column-reverse;"></a>從下到上 <code>flex-direction: column-reverse;</code></h3><p>相反的，<code>flex-direction: column-reverse;</code> 則會是由下而上排列：</p><p><img src="https://img.guiblogs.com/css-flex/column-reverse.jpg" alt="從下到上 flex-direction: column-reverse;"></p><p>對了，你可能會覺得它怎麼沒有靠下對齊，主要是因為父層區塊的高度是由內層內容或是區塊撐起，所以四個 li 高度加總加上 h2 標題就等於父層高度了。上述從右到左有靠右對齊是因為本身就佔滿整個版面的，所以自然而然會靠右對齊。</p><p>不過就還是補一下圖吧！我將高度設定為 300px 並加上背景色，就可以看到它是靠下對齊。（靠主軸開始對齊）</p><p><img src="https://img.guiblogs.com/css-flex/align-bottom.jpg" alt="靠主軸開始對齊（此範例為靠下）"></p><blockquote><h2 id="Flex-沒有繼承性"><a href="#Flex-沒有繼承性" class="headerlink" title="Flex 沒有繼承性"></a>Flex 沒有繼承性</h2></blockquote><p>我們可以看到，雖然我們針對 .products 設定 Flex，但是 li 內的商品圖跟商品名也是由上而下排列。如果我希望商品圖在左、商品名在右，就必須要使用 Flex 包 Flex 的方式，來去做到此效果。</p><p>我們就用上一個使用 <code>column-reverse</code> 的範例，來修改並示範吧！</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.products</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: column-reverse;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">1500px</span>;<br>&#125;<br><span class="hljs-selector-class">.products</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/css-flex/flex-package-flex.jpg" alt="Flex 包 Flex"></p><p>可以看到這樣就達成 Flex 包 Flex 效果了！ （雖然主軸本來就不太會使用 <code>column-reverse</code> 就是了 XD）</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>Flex</tag>
      
      <tag>flex-direction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什麼是 background？跟 img 的差別？image、repeat、color 以及 position 等屬性又該如何設定？</title>
    <link href="/css-background/"/>
    <url>/css-background/</url>
    
    <content type="html"><![CDATA[<p>CSS 除了透過 img 顯示圖片外，還有 background 可以用於顯示背景圖片，當然它並不只有背景圖片的技巧，如果要設定背景顏色也是可以的，今天就來介紹一下 background 相關應用。</p><a id="more"></a><blockquote><h2 id="何時用-img-或是-background？他們又有什麼差別？"><a href="#何時用-img-或是-background？他們又有什麼差別？" class="headerlink" title="何時用 img 或是 background？他們又有什麼差別？"></a>何時用 img 或是 background？他們又有什麼差別？</h2></blockquote><p>img 這個標籤主要就是用來表示影像，就像 video 用來表示影片那樣（雖然我知道這樣舉例很爛，等我想一下怎麼說會更好再更新 XD）；而 background 則是設定區塊像是 div 除了文字外，也能夠設定其區塊背景圖片以及顏色。</p><p>一般來講，如果你的圖片會跟後端結合，由資料庫回傳要顯示圖片的 URL，一般來講就會使用 img 標籤來顯示圖片，因為能夠透過後端語言或是 JavaScript 控制 HTML，將資料庫資料一筆一筆傳入網頁，但不太能直接控制 CSS 檔案；相反的如果像是背景圖、或是一些比較少換的影像，可能擺在那邊兩三年都不會換，即可直接在 CSS 使用 background。</p><p>但有沒有可能我也要動態更換 background 圖片？當然有可能，這篇文章也會提到其解決方法。</p><blockquote><h2 id="載入背景圖片-background-image"><a href="#載入背景圖片-background-image" class="headerlink" title="載入背景圖片 background-image"></a>載入背景圖片 background-image</h2></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(背景圖片網址);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>background-image</code> 可用於設定背景圖片網址，可是絕對路徑或是相對路徑。另外也可以針對 box 設定寬度與寬度，限縮 .box 範圍後，也就會影響背景圖片在整體網頁占比。</p><h3 id="如果想動態更換-background-image-怎麼辦？"><a href="#如果想動態更換-background-image-怎麼辦？" class="headerlink" title="如果想動態更換 background-image 怎麼辦？"></a>如果想動態更換 background-image 怎麼辦？</h3><p>由於後端語言不太能直接控制 CSS 檔案（我不知道是不是真的不能，但以我目前所學到的是不能 XD）所以就會透過後端語言或是 JavaScript 控制 HTML 的 Element 來撰寫：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-image: url(這裡撰寫放置 URL 的變數)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>雖然因為權重關係我們盡量不會去使用 Element 設定 CSS，但是如果要透過 HTML 動態設定 CSS，一般來講就會透過 Element 來去設定 CSS，像是進度條的進度百分比也可以透過這樣的方式設定。</p><blockquote><h2 id="控制圖片重複顯示：background-repeat"><a href="#控制圖片重複顯示：background-repeat" class="headerlink" title="控制圖片重複顯示：background-repeat"></a>控制圖片重複顯示：background-repeat</h2></blockquote><p>若容器過大、而背景圖片尺寸卻小於容器，自動來說圖片會自動填滿容器其它區域，因此利用 <code>background-repeat</code> 屬性，可以控制圖片是否要重複。設定共有：</p><ul><li>repeat 重複顯示圖片並且填滿容器空的所有部分</li><li>repeat-x 重複顯示圖片，但只填滿圖片的 x 軸</li><li>repeat-y 重複顯示圖片，但只填滿圖片的 y 軸</li><li>no-repeat 就是不重覆、不填滿啦！只顯示單張圖片</li></ul><blockquote><h2 id="背景顏色：background-color"><a href="#背景顏色：background-color" class="headerlink" title="背景顏色：background-color"></a>背景顏色：background-color</h2></blockquote><p><code>background-color</code> 這個就是寫入背景顏色的，當設定時，就會讓該容器內填滿所設定的顏色。</p><p>另外，背景顏色與背景圖片是能夠同時設定的，因此若有設定不重複的背景圖片，在沒被填滿之處，就會顯示其區塊設定之背景顏色。</p><blockquote><h2 id="背景圖片位置：background-position"><a href="#背景圖片位置：background-position" class="headerlink" title="背景圖片位置：background-position"></a>背景圖片位置：background-position</h2></blockquote><p><code>background-position</code> 這個屬性可為不重複的背景圖片設定其位置。</p><p>其設定如下種有下列幾種：</p><h3 id="使用位置關鍵字"><a href="#使用位置關鍵字" class="headerlink" title="使用位置關鍵字"></a>使用位置關鍵字</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: right bottom;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>第一個參數代表的是水平、第二個參數代表上下；可指定圖片要對齊於哪裡。</p><h3 id="使用數值"><a href="#使用數值" class="headerlink" title="使用數值"></a>使用數值</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">100px</span> <span class="hljs-number">90px</span>;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">10%</span> <span class="hljs-number">20%</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>也可以使用數 px、百分比等單位，來達到指定圖片位置效果。</p><blockquote><h2 id="background-讓圖片設定在同一個屬性"><a href="#background-讓圖片設定在同一個屬性" class="headerlink" title="background 讓圖片設定在同一個屬性"></a>background 讓圖片設定在同一個屬性</h2></blockquote><p>使用 <code>background</code> 屬性可以讓圖片設定值通通設定於此，如下範例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 原先學習之分開寫法 */</span><br><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(圖片網址);<br>    <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>    <span class="hljs-attribute">background-color</span>: orange;<br>    <span class="hljs-attribute">background-position</span>: <span class="hljs-number">10%</span> <span class="hljs-number">20%</span>;<br>&#125;<br><br><span class="hljs-comment">/* 使用 background 屬性*/</span><br><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(圖片網址) no-repeat orange <span class="hljs-number">10%</span> <span class="hljs-number">20%</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>從以上使用 background 屬性範例，即可知能夠將所有設定縮寫至此屬性；至於裡面的設定參數，也能夠自由移動。</p><p>但必須注意的是，如果其中一項不小心設定錯誤，就會造成整個屬性所有設定都會失效喔！所以若要使用縮寫就必須很小心，不然比較保險的寫法就是分開撰寫。</p><blockquote><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2></blockquote><p>其實 background 背景圖片有非常多可以應用的部分，先來挖個坑：下次還會再撰寫更多的應用，比如圖片取代文字。畢竟最近在學習網頁切版，要多做筆記、強化記憶！</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>background</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 PHP 解 Leetcode：1431. Kids With the Greatest Number of Candies 擁有最多糖果的孩子</title>
    <link href="/leetcode1431-php/"/>
    <url>/leetcode1431-php/</url>
    
    <content type="html"><![CDATA[<blockquote><h2 id="題目資訊"><a href="#題目資訊" class="headerlink" title="題目資訊"></a>題目資訊</h2><p>題目網址：<a href="https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/">1431. Kids With the Greatest Number of Candies</a><br>難易度：Easy 簡單<br>通過率：88.1%（截至發文時間）</p></blockquote><a id="more"></a><p>這題表示有數量不一定的小朋友，並由陣列 <code>candies</code> 定義；其中有個整數變數為 <code>extraCandies</code>，表示若小朋友的糖果加上變數的數字後（即多得到這個數量的糖果），是否能夠成為擁有最多的糖果或是跟原本最多糖果的小朋友並列第一。</p><p>而所謂第一名的基準，看下來是依照原本未加上多的糖果的最多數量。以 <strong>Example 1</strong> 為例，原本最多糖果的小朋友擁有 5 顆，雖然在增加 3 顆就擁有 8 顆糖果，但是所謂「最多」的基準還是 5 顆；像是第一位小朋友原本的 2 顆糖果再加上 3 顆也不過 5 顆糖果，但是因為已經與基準並列第一，也因此就過關。</p><p>以下解法一是我第一次提交時的程式碼，但發現整體成績並不理想，於是開始以解法一為基底進行優化，後來就寫出了解法二。</p><blockquote><h2 id="解法一：使用-if"><a href="#解法一：使用-if" class="headerlink" title="解法一：使用 if"></a>解法一：使用 if</h2></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer[] $candies</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $extraCandies</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Boolean[]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">kidsWithCandies</span>(<span class="hljs-params"><span class="hljs-variable">$candies</span>, <span class="hljs-variable">$extraCandies</span></span>) </span>&#123;<br>        <span class="hljs-comment">// 取最大值</span><br>        <span class="hljs-variable">$max</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;count(<span class="hljs-variable">$candies</span>); <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$candies</span>[<span class="hljs-variable">$i</span>] &gt; <span class="hljs-variable">$max</span>) &#123;<br>                <span class="hljs-variable">$max</span> = <span class="hljs-variable">$candies</span>[<span class="hljs-variable">$i</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 比較</span><br>        <span class="hljs-variable">$ans</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;count(<span class="hljs-variable">$candies</span>); <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$candies</span>[<span class="hljs-variable">$i</span>] + <span class="hljs-variable">$extraCandies</span>) &gt;= <span class="hljs-variable">$max</span>) &#123;<br>                <span class="hljs-variable">$ans</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$ans</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125; <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ans</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="程式過程"><a href="#程式過程" class="headerlink" title="程式過程"></a>程式過程</h3><ol><li>宣告一個 <code>$max</code> 變數並設定初始值為 <code>0</code>，用於放置最大數值。（最多糖果）</li><li>透過迴圈尋找陣列中最大數值，並放置於變數 <code>$max</code>。</li><li>宣告一個陣列 <code>$ans</code>，用於放置要回傳答案之陣列。</li><li>透過迴圈去跑每一位小朋友，原本所擁有糖果數加上被多給數量後，是否有超過原本擁有最多的小朋友；若有則讓給該陣列位置 <code>true</code>，反之則為 <code>false</code>。</li></ol><h3 id="這樣有什麼問題？"><a href="#這樣有什麼問題？" class="headerlink" title="這樣有什麼問題？"></a>這樣有什麼問題？</h3><p>最後成果出來了，我沒有截圖到但我印象中只贏過 14.8 % 的人 XDD</p><p>後來我就開始思考，該如何優化我的程式碼？</p><ul><li>我知道還有一個 max 函數可以比較指定數字中取最大者，或許可使用看看？</li><li>想起上週看了工程師 YouTuber Nic 大神的 <a href="https://youtu.be/cfeKek8p9us">提升軟體開發品質! 寫程式的 6 招實用技巧</a> 這部影片，其中第三項的「簡化條件表達式」，剛好可以現學現賣 XD 就來嘗試看看簡化條件表達式～</li></ul><blockquote><h2 id="解法二：捨棄-if，並使用-max-函數"><a href="#解法二：捨棄-if，並使用-max-函數" class="headerlink" title="解法二：捨棄 if，並使用 max 函數"></a>解法二：捨棄 if，並使用 max 函數</h2></blockquote><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer[] $candies</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> Integer $extraCandies</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Boolean[]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">kidsWithCandies</span>(<span class="hljs-params"><span class="hljs-variable">$candies</span>, <span class="hljs-variable">$extraCandies</span></span>) </span>&#123;<br>        <span class="hljs-comment">// 取最大值</span><br>        <span class="hljs-variable">$max</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;count(<span class="hljs-variable">$candies</span>); <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$max</span> = max(<span class="hljs-variable">$max</span>, <span class="hljs-variable">$candies</span>[<span class="hljs-variable">$i</span>]);<br>        &#125;<br>        <span class="hljs-comment">// 進行比較</span><br>        <span class="hljs-variable">$ans</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;count(<span class="hljs-variable">$candies</span>); <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$ans</span>[<span class="hljs-variable">$i</span>] = (<span class="hljs-variable">$candies</span>[<span class="hljs-variable">$i</span>] + <span class="hljs-variable">$extraCandies</span>) &gt;= <span class="hljs-variable">$max</span>;<br>        &#125; <br>        <span class="hljs-comment">// 輸出答案</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ans</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="我優化了哪些部分？"><a href="#我優化了哪些部分？" class="headerlink" title="我優化了哪些部分？"></a>我優化了哪些部分？</h3><ul><li>取最大值的迴圈，我使用 max 函數取代了原本的 if，比起原本使用 if 先判斷再給值的方法，少了一個步驟。</li><li>我將判斷增加糖果後是否有超過原本最多糖果數量的 if 拿掉了，我直接將原本的判斷式放置在該陣列位置，因為原本判斷式就會回傳 true 或是 false 了，不需要特地做一個 if，在那邊 true 的話給 true，false 就給 false XD</li></ul><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p>優化此程式碼後，贏過了 82.95% 的人，與原本只贏過 14.8% 的人有極大差距 XD</p><p><img src="https://img.guiblogs.com/leetcode1431-php/success.jpg" alt="提交成功：贏過 82.95% 的人"></p><p>從比較圖來看，優化前的第一次需花費 20ms，第二次提交我優化了判斷式的部分就大幅提升至 8ms，雖然第三次提交優化 max 那個部分 Memory 來多了第二次提交一些些，但我想能少一個步驟還是比較好的！</p><p><img src="https://img.guiblogs.com/leetcode1431-php/time-submitted.jpg" alt="Time Submitted"></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Leetcode</tag>
      
      <tag>php</tag>
      
      <tag>擁有最多糖果的孩子</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>網頁版型控制不能不知道的事！區塊與行內元素、盒模型與容器</title>
    <link href="/web-pattern/"/>
    <url>/web-pattern/</url>
    
    <content type="html"><![CDATA[<p>繼上一篇 <a href="https://guiblogs.com/css-reset/">網頁樣式跟想像中不一樣，你 CSS Reset 了嗎？</a> 說明了 CSS Reset 造成網頁排版不如預期的因素，其實還有許多因素都會影響網頁上的排版，今天就來了解這些因素，來掌握版型控制技巧！</p><a id="more"></a><blockquote><h2 id="區塊元素與行內元素"><a href="#區塊元素與行內元素" class="headerlink" title="區塊元素與行內元素"></a>區塊元素與行內元素</h2></blockquote><ul><li>區塊元素（<code>display: block;</code>）<ul><li>寬度會盡量佔滿整個版面，並依照父元素寬度自適應延伸佔滿</li><li>會另起一行來進行呈現</li><li>Ex. div、h1、ul、li、p</li></ul></li><li>行內元素（<code>display: inline;</code>）<ul><li>文字多寬元素就多寬</li><li>Ex. a、span</li></ul></li></ul><h3 id="如何分辨是區塊元素還是行內元素"><a href="#如何分辨是區塊元素還是行內元素" class="headerlink" title="如何分辨是區塊元素還是行內元素"></a>如何分辨是區塊元素還是行內元素</h3><ul><li><p>利用 Chrome 開發者工具選取該標籤，看是否盡量佔滿整個版面</p><ul><li><p>盡量佔滿了整個版面：區塊元素</p><p><img src="https://img.guiblogs.com/web-pattern/block.jpg" alt="區塊元素會盡量佔滿整個版面"></p></li><li><p>並沒有佔滿整個版面：行內元素</p><p><img src="https://img.guiblogs.com/web-pattern/inline.jpg" alt="行內元素並沒有盡可能佔滿整個版面"></p></li></ul></li><li><p>使用背景色並設定 width 且寬度設定有作用，儘管背景色沒有佔滿整個版面，但是仍然會另起一行</p><p><img src="https://img.guiblogs.com/web-pattern/block-background.jpg" alt="區塊元素會另起一行"></p></li><li><p>使用背景色，若往右滿版即是區塊元素，剛好等於文字寬度則為行內元素，在這個狀況設定 width 也沒效</p><p><img src="https://img.guiblogs.com/web-pattern/background.jpg" alt="利用背景顏色觀察是區塊元素還是行內元素"></p></li></ul><blockquote><h2 id="box-model-盒模型"><a href="#box-model-盒模型" class="headerlink" title="box-model 盒模型"></a>box-model 盒模型</h2></blockquote><h3 id="padding-與-margin-推擠"><a href="#padding-與-margin-推擠" class="headerlink" title="padding 與 margin 推擠"></a>padding 與 margin 推擠</h3><ul><li>padding 內距，指區塊距離裡面內容的距離<ul><li>會影響區塊的寬高</li></ul></li><li>margin 外距，指區塊距離前後區塊或是標籤的距離<ul><li>計算區塊寬高時不會包含 margin</li><li>但是該區塊增加 margin 後會影響在畫面中的占比</li></ul></li></ul><p><img src="https://img.guiblogs.com/web-pattern/size.jpg" alt="margin 不會被算在 size，但確實會影響在畫面中佔比"></p><h3 id="margin-bottom-推擠"><a href="#margin-bottom-推擠" class="headerlink" title="margin-bottom 推擠"></a>margin-bottom 推擠</h3><p>這邊稍微說明一下 margin-bottom 推擠，以下面範例為例：</p><ul><li><p>這個 .box，裡面我放置了 p 段落以及 a 標籤鏈結，我在 p 段落設定了一個 <code>margin-bottom: 8px;</code>，因此 p 段落與 Link 中間隔了 8px，整體 .box 高度為 80px。</p><p><img src="https://img.guiblogs.com/web-pattern/p-mb1.jpg" alt="在 .box 內的 p 段落增加底部外距，高度因此增加 8px"></p></li><li><p>接下來我將原本放置在 p 斷落的 <code>margin-bottom: 8px;</code> 移到 a 標籤，卻發現：.box 整體高度只有 72px，少了那 8px！</p><p><img src="https://img.guiblogs.com/web-pattern/a-mb1.jpg" alt="因為是在 .box 最後一個 a 標籤增加底部外距，所以高度不會因此增加 8px"></p></li></ul><h4 id="原因為何？"><a href="#原因為何？" class="headerlink" title="原因為何？"></a>原因為何？</h4><p>當 .box 本身與該區塊最後的標籤若都有設定 margin-bottom，將會以這兩個值較大的值，來當作 .box 向下推擠的值。</p><p>也因此，.box 內最後一個標籤 p 段落，就自然也會被視為是 .box 本身區塊向下推擠多少的候選之一；因為 margin 本身不會算在區塊本身寬高數值裡，所以照上述範例，.box 整體高度就不會再加上那 8px 了！</p><p>關於詳細的 padding 與 margin 介紹，我之後會再發一篇文章來詳述（學 YouTuber 來挖坑了 XD）</p><h3 id="box-sizing-border-box"><a href="#box-sizing-border-box" class="headerlink" title="box-sizing: border-box;"></a>box-sizing: border-box;</h3><p>預設來說，若元素增加 padding 以及 border，都會影響元素的寬高。以下方範例為例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">width</span>: 50<span class="hljs-selector-tag">px</span>;<br><span class="hljs-selector-tag">height</span>: 50<span class="hljs-selector-tag">px</span>;<br><span class="hljs-selector-tag">padding-top</span><span class="hljs-selector-pseudo">:10px</span>;<br><span class="hljs-selector-tag">border</span>: 2<span class="hljs-selector-tag">px</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-tag">black</span>;<br></code></pre></div></td></tr></table></figure><ul><li>寬度為：50px + 2px * 2 = 54px<ul><li>width + 左右兩邊 border</li></ul></li><li>高度為：50px + 10px + 2px * 2 = 64px<ul><li>width + padding-top + 上下兩邊 border</li></ul></li></ul><p>但若增加了 <code>box-sizing: border-box;</code>，區塊的寬高將會等於 width 以及 height 設置值；至於 padding 以及 border 所占面積則會往內推擠，壓縮區塊內容區域。</p><p><strong>所以依照上述說明，範例寬高都將會是 50px。</strong></p><blockquote><h2 id="行距-line-height"><a href="#行距-line-height" class="headerlink" title="行距 line-height"></a>行距 line-height</h2></blockquote><p>行距是指一行文字上下距離，舉例 Word 行高來講，就有分固定行高、1.5 倍行高等等，而網頁就是透過 <code>line-height</code> 來控制行距。</p><p><strong>以下提供幾個範例：（文字大小皆為16px）</strong></p><ul><li>1 行文字、行距 16px：高度為 16px</li><li>1 行文字、行距 24px：高度為 24px</li><li>2 行文字、行距 24px：高度為 48px</li><li>2 行文字、行距 0 px：高度為 0px（你沒看錯！因為文字會通通擠在一起 XD）</li></ul><p>從以上範例就可以知道，影響一行高度的並不是字體大小，而是行距。</p><blockquote><h2 id="暗藏玄機的圖片底部-多出的-2px-3px"><a href="#暗藏玄機的圖片底部-多出的-2px-3px" class="headerlink" title="暗藏玄機的圖片底部 - 多出的 2px ~ 3px"></a>暗藏玄機的圖片底部 - 多出的 2px ~ 3px</h2></blockquote><p>網頁排版時會發現 <code>&lt;img&gt;</code> 圖片底部會多出 2px ~ 3px 的空隙，如果要解決此問題，可以透過以下 CSS 語法的兩段語法二選一使用，兩種語法都可以解決這個問題。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 以下兩種方法選一種即可 */</span><br><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-attribute">display</span>: block; <span class="hljs-comment">/* 方法一 */</span><br>  <span class="hljs-attribute">vertical-align</span>: middle; <span class="hljs-comment">/* 方法二 */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><h2 id="高度-height-該設定？不設定？"><a href="#高度-height-該設定？不設定？" class="headerlink" title="高度 height 該設定？不設定？"></a>高度 height 該設定？不設定？</h2></blockquote><p>一般來講，我們不會去特別針對區塊高度去做設定，因為內容的文字行數不一定，若今天高度僅設置 50px，但卻有 10 行行距 16px 的文字，塞不下的文字就會超出區塊範圍，很容易造成跑版。</p><p>所以一般來講，區塊的高度會用以下方式推擠並產生影響，而不會設定高度：</p><ul><li>padding 內距</li><li>border 框線</li><li>line-height 行距</li></ul><h3 id="什麼時候可以設定高度？"><a href="#什麼時候可以設定高度？" class="headerlink" title="什麼時候可以設定高度？"></a>什麼時候可以設定高度？</h3><ul><li>針對圖片時可以設定其高度。</li></ul><blockquote><h2 id="容器與滿版式設計"><a href="#容器與滿版式設計" class="headerlink" title="容器與滿版式設計"></a>容器與滿版式設計</h2></blockquote><ul><li>網站上每一個區塊，都是由一個容器所包圍</li><li><code>.container</code>、<code>.wrapper</code> 皆可是容器縮寫</li></ul><h3 id="滿版式設計"><a href="#滿版式設計" class="headerlink" title="滿版式設計"></a>滿版式設計</h3><p>以 <a href="https://shopee.tw/">蝦皮購物</a> 為例，若想達到像他們整體區塊置中、header 有滿版背景色但也同時保有區塊置中的效果，可參考以下寫法：（不代表蝦皮購物也是這麼寫的）</p><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        內容<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    內容<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.header</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: orange;<br>    <span class="hljs-attribute">color</span>: white;<br>&#125;<br><br><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="解釋與注意事項"><a href="#解釋與注意事項" class="headerlink" title="解釋與注意事項"></a>解釋與注意事項</h3><ul><li>header 區域是透過 header 的滿版與及其設定的背景色，內放置 container 達成內容區塊置中效果</li><li>若是 container 區塊包在 header 外或是放在同一 div，header 設定將會受制於 container 大小<ul><li>Ex. header 最大僅 1200px，無法達成滿版效果</li></ul></li><li>若要設計滿版效果，不要設計成 <code>width:1920px;</code>，若設計稿上這樣寫，是在示意滿版<ul><li>如果螢幕寬度大於 1920px，就不會是滿版囉 XD</li></ul></li></ul><blockquote><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2></blockquote><p>網頁排版是項博大精深的學問，且參雜許多的規則與感到莫名其妙的狀況（？而且同一個版型，每一次切版卻也都有不同的狀況。</p><p>篇幅關係所以大概敘述一下，有機會在好好詳細研究一下！</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>網頁排版</tag>
      
      <tag>區塊元素</tag>
      
      <tag>行內元素</tag>
      
      <tag>盒模型</tag>
      
      <tag>box-modelㄋ</tag>
      
      <tag>padding</tag>
      
      <tag>margin</tag>
      
      <tag>行距</tag>
      
      <tag>容器</tag>
      
      <tag>滿版式設計</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>網頁樣式跟想像中不一樣，你 CSS Reset 了嗎？</title>
    <link href="/css-reset/"/>
    <url>/css-reset/</url>
    
    <content type="html"><![CDATA[<p>當透過 CSS 切完網頁版面後，發現網頁跟自己想像或是設計稿上顯示的有落差，是發生了什麼事情？</p><blockquote><h2 id="CSS-Reset-出現與存在意義"><a href="#CSS-Reset-出現與存在意義" class="headerlink" title="CSS Reset 出現與存在意義"></a>CSS Reset 出現與存在意義</h2></blockquote><p>之所以會有 CSS Reset 出現，是因為早期瀏覽器在渲染 HTML 的 CSS 樣式標準不一，導致同一段語法在不同家瀏覽器所渲染出的結果不一樣，為了統一各家瀏覽器的預設渲染樣式，因此出了 CSS Reset 讓預設網頁樣式在各家瀏覽器是一樣的狀態。</p><a id="more"></a><h3 id="網頁跟想像中的不一樣：先確認-CSS-Reset-了沒"><a href="#網頁跟想像中的不一樣：先確認-CSS-Reset-了沒" class="headerlink" title="網頁跟想像中的不一樣：先確認 CSS Reset 了沒"></a>網頁跟想像中的不一樣：先確認 CSS Reset 了沒</h3><p>所以回到上述問題，以 chrome 瀏覽器為例，預設 body 的 margin 就設定 8px 了，所以如果沒有事先清除瀏覽器已經設定好的元素樣式，就會造成網頁排版跟想像中有落差。</p><blockquote><h2 id="我該如何使用-CSS-Reset"><a href="#我該如何使用-CSS-Reset" class="headerlink" title="我該如何使用 CSS Reset"></a>我該如何使用 CSS Reset</h2></blockquote><p>這裡介紹目前最知名的兩個 CSS Reset 及其差異：</p><ul><li><a href="https://meyerweb.com/eric/tools/css/reset/">meyerweb</a><ul><li>將所有瀏覽器預設樣式清除一乾二淨</li><li>高度客製化可使用</li></ul></li><li><a href="https://necolas.github.io/normalize.css/">Normalize</a><ul><li>會保留一些網頁樣式，不會全部清除</li><li>Bootstrap 目前使用此 CSS Reset</li></ul></li></ul><p>以上 CSS Reset 都可以進去直接複製並貼到自己的樣式表。當然如果你夠熟，也可以自己設計一個 CSS Reset！</p><h3 id="建立-CSS-Reset-環境"><a href="#建立-CSS-Reset-環境" class="headerlink" title="建立 CSS Reset 環境"></a>建立 CSS Reset 環境</h3><p>進入 meyerweb 後，自然就會看到 CSS Reset 整串語法；至於 Normalize 則是在點擊 Download 按鈕後會進入它的 CSS 檔。</p><ul><li>直接將整串複製下來，放到 CSS 檔案開頭</li><li>下載回來後獨立一支檔案，網頁由上到下讀取時，要先讀取 CSS Reset</li></ul><p>從上述不論是哪一種方法，CSS Reset 必須先放在所有自行設定之 CSS 檔案前面，預設網頁檔案才會是清空的，否則可能會使效果不如預期，甚至是 CSS Reset 覆蓋了自行設定的樣式。</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>CSS Reset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>想要提升寫 code 效率，一定要認識的寫網頁好幫手 - Emmet</title>
    <link href="/emmet/"/>
    <url>/emmet/</url>
    
    <content type="html"><![CDATA[<p>Emmet 是個支援多個編輯器的擴充程式，幫助我們在寫程式時，只要記相對應的縮寫，就能完整將關鍵字打出來。</p><h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><ul><li>提升開發速度</li><li>減少打錯字造成後續 debug 的時間</li></ul><a id="more"></a><p>目前預設 VS code 已經內置了 Emmet，要研究如何使用可以參考 <a href="https://docs.emmet.io/cheat-sheet/">Emmet Documentation</a> 網站，內有詳細各種語法的 Emmet 縮寫，可以當字典使用。</p><p>這裡也有其他大神撰寫的 <a href="https://pjchender.blogspot.com/2016/07/emmet.html">教學懶人包</a> 可以參考。</p><h2 id="還是來寫點範例吧"><a href="#還是來寫點範例吧" class="headerlink" title="還是來寫點範例吧"></a>還是來寫點範例吧</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><ul><li>! + tab 產生 HTML 環境</li><li>.container&gt;(ul*3&gt;li{文字})+(ul&gt;li{$}*3)<ul><li><code>.container</code> 建立一個類別為 container 的 div</li><li><code>&gt;</code> 下一層</li><li><code>()+()</code> 兩個括號加再一起為同一層</li><li><code>ul*3&gt;li&#123;內容&#125;</code> 建立三個 ul，內層各一個 li，<code>&#123;&#125;</code> 代表在每一個 li 裡的內容</li><li><code>ul&gt;li&#123;$&#125;*3</code> 建立一個 ul，內有三個 li，<code>&#123;$&#125;</code> 代表每個 li 裡的內容，錢字號可生成編號數字</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>文字<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>文字<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>文字<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ul><li>w200 —&gt; <code>width: 200px;</code></li><li>w75p —&gt; <code>width: 75%</code>，p 代表 %</li><li>d:f —&gt; <code>display: flex;</code></li><li>jcsb —&gt; <code>justify-content: space-between;</code></li><li>aic —&gt; <code>align-items: center;</code></li></ul><h2 id="Lorem-假文"><a href="#Lorem-假文" class="headerlink" title="Lorem 假文"></a>Lorem 假文</h2><p>快速排版時，可透過 Lorem 來快速產生文字。</p><ul><li><code>lorem</code> 產生出 1 句假文</li><li><code>lorem1</code> 產生出 1 個單字</li><li><code>lorem20</code> 產生出 20 個單字</li><li><code>lorem*5</code> 產生出 5 句假文</li><li><code>ul&gt;li*3&gt;lorem6</code> 產生出 1 個 ul、3 個內含 6 個單字的 li<ul><li>使用 <code>ul&gt;li&#123;lorem6&#125;*3</code>，印出的會是 lorem6 而不是 6 個假字，這點可注意</li></ul></li></ul><p>要注意 lorem 直接加數字，就會產生出相對應數字的單字數，如果是 <code>*</code>，則是產生句子，<del>我之前就是一直用 <code>*</code> 想說奇怪怎麼都是句子 XD</del></p><h2 id="注意事項：建立新檔案時要先儲存檔案或是定義語言"><a href="#注意事項：建立新檔案時要先儲存檔案或是定義語言" class="headerlink" title="注意事項：建立新檔案時要先儲存檔案或是定義語言"></a>注意事項：建立新檔案時要先儲存檔案或是定義語言</h2><p>之前剛使用 Emmet 時，經常在還沒有將檔案儲存起來就使用 Emmet，就會發現怎麼 tab 都不會有 emmet 反應，最後才發現根本沒有存檔 XD 沒有存檔時編輯器會無法透過副檔名，判斷這個檔案是針對哪一個語言，所以會建議先將檔案、副檔名命名好後在開始撰寫程式語法。</p><p>如果沒有要先儲存成檔案，以 VS code 為例，也可以點擊「選取語言」或是點擊底下的純文字鏈結（實際功能是選取語言模式，只是會顯示目前的模式是純文字），上面會出現命令列提供許多語言選擇，在選擇要撰寫的語言，選取完後看到右下角的語言更新，就代表完成囉！</p><ol><li>點擊選取語言</li></ol><p><img src="https://img.guiblogs.com/emmet/btnSelect.jpg" alt="點擊選取語言"></p><ol start="2"><li>選擇要轉寫語言</li></ol><p><img src="https://img.guiblogs.com/emmet/selectLangange.jpg" alt="選擇要轉寫語言"></p><ol start="3"><li>可以看到右下角語言改變，就代表完成囉！</li></ol><p><img src="https://img.guiblogs.com/emmet/complete-selection.jpg" alt="可以看到右下角語言改變，就代表完成囉！"></p><p>這個功能不只 VS code 有，像是 Sublime Text 也有，需要的朋友再去爬文或研究怎麼設定囉～</p>]]></content>
    
    
    <categories>
      
      <category>工具推薦</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
      <tag>emmet</tag>
      
      <tag>VS code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Joomla! 表單元件 JSN UniForm 利用 HTML 語法加上圖片</title>
    <link href="/jsn-uniform-picture/"/>
    <url>/jsn-uniform-picture/</url>
    
    <content type="html"><![CDATA[<p>Joomla! 的表單元件 JSN UniForm 預設提供的表單功能，在 radioButton 內沒有提供圖片選項（不過是免費版的部分，且是 2020 年時改的，不知道之後有沒有改？）</p><p>不過後來發現，只要透過簡單的 HTML 語法就能夠達成這個效果了！</p><a id="more"></a><h2 id="教學開始"><a href="#教學開始" class="headerlink" title="教學開始"></a>教學開始</h2><p>首先聲明一下，這一篇就是稍微紀錄一下，如果你看到的時候已經可以在設定中能夠新增圖片，那就以元件本身設定為主囉！</p><p>進入 radioButton 設定，點選 Values，然後照著以下圖片輸入著 img 的 HTML 語法，以 Enter 換行方式分隔選項（不用加 <code>&lt;br&gt;</code> 或是 <code>,</code>），中間馬賽克的 src 部分輸入圖片網址就完成了～</p><p><img src="https://img.guiblogs.com/jsn-uniform-picture/jsn-uniform-picture.jpg" alt="JSN UniForm 加上圖片"></p>]]></content>
    
    
    <categories>
      
      <category>Joomla</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Joomla</tag>
      
      <tag>JSN UniForm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xampp 錯誤訊息：MySQL shutdown unexpectedly. 解決方法</title>
    <link href="/xampp-shutdown-unexpectedly/"/>
    <url>/xampp-shutdown-unexpectedly/</url>
    
    <content type="html"><![CDATA[<p>有些人可能有個壞習慣，就是 Xampp 沒有正常關閉就直接進行關機；當然不只 Xampp，相信非常多視窗也都是跟著 Xampp 一起被強制關機。</p><blockquote><h2 id="強制關機的結果：資料庫意外關閉"><a href="#強制關機的結果：資料庫意外關閉" class="headerlink" title="強制關機的結果：資料庫意外關閉"></a>強制關機的結果：資料庫意外關閉</h2></blockquote><p>實習日常的第一個動作，就是開啟電腦、打開 Xampp 的 Apache 與 MySQL。但就在某一天，發現打不開 MySQL，並出現以下錯誤訊息：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">09<span class="hljs-selector-pseudo">:42</span><span class="hljs-selector-pseudo">:22</span> <span class="hljs-selector-tag">AM</span> <span class="hljs-selector-attr">[mysql]</span> <span class="hljs-selector-tag">Attempting</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">start</span> <span class="hljs-selector-tag">MySQL</span> <span class="hljs-selector-tag">app</span>...<br>09<span class="hljs-selector-pseudo">:42</span><span class="hljs-selector-pseudo">:22</span> <span class="hljs-selector-tag">AM</span> <span class="hljs-selector-attr">[mysql]</span> <span class="hljs-selector-tag">Status</span> <span class="hljs-selector-tag">change</span> <span class="hljs-selector-tag">detected</span>: <span class="hljs-selector-tag">running</span><br>09<span class="hljs-selector-pseudo">:42</span><span class="hljs-selector-pseudo">:22</span> <span class="hljs-selector-tag">AM</span> <span class="hljs-selector-attr">[mysql]</span> <span class="hljs-selector-tag">Status</span> <span class="hljs-selector-tag">change</span> <span class="hljs-selector-tag">detected</span>: <span class="hljs-selector-tag">stopped</span><br>09<span class="hljs-selector-pseudo">:42</span><span class="hljs-selector-pseudo">:22</span> <span class="hljs-selector-tag">AM</span> <span class="hljs-selector-attr">[mysql]</span> <span class="hljs-selector-tag">Error</span>: <span class="hljs-selector-tag">MySQL</span> <span class="hljs-selector-tag">shutdown</span> <span class="hljs-selector-tag">unexpectedly</span>.<br>09<span class="hljs-selector-pseudo">:42</span><span class="hljs-selector-pseudo">:22</span> <span class="hljs-selector-tag">AM</span> <span class="hljs-selector-attr">[mysql]</span> <span class="hljs-selector-tag">This</span> <span class="hljs-selector-tag">may</span> <span class="hljs-selector-tag">be</span> <span class="hljs-selector-tag">due</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">blocked</span> <span class="hljs-selector-tag">port</span>, <span class="hljs-selector-tag">missing</span> <span class="hljs-selector-tag">dependencies</span>,<br>09<span class="hljs-selector-pseudo">:42</span><span class="hljs-selector-pseudo">:22</span> <span class="hljs-selector-tag">AM</span> <span class="hljs-selector-attr">[mysql]</span> <span class="hljs-selector-tag">improper</span> <span class="hljs-selector-tag">privileges</span>, <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">crash</span>, <span class="hljs-selector-tag">or</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">shutdown</span> <span class="hljs-selector-tag">by</span> <span class="hljs-selector-tag">another</span> <span class="hljs-selector-tag">method</span><br>09<span class="hljs-selector-pseudo">:42</span><span class="hljs-selector-pseudo">:22</span> <span class="hljs-selector-tag">AM</span> <span class="hljs-selector-attr">[mysql]</span> <span class="hljs-selector-tag">Press</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">Logs</span> <span class="hljs-selector-tag">button</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">view</span> <span class="hljs-selector-tag">error</span> <span class="hljs-selector-tag">logs</span> <span class="hljs-selector-tag">and</span> <span class="hljs-selector-tag">check</span><br>09<span class="hljs-selector-pseudo">:42</span><span class="hljs-selector-pseudo">:22</span> <span class="hljs-selector-tag">AM</span> <span class="hljs-selector-attr">[mysql]</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">Windows</span> <span class="hljs-selector-tag">Event</span> <span class="hljs-selector-tag">Viewer</span> <span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">more</span> <span class="hljs-selector-tag">clues</span><br>09<span class="hljs-selector-pseudo">:42</span><span class="hljs-selector-pseudo">:22</span> <span class="hljs-selector-tag">AM</span> <span class="hljs-selector-attr">[mysql]</span> <span class="hljs-selector-tag">If</span> <span class="hljs-selector-tag">you</span> <span class="hljs-selector-tag">need</span> <span class="hljs-selector-tag">more</span> <span class="hljs-selector-tag">help</span>, <span class="hljs-selector-tag">copy</span> <span class="hljs-selector-tag">and</span> <span class="hljs-selector-tag">post</span> <span class="hljs-selector-tag">this</span><br>09<span class="hljs-selector-pseudo">:42</span><span class="hljs-selector-pseudo">:22</span> <span class="hljs-selector-tag">AM</span> <span class="hljs-selector-attr">[mysql]</span> <span class="hljs-selector-tag">entire</span> <span class="hljs-selector-tag">log</span> <span class="hljs-selector-tag">window</span> <span class="hljs-selector-tag">on</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">forums</span><br></code></pre></div></td></tr></table></figure><a id="more"></a><p>查了一下網路上的資料，發現是因為我沒有關閉 Xampp 就進行電腦關機的動作，導致 Xampp 資料毀損。</p><blockquote><h2 id="我是如何解決的？"><a href="#我是如何解決的？" class="headerlink" title="我是如何解決的？"></a>我是如何解決的？</h2></blockquote><p>透過參考資料那篇文章，成功地解決了這個問題！由於那篇文章是英文語系，在這邊我就翻成中文：</p><p>Ps. 貼心提醒：做任何修改之前，請先進行備份哦！我自己有將 Xampp 整個先備份，記得我一開始有做錯，幸好有備份 XD</p><ol><li>將 Xampp\mysql\data 這個資料夾重新命名成另外一個名稱</li><li>重新建立一個同名的資料夾</li><li>將 Xampp\mysql\backup 內的所有內容複製到新建立的 Xampp\mysql\data</li><li>從舊的 Xampp\mysql\data 複製除了 mysql、performance_schema 以及 phpmyadmin 等資料夾的所有檔案，到新的 mysql\data，尤其是 ibdata1 這支檔案，覆蓋到新的 mysql\data 裡</li></ol><blockquote><h2 id="總結與心得"><a href="#總結與心得" class="headerlink" title="總結與心得"></a>總結與心得</h2></blockquote><p>其實這就是一個夜路走多總會遇到鬼的概念，之前覺得沒什麼是因為沒有發生過，只覺得直接關機就好多方便。然而經歷過一次切身之痛就知道該學乖了，人也真是奇妙的生物，每次都要從教訓過才學會成長！XD</p><p>所以希望大家不管是 Xampp 還是其他應用程式，確實將其關閉再將電腦關機，絕對不差這幾分鐘的動作的～第一次能夠修復完成或許是運氣好，如果發生第二次呢？</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ol><li>XAMPP - MySQL shutdown unexpectedly - Stack Overflow<br><a href="https://stackoverflow.com/questions/18022809/xampp-mysql-shutdown-unexpectedly">https://stackoverflow.com/questions/18022809/xampp-mysql-shutdown-unexpectedly</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Xampp</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xampp</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Joomla! 嘗試客製化修改元件控制台界面</title>
    <link href="/j2store-admin-customization/"/>
    <url>/j2store-admin-customization/</url>
    
    <content type="html"><![CDATA[<p>過去在實驗室時接到一個網站業主的請求。</p><p>網站是用 Joomla! 架設、利用 j2Store 搭建起購物車；其中，j2Store 後台界面訂單資訊裡，有個「顧客註記」與「運送追蹤 ID」兩個 input 欄位，如圖所示；業主認為這兩個欄位放在原本這個位置，較不顯眼，希望放置在訂單紀錄下面空白區域。</p><p><img src="https://img.guiblogs.com/j2store-admin-customization/old.jpg" alt="修改前"></p><a id="more"></a><h2 id="但…要從何下手呢？"><a href="#但…要從何下手呢？" class="headerlink" title="但…要從何下手呢？"></a>但…要從何下手呢？</h2><p>我的專題是要製作 Joomla! 元件，但非常慚愧的是，當初剩兩個半月之際，<del>我閱讀官方文件的進度只有 8 篇</del>。</p><p>但是卻也正好是有理解前 8 篇內容，所以體認到：如果要修改元件界面，是否跟開發元件時，將文字內容透過 Joomla! MVC 的 view 顯示出 Hello World! 原理是一樣的呢？</p><p>於是…開始動工！</p><h2 id="分析網址：找出我們要更改的檔案在哪個目錄？"><a href="#分析網址：找出我們要更改的檔案在哪個目錄？" class="headerlink" title="分析網址：找出我們要更改的檔案在哪個目錄？"></a>分析網址：找出我們要更改的檔案在哪個目錄？</h2><p>先來張我那時在實驗室進度報告，PPT 上顯示的解題過程吧～</p><p><img src="https://img.guiblogs.com/j2store-admin-customization/process.jpg" alt="解題過程"></p><p>對了，這篇文章的截圖都是我之前進度報告的 PPT 內容以及 Demo 照片，畫質部分請多多包涵（？</p><p>我們先來拆解一下網址：</p><blockquote><p>/administrator/?option=com_j2store&amp;view=order&amp;id=385</p></blockquote><ul><li>option:com_j2store：元件目錄是 com_j2store，代表是 j2store 元件</li><li>view=order：從 Joomla! MVC 判斷，此界面位於 view 裡的 order 目錄</li></ul><h2 id="複製文字：找出我們要客製的地方在哪個檔案？"><a href="#複製文字：找出我們要客製的地方在哪個檔案？" class="headerlink" title="複製文字：找出我們要客製的地方在哪個檔案？"></a>複製文字：找出我們要客製的地方在哪個檔案？</h2><p>再來，因為我們要更改的是「顧客註記」與「運送追蹤 ID」的顯示位置，所以我們要先找到這兩個欄位是放在哪個檔案。</p><p>但是 Joomla! 是一個多國語言的 CMS 軟體，所以程式檔案內通常不會有中文字，而是會有一組英文字串作為代稱，語言包會針對這些英文字串，對照後並進行翻譯。</p><p>因此，我們必須先找出「顧客註記」或是「運送追蹤 ID」其中一組英文字串出來。</p><p>進入語言包檔案，找到與中文相對應的英文字串後，將字串複製起來。</p><blockquote><p>順帶一提，我之前是用 fileseek 去尋找字串在哪個檔案，不過近期都直接用 VScode 的搜尋功能了！<br>再來源代碼就是上面所提英文字串，那時不知如何稱呼就隨便取一個名字XD 雖然現在也不知如何稱呼（？</p></blockquote><p><img src="https://img.guiblogs.com/j2store-admin-customization/fine-the-code.jpg" alt="尋找相對應英文字串"></p><h2 id="利用英文字串，找出「顧客註記」、「運送追蹤-ID」所在檔案"><a href="#利用英文字串，找出「顧客註記」、「運送追蹤-ID」所在檔案" class="headerlink" title="利用英文字串，找出「顧客註記」、「運送追蹤 ID」所在檔案"></a>利用英文字串，找出「顧客註記」、「運送追蹤 ID」所在檔案</h2><p><img src="https://img.guiblogs.com/j2store-admin-customization/fine-files.jpg" alt="找出程式所在檔案"></p><p>找到了程式所在地！再來就是慢慢 try，看你想放在哪裡 XD 不過因為 j2store 訂單介面是由好幾個檔案組成而成的，所以就要每個檔案試試看；如果要放在訂單紀錄下面，就要放在同目錄 form_general.php 檔案 line 73 處。</p><p><img src="https://img.guiblogs.com/j2store-admin-customization/mobile-program.jpg" alt="移動程式"></p><p>（那個時候不會用 git，所以都用註解來記錄我改了那些 XD 各位會 git 的好孩子別學啊！）</p><p>回到控制台看成果，移動完成！</p><p><img src="https://img.guiblogs.com/j2store-admin-customization/after.jpg" alt="修改後成果"></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>任何學習都是為了之後的累積，那時候完全是為了開發元件去看 Joomla! 官方元件開發教學，練習寫 Joomla! MVC，然後接到這個任務時，就不知不覺聯想到開發元件學習到的觀念～</p><p>其實在那個時候我對 Joomla! MVC 還是並非很熟的（<del>雖然現在也沒有比較熟</del>），但是也體認到，學習程式語言這件事情真的是要親自實作過、去做一個作品，反而能夠慢慢累積對程式的熟悉度！就像架設這個 Hexo 讓我開始對 git 不在懼怕了（？</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Joomla</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Joomla</tag>
      
      <tag>MVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap 5 新手教學實戰營 - Week 2</title>
    <link href="/21day-bootstrap5-2/"/>
    <url>/21day-bootstrap5-2/</url>
    
    <content type="html"><![CDATA[<p>這篇是 Bootstrap 5 新手教學實戰營的第二次上課筆記，學習重點主要是格線系統的應用以及在各個不同大小的裝置上，格線系統的呈現方式，以及相關觀念。</p><p>在介紹格線系統之前，先讓我們認識一下「魔術數字」。</p><h2 id="什麼是魔術數字（magic-number）？"><a href="#什麼是魔術數字（magic-number）？" class="headerlink" title="什麼是魔術數字（magic number）？"></a>什麼是魔術數字（magic number）？</h2><ul><li>設計師開了一個 div 的規格，數字為：左200px、右800px</li><li>程式設計師在程式碼設計了一個數字，但只有程式設計師知道其意義</li></ul><a id="more"></a><p>簡單來說這個數字能夠讓程式跑的順利，但是其可讀性不高，其他程式設計師甚至會難以理解設置這個數字的意義。</p><p>在 Bootstrap，為了解決這個問題，因此有格線系統可以幫助我們設計。</p><h2 id="格線系統"><a href="#格線系統" class="headerlink" title="格線系統"></a>格線系統</h2><p>格線系統有兩個關鍵字，分別為：</p><ul><li>column 欄 ( 基本上常見總欄數是 12 )</li><li>gutter 間距</li></ul><h2 id="格線系統原理：Bootstrap-排版三劍客"><a href="#格線系統原理：Bootstrap-排版三劍客" class="headerlink" title="格線系統原理：Bootstrap 排版三劍客"></a>格線系統原理：Bootstrap 排版三劍客</h2><h3 id="container"><a href="#container" class="headerlink" title=".container"></a>.container</h3><p>針對不同寬度，總共有分兩種：</p><ul><li>container 固定寬度</li><li>container-fiuld 滿版</li></ul><p>另外，在 .container 之下一層，可以放置 .row 或其它東西，不過不能直接放置 .col！</p><p>再來就是，格線系統最外層至少要有一個 container。</p><h3 id="rol"><a href="#rol" class="headerlink" title=".rol"></a>.rol</h3><ul><li>類似於 Excel 欄的概念</li><li>另有 no-gutters 呈現方式，不需要 gutters</li></ul><p>要注意的事情是，「.rol」的下一層一定、一定、一定要是「.col」，否則會有意想不到的驚喜。</p><h3 id="col-1-12"><a href="#col-1-12" class="headerlink" title=".col 1~12"></a>.col 1~12</h3><ul><li>.col 一定要是在 .row 以下第一層</li><li>要要納入格線的內容，都要放置在 .col 以內，也可以在放一個 .row</li></ul><p>另外要注意的事情是，.col 是用來劃分格子的元素（下面會介紹），所以盡量不要去更動它的寬度、左右 margin、padding，容易造成跑版；上下高度與 margin、padding 調整倒是比較沒什麼影響。</p><ul><li>補充：使用「box-sizing: border-box」，可以讓外框線不增加元素的寬度。</li></ul><h3 id="來段範例吧！"><a href="#來段範例吧！" class="headerlink" title="來段範例吧！"></a>來段範例吧！</h3><ul><li>正確示範</li></ul><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;h2&gt;內容標題&lt;/h2&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-6&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-6&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p>再次提醒：<strong>container 下面可是不同的東西並非僅限於 row，但 row 下第一層一定要是 col！</strong></p><ul><li>錯誤示範一：row 下一層有非 .col 的標籤</li></ul><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>        &lt;h2&gt;內容標題&lt;/h2&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-6&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-6&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></div></td></tr></table></figure><ul><li>錯誤示範二：row 下接了單純的 div 標籤，而非 .col div</li></ul><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span>&gt;<br>            &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-6&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>            &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-6&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;/<span class="hljs-keyword">div</span>&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></div></td></tr></table></figure><h2 id="col-基本排列"><a href="#col-基本排列" class="headerlink" title=".col 基本排列"></a>.col 基本排列</h2><h3 id="範例一：row-下一層塞了-3-個-col-4"><a href="#範例一：row-下一層塞了-3-個-col-4" class="headerlink" title="範例一：row 下一層塞了 3 個 col-4"></a>範例一：row 下一層塞了 3 個 col-4</h3><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-4 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-4 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-4 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/21day-bootstrap5-2/row-col4-3.jpg" alt="範例一：row 下一層塞了 3 個 col-4"></p><p>首先，Bootstrap 的 .container 類別樣式會將區塊往置中對齊；再來為求呈現方便，我增加了 .black 的 class，並設定框線樣式，幫助大家區分每一塊 div。</p><p>上面有提到，col 的常見總欄數為 12，而「col-4」就佔了 12 欄中的 4 欄，所以 3 個 col-4，就剛好占滿了 12 欄。</p><p>那如果超過了呢？</p><h3 id="範例二：row-下一層塞了-4-個-col-4"><a href="#範例二：row-下一層塞了-4-個-col-4" class="headerlink" title="範例二：row 下一層塞了 4 個 col-4"></a>範例二：row 下一層塞了 4 個 col-4</h3><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-4 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-4 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-4 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-4 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/21day-bootstrap5-2/row-col4-4.jpg" alt="範例二：row 下一層塞了 4 個 col-4"></p><p>多了一個 col-4，但因為第一列已經塞滿了，因此第 4 個 col-4 就自動往下到第二列呈現出來。</p><h3 id="範例三：有沒有可能是-col-2、col3、col4、col6-排滿一整列？"><a href="#範例三：有沒有可能是-col-2、col3、col4、col6-排滿一整列？" class="headerlink" title="範例三：有沒有可能是 col-2、col3、col4、col6 排滿一整列？"></a>範例三：有沒有可能是 col-2、col3、col4、col6 排滿一整列？</h3><p>當然可以，以 col-2 為範例：</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-2 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-2 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-2 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-2 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-2 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-2 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-2 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/21day-bootstrap5-2/row-col6-7.jpg" alt="範例三：有沒有可能是 col-2、col3、col4、col6 排滿一整列？"></p><p>這次設定了 7 個 col-2，最上層的 col-2 擺滿了 6 個剛好是 12，最後一個 col-2 則自動排到最下面。</p><h3 id="範例四：-col-欄總數一定要剛好是-12-嗎？"><a href="#範例四：-col-欄總數一定要剛好是-12-嗎？" class="headerlink" title="範例四： col 欄總數一定要剛好是 12 嗎？"></a>範例四： col 欄總數一定要剛好是 12 嗎？</h3><p>答案是不用，以下我們用 3 個 col-5 來示範：</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-5 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-5 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-5 black&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/21day-bootstrap5-2/row-col5-3.jpg" alt="範例四： col 欄總數一定要剛好是 12 嗎？"></p><p>我們可以看到，第一列只有 2 個 col-5，加起來只有 10 而已。這就代表 col 的排版在小於 12 都是會編排在同一列的。</p><p>以第三個 col-5 為例，如果加上它就會變成 15 欄，超過 12 欄了，因此就會自動排到下一列去。</p><p>不過相信眼尖的網友可以發現，col-5 示範圖 div 左右是不平衡的，右邊空出來的就是沒有利用到的兩個 col 區塊，這個部分就要靠網頁設計師在撰寫 css 時在調整 row 欄本身的位置呈現了！</p><h2 id="容器、元件以及通用類別的關係"><a href="#容器、元件以及通用類別的關係" class="headerlink" title="容器、元件以及通用類別的關係"></a>容器、元件以及通用類別的關係</h2><p>待會要介紹「端點」，在介紹端點以前，要先介紹容器、元件以及通用類別的關係。</p><ul><li>容器（container）：格線系統最外層</li><li>元件（components）：Bootstrap 提供的一些撰寫好樣式的互動式功能，通常放置在 col 內，除非該 div 未使用格線系統</li><li>通用類別（Utilities）：通用類別可以讓格線系統在不同大小的裝置上，呈現不同的顯示方式</li></ul><h2 id="斷點設計"><a href="#斷點設計" class="headerlink" title="斷點設計"></a>斷點設計</h2><p><img src="https://img.guiblogs.com/21day-bootstrap5-2/grid-option.jpg" alt="斷點設計"></p><p>表格來自於 <a href="https://bootstrap5.hexschool.com/docs/5.0/layout/grid/#grid-options">網格系統 (Grid system) · Bootstrap 5 繁體中文文件 - 六角學院 v5.0</a>。</p><p>Bootstrap 5 總共分成 6 個網格：</p><ul><li>極小 xs - 視窗 &lt; 576px 適用</li><li>小 sm - 視窗 &gt;= 576px 適用</li><li>中 md - 視窗 &gt;= 768px 適用</li><li>大 lg - 視窗 &gt;= 992px 適用</li><li>特大 xl - 視窗 &gt;= 1200px 適用</li><li>超級大 xxl - 視窗 &gt;= 1400px 適用</li></ul><h3 id="來段範例吧！-1"><a href="#來段範例吧！-1" class="headerlink" title="來段範例吧！"></a>來段範例吧！</h3><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-12 col-md-4 col-lg-3&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-12 col-md-4 col-lg-3&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-12 col-md-4 col-lg-3&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-12 col-md-4 col-lg-3&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-12 col-md-4 col-lg-3&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-12 col-md-4 col-lg-3&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-12 col-md-4 col-lg-3&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-12 col-md-4 col-lg-3&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-12 col-md-4 col-lg-3&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-12 col-md-4 col-lg-3&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-12 col-md-4 col-lg-3&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-12 col-md-4 col-lg-3&quot;</span>&gt;網頁內容&lt;/<span class="hljs-keyword">div</span>&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></div></td></tr></table></figure><ul><li>col-12 代表的是一個 col 佔了整個頁面，在這個範例是螢幕較小的時候會呈現出來（Ex. 手機）</li></ul><p><img src="https://img.guiblogs.com/21day-bootstrap5-2/col-12.jpg" alt="col-12"></p><ul><li>col-md-4 代表的是在平板（md：768px）以上，一欄占用 4 格，呈現 3 欄</li></ul><p><img src="https://img.guiblogs.com/21day-bootstrap5-2/col-md-4.jpg" alt="col-md-4"></p><ul><li>col-lg-4 代表的是在電腦版（lg：992px）以上，一欄占用 3 格，呈現 4欄</li></ul><p><img src="https://img.guiblogs.com/21day-bootstrap5-2/col-lg-4.jpg" alt="col-lg-4"></p><h2 id="通用類別與-display"><a href="#通用類別與-display" class="headerlink" title="通用類別與 display"></a>通用類別與 display</h2><p><img src="https://img.guiblogs.com/21day-bootstrap5-2/untilities-display.jpg" alt="通用類別與 display"></p><p>文件來自於 <a href="https://bootstrap5.hexschool.com/docs/5.0/utilities/display/">Display · Bootstrap 5 繁體中文文件 - 六角學院 v5.0</a></p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-title">.d-斷點-值</span><br></code></pre></div></td></tr></table></figure><ul><li>範例一：電腦版以上時隱藏 div</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-title">.d-lg-none</span><br></code></pre></div></td></tr></table></figure><ul><li>範例二：原本設定隱藏，平版以上顯示 div</li></ul><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.d-none</span> <span class="hljs-selector-class">.d-md-blick</span><br></code></pre></div></td></tr></table></figure><h2 id="巢狀格線系統"><a href="#巢狀格線系統" class="headerlink" title="巢狀格線系統"></a>巢狀格線系統</h2><p>可適用在 col 內又需要再劃分隔線時。Ex.左為選單、右為商品列表：</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-4 black&quot;</span>&gt;選單&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col 8&quot;</span>&gt;<br>            &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;row&quot;</span>&gt;<br>                &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-6 black&quot;</span>&gt;商品欄位&lt;/<span class="hljs-keyword">div</span>&gt;<br>                &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-6 black&quot;</span>&gt;商品欄位&lt;/<span class="hljs-keyword">div</span>&gt;<br>                &lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;col-6 black&quot;</span>&gt;商品欄位&lt;/<span class="hljs-keyword">div</span>&gt;<br>            &lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;/<span class="hljs-keyword">div</span>&gt;<br>    &lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://img.guiblogs.com/21day-bootstrap5-2/nested-grid-system.jpg" alt="巢狀格線系統"></p><h2 id="容器與元件的-CSS-設定"><a href="#容器與元件的-CSS-設定" class="headerlink" title="容器與元件的 CSS 設定"></a>容器與元件的 CSS 設定</h2><p>「容器就讓它回歸於容器、元件就讓牠回歸於元件，元件通常不會跟容器寫在一起。」</p><ul><li>錯誤示範</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">.col-12</span> <span class="hljs-string">.btn-primary</span> &#123;<br>    CSS<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>正確示範</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-title">.col-12 &#123;</span><br><span class="hljs-code">    CSS</span><br>&#125;<br><span class="hljs-title">.btn-primary &#123;</span><br><span class="hljs-code">    CSS</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>昨天聽到後面真的有些吃力 QQ，不過好在後續翻閱一些資料以及重看了不懂的部分，就稍微熟悉了一些；身為實習走後端的我，現在來好好學習前端，真的不簡單啊！期許自己持續朝向全端工程師為目標！</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%AD%94%E8%A1%93%E6%95%B8%E5%AD%97_(%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88)">魔術數字 (程式設計) - 維基百科，自由的百科全書</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/box-sizing">box-sizing - CSS | MDN - Mozilla</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Bootstrap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bootstrap</tag>
      
      <tag>CSS</tag>
      
      <tag>Bootstrap5</tag>
      
      <tag>格線</tag>
      
      <tag>通用類別</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bootstrap 5 新手教學實戰營 - Week 1</title>
    <link href="/21day-bootstrap5-1/"/>
    <url>/21day-bootstrap5-1/</url>
    
    <content type="html"><![CDATA[<p>疫情在家，就上網搜尋了一下有什麼東西可以打發時間，就發現了六角學院推出的「<a href="https://hackmd.io/@YmcMgo-NSKOqgTGAjl_5tg/ryar-vGOd/%2FNdGKchTeRBqbkTMiQ2HSmw">21 天 Bootstrap 5 新手教學實戰營</a>」，既然要少出門，那就來報名好好充實一下自己的技術！</p><blockquote><h2 id="什麼是-Bootstrape？"><a href="#什麼是-Bootstrape？" class="headerlink" title="什麼是 Bootstrape？"></a>什麼是 Bootstrape？</h2></blockquote><p>是一個由 HTML、CSS、JavaScript 撰寫而成的前端框架，因為使用 RWD 自適應設計以及行動版優先，讓網站在各個裝置都能夠順利地顯示。</p><a id="more"></a><p>另外開發者可以專心在 HTML 上的開發，因為不管是 CSS 還是 JavaScript，Bootstrap 都有設計好的樣式或是套件可以去使用，是一個可以快速建置網頁介面的工具。</p><blockquote><h2 id="Bootstrape-5-文件"><a href="#Bootstrape-5-文件" class="headerlink" title="Bootstrape 5 文件"></a>Bootstrape 5 文件</h2></blockquote><ul><li><a href="https://getbootstrap.com/docs/5.0/getting-started/introduction/">英文版（原文）</a></li><li><a href="https://bootstrap5.hexschool.com/docs/5.0/getting-started/introduction/">中文版（翻譯）</a></li></ul><blockquote><h2 id="開始撰寫前：了解-CDN-與本地下載的差異"><a href="#開始撰寫前：了解-CDN-與本地下載的差異" class="headerlink" title="開始撰寫前：了解 CDN 與本地下載的差異"></a>開始撰寫前：了解 CDN 與本地下載的差異</h2></blockquote><h3 id="CDN-下載"><a href="#CDN-下載" class="headerlink" title="CDN 下載"></a>CDN 下載</h3><ul><li>因為是載入別人的主機，所以流量部分不會算自己的。</li><li>會根據使用者所在地連到距離最近的主機，所以速度不會是問題。</li><li>如果 CDN 掛掉就會連不上。（但機率較不大）</li></ul><h3 id="本地下載"><a href="#本地下載" class="headerlink" title="本地下載"></a>本地下載</h3><ul><li>可以客製化修改一些程式碼。</li><li>若完整下載會較大，但也可以下載部分。（不過其實影響也還好，根據經驗圖片是影響較大的）</li></ul><blockquote><h2 id="使用-CDN-安裝"><a href="#使用-CDN-安裝" class="headerlink" title="使用 CDN 安裝"></a>使用 CDN 安裝</h2></blockquote><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>將這段 <link> 代碼貼到 <head></head> 內所有樣式表之前。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">integrity</span>=<span class="hljs-string">&quot;sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1&quot;</span> <span class="hljs-attribute">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>將代碼貼在 <body></body> 結尾處。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;script <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js&quot;</span> <span class="hljs-attribute">integrity</span>=<span class="hljs-string">&quot;sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW&quot;</span> <span class="hljs-attribute">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>以上只是將基本 CDN 安裝方式列出，另外還有分離式的 JavaScript 腳本代碼或是初學者範本，請 <a href="https://bootstrap5.hexschool.com/docs/5.0/getting-started/introduction/#starter-template">點擊我</a> 觀看。</p><blockquote><h2 id="使用本地下載安裝"><a href="#使用本地下載安裝" class="headerlink" title="使用本地下載安裝"></a>使用本地下載安裝</h2></blockquote><p><a href="https://bootstrap5.hexschool.com/docs/5.0/getting-started/download/">按此</a> 並看到「編譯好的 CSS 和 JS」，按下下載。解壓縮檔案後，嵌入以下檔案即可使用：</p><ul><li>css/bootstrap.min.css</li><li>js/bootstrap.bundle.min.js</li></ul><blockquote><h2 id="如何確認-BootStrap-有安裝成功？-以及相關技巧"><a href="#如何確認-BootStrap-有安裝成功？-以及相關技巧" class="headerlink" title="如何確認 BootStrap 有安裝成功？( 以及相關技巧 )"></a>如何確認 BootStrap 有安裝成功？( 以及相關技巧 )</h2></blockquote><p>可以裝設一些 BootStrap 撰寫好的套件來玩玩，像是 <a href="https://bootstrap5.hexschool.com/docs/5.0/components/buttons/">按鈕</a>、<a href="https://bootstrap5.hexschool.com/docs/5.0/components/modal/#live-demo">互動視窗</a>或是<a href="https://bootstrap5.hexschool.com/docs/5.0/components/card/">卡片</a>。</p><blockquote><h2 id="使用-Bootstrap：用按鈕當範例"><a href="#使用-Bootstrap：用按鈕當範例" class="headerlink" title="使用 Bootstrap：用按鈕當範例"></a>使用 Bootstrap：用按鈕當範例</h2></blockquote><p>我只擷取兩行語法而已，它的用法就是去更改、組合 class，以下方語法為例，「btn」是預設按鈕該有的樣式，但在增加「btn-primary」就會根據例如背景顏色的不同、其它與預設樣式不同的設定值，去覆蓋原本預設樣式的設定值。</p><figure class="highlight scala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scala">&lt;button <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;<span class="hljs-type">Primary</span>&lt;/button&gt;<br>&lt;button <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btn btn-secondary&quot;</span>&gt;<span class="hljs-type">Secondary</span>&lt;/button&gt;<br></code></pre></div></td></tr></table></figure><blockquote><h2 id="CSS-Reset-與重置"><a href="#CSS-Reset-與重置" class="headerlink" title="CSS Reset 與重置"></a>CSS Reset 與重置</h2></blockquote><p>早期 W3C 還沒有制定 HTML、CSS 等相關規格，導致各家瀏覽器對於 CSS 的預設樣式並不一樣，因此網頁設計師在一開始就必須先進行 CSS Reset 來將各瀏覽器不一樣的地方強制歸零，重置了各瀏覽器的樣式設定。</p><p>而 Bootstrap 也有針對向字型、標題、段落、……等還有其它部分做了重置，詳情可以參考<a href="https://bootstrap5.hexschool.com/docs/5.0/content/reboot/">這個頁面</a>。</p><blockquote><h2 id="終於撰寫完-Week-1-筆記！"><a href="#終於撰寫完-Week-1-筆記！" class="headerlink" title="終於撰寫完 Week 1 筆記！"></a>終於撰寫完 Week 1 筆記！</h2></blockquote><p>由於看到這個課程是星期一的時候，距離第二堂的週三剩兩天，然後週三要上整天的遠距教學，所以趕緊在週二晚上把針對課程內容的筆記補完，待會會再嘗試撰寫 LV1、LV3 的作業內容以及其它主線任務，希望能順利完成啊！</p><p>另外因為這次的課程，發現自己對於 CSS 以及 RWD 的某一些觀念真的不是很熟悉，或是<del>聽到才驚覺原來如此啊</del>！XD 因此之後應該會再補上關於這堂課以及主線任務提供的教學影片，所提到且不熟的內容，來完備我缺少的觀念～</p><p>接下來，繼續加油！</p><blockquote><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2></blockquote><ul><li><a href="https://ithelp.ithome.com.tw/articles/10196528">Day21：小事之 CSS Reset 與 CSS normalize - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天</a><br>有點不清楚該怎麼介紹 CSS Reset 部分，所以參考了一下！</li></ul>]]></content>
    
    
    <categories>
      
      <category>Bootstrap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bootstrap</tag>
      
      <tag>Bootstrap 5</tag>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何更換 cPanel 虛擬主機的 PHP 版本？</title>
    <link href="/cpanel-change-php-version/"/>
    <url>/cpanel-change-php-version/</url>
    
    <content type="html"><![CDATA[<p>時代以及網路在進步，PHP 也不例外，1995 年 PHP 1.0 誕生之後，至今也已經邁向了 PHP 8 時代了！而版本的跌進，當然也就有從早至今的版本可以提供選擇。</p><p>而 cPanel 就有一個功能，是提供用戶能夠切換 PHP 版本，當然我不知道是否是只要有 cPanel 就一定有這個功能，可能要視主機商提供的權限而定？不過至少我目前操作的 cPanel 是擁有可以切換 PHP 版本的。</p><a id="more"></a><h2 id="升級前請三思而後行！"><a href="#升級前請三思而後行！" class="headerlink" title="升級前請三思而後行！"></a>升級前請三思而後行！</h2><p>首先，不管是 PHP 版本的升級、還是其他的更新，在做這些變動前備份是一定要做的。</p><p>再來，必須要確認你上面的程式，是否在 PHP 升級過後會出現一些問題？之前實驗室的 Joomla，就曾經在 PHP 升級的情況之下，造成了錯誤；所以升級前務必要先想清楚。</p><h2 id="確定好要升級後，PHP-升級教學！"><a href="#確定好要升級後，PHP-升級教學！" class="headerlink" title="確定好要升級後，PHP 升級教學！"></a>確定好要升級後，PHP 升級教學！</h2><ol><li>一開始當然就是進入你的 cPanel 控制台，並進行登入。</li></ol><p><img src="https://img.guiblogs.com/cpanel-change-php-version/cpanel-change-php-version-login.jpg" alt="登入 cPanel"></p><h3 id="你的-cPanel-資訊？"><a href="#你的-cPanel-資訊？" class="headerlink" title="你的 cPanel 資訊？"></a>你的 cPanel 資訊？</h3><blockquote><ul><li>cPanel 網址：https://網址:2083 or <a href="https://cpanel.網址/">https://cpanel.網址/</a> 皆可<br>P.s. 以我所就讀的學校校內右邊網址通常連不進去，在校內建議用左邊的網址進入。</li><li>cPanel 帳號、密碼：主機商給的 cPanel 帳號密碼。</li></ul></blockquote><ol start="2"><li>若是繁體中文語言，找到「軟體」欄內的「多 PHP 管理器」鏈結點擊進去。</li></ol><p><img src="https://img.guiblogs.com/cpanel-change-php-version/php-manage.jpg" alt="點擊「多 PHP 管理器」"></p><ol start="3"><li>進入後，你會看到系統預設的 PHP 版本。不過若要修改自己本身的 PHP 版本，請勾選自己網址旁的選取方塊，再來到網頁右邊的「PHP 版本」選擇要更換的版本，按下套用後即可完成更換！</li></ol><p><img src="https://img.guiblogs.com/cpanel-change-php-version/change-pnp-version.jpg" alt="選擇 PHP 版本"></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>cPanel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cPanel</tag>
      
      <tag>PHP</tag>
      
      <tag>虛擬主機</tag>
      
      <tag>版本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP SESSION 重新整理就失效，是發生什麼事情？</title>
    <link href="/session-reorganize-Invalidation/"/>
    <url>/session-reorganize-Invalidation/</url>
    
    <content type="html"><![CDATA[<p>正常來說除非是過久沒有跟伺服器互動，否則 PHP 的 SESSION 不會在「重新整理」後立刻消失。但之前實習有次在開發平台時，卻遇到了一個很尷尬的問題：</p><blockquote><p>前一頁設定好日期並以 session 形式儲存，傳到下一頁。而頁面轉到下一頁時也能夠正常輸出，但如果因為一些原因需要重新整理時，session 卻很神奇的失效了！</p></blockquote><a id="more"></a><hr><blockquote><h2 id="為什麼會發生這個情況？"><a href="#為什麼會發生這個情況？" class="headerlink" title="為什麼會發生這個情況？"></a>為什麼會發生這個情況？</h2></blockquote><p>後來我開始著手找尋資料，網路上看到資料是說，你可以設定多久 session 會被銷毀、或是永遠不銷毀，但是我是完全沒有做任何動作，重新整理就被銷毀了。看了許多論壇，有人說根本不可能重新整理後就沒了，看是從哪裡不小心把它銷毀？</p><p>後來我省思了一下整個流程：我在 a 頁打好要傳送的資訊，透過 JavaScript 的方式存取並傳送至 PHP，再透過 SESSION 的方式接收；後來我再仔細看了一下程式碼，我終於想通了！</p><p>這是我原先的程式碼，只有簡單的一行：</p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">$<span class="hljs-symbol">_SESSION</span>[<span class="hljs-string">&#x27;變數名稱&#x27;</span>] = $<span class="hljs-symbol">_GET</span>[<span class="hljs-string">&#x27;陣列名稱&#x27;</span>][<span class="hljs-string">&#x27;變數名稱&#x27;</span>];<br></code></pre></div></td></tr></table></figure><p>因為我在重新整理時，「$_GET[‘陣列名稱’][‘變數名稱’]」本身是沒有值的，但卻又傳入 SESSION 裡，那這個 SESSION 變數的值就被清掉了！</p><p>發現問題點後，我就多加了一行判斷式，先檢查有「$_GET[‘陣列名稱’][‘變數名稱’]」的存在，才會將值傳送到 SESSION 變數。</p><p>修改後如下：</p><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">if(isset($<span class="hljs-symbol">_GET</span>[<span class="hljs-string">&#x27;陣列名稱&#x27;</span>][<span class="hljs-string">&#x27;變數名稱&#x27;</span>]))&#123;<br>    $<span class="hljs-symbol">_SESSION</span>[<span class="hljs-string">&#x27;變數名稱&#x27;</span>] = $<span class="hljs-symbol">_GET</span>[<span class="hljs-string">&#x27;陣列名稱&#x27;</span>][<span class="hljs-string">&#x27;變數名稱&#x27;</span>];<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><h2 id="結果與後記"><a href="#結果與後記" class="headerlink" title="結果與後記"></a>結果與後記</h2></blockquote><p>經過修改後這個問題就解決了。雖然我相信這只是非常簡單的程式碼，但寫程式真的是有時候漏了一個環節，就會發現自己沒有預期到的錯誤！寫程式真的是很靠細心程度呢！</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>SESSION</tag>
      
      <tag>GET</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 is_iterable()  解決：Warning: count(): Parameter must be an array or an object that implements Countable</title>
    <link href="/joomla-is-iterable/"/>
    <url>/joomla-is-iterable/</url>
    
    <content type="html"><![CDATA[<p>去年與學弟幫忙實驗室架設一個新的 Joomla 時，那時是使用 gk_shop_and_buy 這個佈景，但在新增一篇文章時，我們發現到了它會出現這個錯誤訊息：</p><p><img src="https://img.guiblogs.com/joomla-is-iterable/joomla-is-iterable-before.jpg" alt="錯誤訊息"></p><a id="more"></a><h2 id="問題點"><a href="#問題點" class="headerlink" title="問題點"></a>問題點</h2><p>看到了這段訊息後的第一反應，想必就是到它所指定的擋案來看看了。</p><ul><li>擋案：templates/gk_shop_and_buy/html/com_content/article/default.php</li><li>位置：line 13 - line 19</li></ul><figure class="highlight php"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$attribs</span> &amp;&amp; count(<span class="hljs-variable">$attribs</span>)) &#123;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$attribs</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$value</span> != <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-variable">$params</span>-&gt;set(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$value</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>因此開始使用 Google 查找資料，查到了<a href="https://stackoverflow.com/questions/61745533/php-7-4-warning-count-parameter-must-be-an-array">這篇文章</a>後，注意到了這個從 PHP 7.1 開始出現的 is_iterable() 函數。</p><p>後來就將 line 13 的這一段程式碼：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(<span class="hljs-variable">$attribs</span> &amp;&amp; count(<span class="hljs-variable">$attribs</span>)</span></span>) &#123;<br></code></pre></div></td></tr></table></figure><p>中的 count 改為 is_iterable：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(<span class="hljs-variable">$attribs</span> &amp;&amp; is_iterable(<span class="hljs-variable">$attribs</span>)</span></span>) &#123;<br></code></pre></div></td></tr></table></figure><p>改完之後，錯誤訊息就消失了！</p><p><img src="https://img.guiblogs.com/joomla-is-iterable/joomla-is-iterable-after.jpg" alt="改善完成"></p><h2 id="結論與心得"><a href="#結論與心得" class="headerlink" title="結論與心得"></a>結論與心得</h2><p>閱讀這篇文章的同時也在尋找之所以會有這段錯誤，是因為 count() 它只有針對於 array 作為參數，但如果 print_r 出 $attribs 時，就可以發現這個變數是儲存 stdClass Object，也就因此無法使用 count() 這個函數去做計算了。</p><p>而這篇文章的另外一個方法是使用 is_countable() 解決，實際使用過後也是能解決，但因為目前對它的了解程度還不如 is_iterable()，因此等哪天有空去了解這個函數的用法後，或許會在修改本篇文章或是發表新文章！</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li>PHP 7.4 - Warning: count(): Parameter must be an array<br><a href="https://stackoverflow.com/questions/61745533/php-7-4-warning-count-parameter-must-be-an-array">https://stackoverflow.com/questions/61745533/php-7-4-warning-count-parameter-must-be-an-array</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
      <category>Joomla</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>Joomla</tag>
      
      <tag>is_iterable()</tag>
      
      <tag>count()</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>撰寫 Shell 指令，每日自動備份資料庫 - 使用 cPanel Cron Job</title>
    <link href="/shell-backup/"/>
    <url>/shell-backup/</url>
    
    <content type="html"><![CDATA[<p>我所待的 Lab 裡滿多網站都是用 cPanel 的排程每日備份資料庫內容，但後來發現某一家主機商下面的備份檔，一下備份正常、一下卻又出現檔案大小「763」容量極小的備份不完全狀況，如下所示……</p><p><img src="https://img.guiblogs.com/shell-backup/shell-backup-before.jpg" alt="執行前畫面"></p><a id="more"></a><h2 id="原始作法"><a href="#原始作法" class="headerlink" title="原始作法"></a>原始作法</h2><p>網站所使用的虛擬主機有提供 cPanel 控制台，因而利用 cPanel 內建的 Cron Job 排程器進行每日排程。指令如下：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/mysqldump --user=帳號 --password=密碼 --all-databases --single-transaction &gt; /</span>home<span class="hljs-regexp">/帳號/</span>public_html<span class="hljs-regexp">/backup/</span>full_backup_`date -I`.sql<br></code></pre></div></td></tr></table></figure><h2 id="新作法"><a href="#新作法" class="headerlink" title="新作法"></a>新作法</h2><p>後來到網上找了許多相關文章，中文資源找不到往國外資源翻也依舊找不到。後來想了想：那如果自己寫一個腳本來做呢？</p><p>新的作法，會搭配原有備份指令，並另外新增自己撰寫的 check shell 指令檔案；利用 cPanel 排程機制，每日自動執行該檔案。</p><ol><li>cPanel Cron Job 指令：每日0時0秒執行一次</li></ol><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>sh <span class="hljs-regexp">/home/</span>cPanel帳號<span class="hljs-regexp">/public_html/</span>backup/db_backup.sh<br></code></pre></div></td></tr></table></figure><ol start="2"><li>Shell 腳本檔：db_backup.sh</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">#!/bin/sh<br><br>filesize=<span class="hljs-constructor">$(<span class="hljs-params">stat</span> -<span class="hljs-params">c</span>%<span class="hljs-params">s</span> <span class="hljs-operator">/</span><span class="hljs-params">home</span><span class="hljs-operator">/</span><span class="hljs-params">cPanel</span>帳號<span class="hljs-operator">/</span><span class="hljs-params">public_html</span><span class="hljs-operator">/</span><span class="hljs-params">backup</span><span class="hljs-operator">/</span><span class="hljs-params">full_backup_</span>`<span class="hljs-params">date</span> -I`.<span class="hljs-params">sql</span>)</span> # 要檢查的備份檔位置<br><span class="hljs-keyword">while</span> <span class="hljs-literal">[ <span class="hljs-number">1000</span> -<span class="hljs-identifier">gt</span> <span class="hljs-identifier">$</span>((<span class="hljs-identifier">$filesize</span>)) ]</span> # 如果檔案小於 <span class="hljs-number">1000</span>，代表備份失敗，進入迴圈再次進行備份<br><span class="hljs-keyword">do</span><br>    /usr/bin/mysqldump --user=cPanel帳號 --password=cPanel密碼 --all-databases --single-transaction &gt; /home/cPanel帳號/public_html/backup/full_backup_`date -I`.sql # 再次進行備份<br>    filesize=<span class="hljs-constructor">$(<span class="hljs-params">stat</span> -<span class="hljs-params">c</span>%<span class="hljs-params">s</span> <span class="hljs-operator">/</span><span class="hljs-params">home</span><span class="hljs-operator">/</span><span class="hljs-params">cPanel</span>帳號<span class="hljs-operator">/</span><span class="hljs-params">public_html</span><span class="hljs-operator">/</span><span class="hljs-params">backup</span><span class="hljs-operator">/</span><span class="hljs-params">full_backup_</span>`<span class="hljs-params">date</span> -I`.<span class="hljs-params">sql</span>)</span> # 重新選取要被檢查的備份檔，並進入迴圈進行檢查，直到檔案大小大於 <span class="hljs-number">1000</span><br><span class="hljs-keyword">done</span><br></code></pre></div></td></tr></table></figure><p>GitHub Link: <a href="https://github.com/guitimliu/mysql-auto-backup">mysql-auto-backup</a></p><h2 id="結論與後記"><a href="#結論與後記" class="headerlink" title="結論與後記"></a>結論與後記</h2><p>這段程式其實是我在去年差不多三～四月寫的，雖然只有短短幾行程式碼，但當時為了解決這個問題，前前後後花了三天的時間，從自己研究到實驗室的同學一起學習，最後寫出一個能夠備份的腳本，成果一出來的那一刻到現在還是令人難忘！</p><p>至於舊作法為何偶爾會無法備份成功？其實我也不知道，猜測是因為資料內容過大無法直接透過 cPanel 的機制去備份？這我就不清楚了，可能要請路過的大神來做解答。</p><p>目前指令執行到現在也快一年了，除了之前因為虛擬主機空間用完、虛擬主機莫名被降方案（QQ）之外，基本上都是執行成功的，附上去年 4/21 時自動備份執行結果。</p><p><img src="https://img.guiblogs.com/shell-backup/shell-backup-after.jpg" alt="執行後結果畫面"></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
      <tag>cPanel</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
